{
  "address": "0x1922Acf79f3fC716ED601eA08395E182276A3EFe",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        }
      ],
      "name": "TokenMetadataURIUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        }
      ],
      "name": "TokenURIUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MINT_WITH_SIG_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERMIT_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "bidder",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Decimal.D256",
              "name": "sellOnShare",
              "type": "tuple"
            }
          ],
          "internalType": "struct IMarket.Bid",
          "name": "bid",
          "type": "tuple"
        }
      ],
      "name": "acceptBid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "auctionTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "burnToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "marketContractAddr",
          "type": "address"
        }
      ],
      "name": "configure",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        }
      ],
      "name": "getRecentToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "isApprovedOrOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marketContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "tokenURI",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "metadataURI",
              "type": "string"
            },
            {
              "internalType": "bytes32",
              "name": "contentHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "metadataHash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct IMedia.MediaData",
          "name": "data",
          "type": "tuple"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Decimal.D256",
              "name": "prevOwner",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Decimal.D256",
              "name": "creator",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Decimal.D256",
              "name": "owner",
              "type": "tuple"
            }
          ],
          "internalType": "struct IMarket.BidShares",
          "name": "bidShares",
          "type": "tuple"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "probability",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "yield",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "boost",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IZoo.Rarity",
              "name": "rarity",
              "type": "tuple"
            },
            {
              "internalType": "enum IZoo.Type",
              "name": "kind",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "birthday",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "customName",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "animalA",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "animalB",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenA",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenB",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IZoo.Parents",
              "name": "parents",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "count",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "timestamp",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IZoo.Breed",
              "name": "breed",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "eggID",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "dropID",
                  "type": "uint256"
                },
                {
                  "internalType": "bool",
                  "name": "burned",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "swapped",
                  "type": "bool"
                }
              ],
              "internalType": "struct IZoo.Meta",
              "name": "meta",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "tokenURI",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "metadataURI",
                  "type": "string"
                },
                {
                  "internalType": "bytes32",
                  "name": "contentHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "metadataHash",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct IMedia.MediaData",
              "name": "data",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Decimal.D256",
                  "name": "prevOwner",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Decimal.D256",
                  "name": "creator",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Decimal.D256",
                  "name": "owner",
                  "type": "tuple"
                }
              ],
              "internalType": "struct IMarket.BidShares",
              "name": "bidShares",
              "type": "tuple"
            }
          ],
          "internalType": "struct IZoo.Token",
          "name": "token",
          "type": "tuple"
        }
      ],
      "name": "mintToken",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "probability",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "yield",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "boost",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IZoo.Rarity",
              "name": "rarity",
              "type": "tuple"
            },
            {
              "internalType": "enum IZoo.Type",
              "name": "kind",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "birthday",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "customName",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "animalA",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "animalB",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenA",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenB",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IZoo.Parents",
              "name": "parents",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "count",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "timestamp",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IZoo.Breed",
              "name": "breed",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "eggID",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "dropID",
                  "type": "uint256"
                },
                {
                  "internalType": "bool",
                  "name": "burned",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "swapped",
                  "type": "bool"
                }
              ],
              "internalType": "struct IZoo.Meta",
              "name": "meta",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "tokenURI",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "metadataURI",
                  "type": "string"
                },
                {
                  "internalType": "bytes32",
                  "name": "contentHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "metadataHash",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct IMedia.MediaData",
              "name": "data",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Decimal.D256",
                  "name": "prevOwner",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Decimal.D256",
                  "name": "creator",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Decimal.D256",
                  "name": "owner",
                  "type": "tuple"
                }
              ],
              "internalType": "struct IMarket.BidShares",
              "name": "bidShares",
              "type": "tuple"
            }
          ],
          "internalType": "struct IZoo.Token",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "tokenURI",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "metadataURI",
              "type": "string"
            },
            {
              "internalType": "bytes32",
              "name": "contentHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "metadataHash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct IMedia.MediaData",
          "name": "data",
          "type": "tuple"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Decimal.D256",
              "name": "prevOwner",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Decimal.D256",
              "name": "creator",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Decimal.D256",
              "name": "owner",
              "type": "tuple"
            }
          ],
          "internalType": "struct IMarket.BidShares",
          "name": "bidShares",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct IMedia.EIP712Signature",
          "name": "sig",
          "type": "tuple"
        }
      ],
      "name": "mintWithSig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "mintWithSigNonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct IMedia.EIP712Signature",
          "name": "sig",
          "type": "tuple"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "permitNonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "previousTokenOwners",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "removeAsk",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "removeBid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "revokeApproval",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            }
          ],
          "internalType": "struct IMarket.Ask",
          "name": "ask",
          "type": "tuple"
        }
      ],
      "name": "setAsk",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "bidder",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Decimal.D256",
              "name": "sellOnShare",
              "type": "tuple"
            }
          ],
          "internalType": "struct IMarket.Bid",
          "name": "bid",
          "type": "tuple"
        }
      ],
      "name": "setBid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenContentHashes",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenCreators",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "tokenExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenMetadataHashes",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenMetadataURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "metadataURI",
          "type": "string"
        }
      ],
      "name": "updateTokenMetadataURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        }
      ],
      "name": "updateTokenURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4299ae0640405277a926566faca4429ba8bc7528ca1c3485de406034cf3ce7d7",
  "receipt": {
    "to": null,
    "from": "0xd0AEF8b960d43418DC0A83DD0cAc04A3793De3E0",
    "contractAddress": "0x1922Acf79f3fC716ED601eA08395E182276A3EFe",
    "transactionIndex": 0,
    "gasUsed": "4011485",
    "logsBloom": "0x
    "blockHash": "0x52627b907b3db4634d813cf14c23049f848a6c4e967f9806c79a4180a7e47467",
    "transactionHash": "0x4299ae0640405277a926566faca4429ba8bc7528ca1c3485de406034cf3ce7d7",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 12858854,
        "transactionHash": "0x4299ae0640405277a926566faca4429ba8bc7528ca1c3485de406034cf3ce7d7",
        "address": "0x1922Acf79f3fC716ED601eA08395E182276A3EFe",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d0aef8b960d43418dc0a83dd0cac04a3793de3e0"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x52627b907b3db4634d813cf14c23049f848a6c4e967f9806c79a4180a7e47467"
      }
    ],
    "blockNumber": 12858854,
    "cumulativeGasUsed": "4011485",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Animal",
    "ANML"
  ],
  "solcInputHash": "d34382ecf2146ad0057f767ad0206d21",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"TokenMetadataURIUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"TokenURIUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MINT_WITH_SIG_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"sellOnShare\",\"type\":\"tuple\"}],\"internalType\":\"struct IMarket.Bid\",\"name\":\"bid\",\"type\":\"tuple\"}],\"name\":\"acceptBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"auctionTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"burnToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketContractAddr\",\"type\":\"address\"}],\"name\":\"configure\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"getRecentToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"isApprovedOrOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"contentHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"metadataHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct IMedia.MediaData\",\"name\":\"data\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"prevOwner\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"owner\",\"type\":\"tuple\"}],\"internalType\":\"struct IMarket.BidShares\",\"name\":\"bidShares\",\"type\":\"tuple\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"probability\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yield\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boost\",\"type\":\"uint256\"}],\"internalType\":\"struct IZoo.Rarity\",\"name\":\"rarity\",\"type\":\"tuple\"},{\"internalType\":\"enum IZoo.Type\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"birthday\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"customName\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"animalA\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"animalB\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tokenA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenB\",\"type\":\"uint256\"}],\"internalType\":\"struct IZoo.Parents\",\"name\":\"parents\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct IZoo.Breed\",\"name\":\"breed\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"eggID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dropID\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"burned\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"swapped\",\"type\":\"bool\"}],\"internalType\":\"struct IZoo.Meta\",\"name\":\"meta\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"contentHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"metadataHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct IMedia.MediaData\",\"name\":\"data\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"prevOwner\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"owner\",\"type\":\"tuple\"}],\"internalType\":\"struct IMarket.BidShares\",\"name\":\"bidShares\",\"type\":\"tuple\"}],\"internalType\":\"struct IZoo.Token\",\"name\":\"token\",\"type\":\"tuple\"}],\"name\":\"mintToken\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"probability\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yield\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boost\",\"type\":\"uint256\"}],\"internalType\":\"struct IZoo.Rarity\",\"name\":\"rarity\",\"type\":\"tuple\"},{\"internalType\":\"enum IZoo.Type\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"birthday\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"customName\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"animalA\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"animalB\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tokenA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenB\",\"type\":\"uint256\"}],\"internalType\":\"struct IZoo.Parents\",\"name\":\"parents\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct IZoo.Breed\",\"name\":\"breed\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"eggID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dropID\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"burned\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"swapped\",\"type\":\"bool\"}],\"internalType\":\"struct IZoo.Meta\",\"name\":\"meta\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"contentHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"metadataHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct IMedia.MediaData\",\"name\":\"data\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"prevOwner\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"owner\",\"type\":\"tuple\"}],\"internalType\":\"struct IMarket.BidShares\",\"name\":\"bidShares\",\"type\":\"tuple\"}],\"internalType\":\"struct IZoo.Token\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"contentHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"metadataHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct IMedia.MediaData\",\"name\":\"data\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"prevOwner\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"owner\",\"type\":\"tuple\"}],\"internalType\":\"struct IMarket.BidShares\",\"name\":\"bidShares\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct IMedia.EIP712Signature\",\"name\":\"sig\",\"type\":\"tuple\"}],\"name\":\"mintWithSig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mintWithSigNonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct IMedia.EIP712Signature\",\"name\":\"sig\",\"type\":\"tuple\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"permitNonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"previousTokenOwners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"removeAsk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"removeBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"revokeApproval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"}],\"internalType\":\"struct IMarket.Ask\",\"name\":\"ask\",\"type\":\"tuple\"}],\"name\":\"setAsk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"sellOnShare\",\"type\":\"tuple\"}],\"internalType\":\"struct IMarket.Bid\",\"name\":\"bid\",\"type\":\"tuple\"}],\"name\":\"setBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenContentHashes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenCreators\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"tokenExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenMetadataHashes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenMetadataURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"}],\"name\":\"updateTokenMetadataURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"updateTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"baseURI()\":{\"details\":\"Returns the base URI set via {_setBaseURI}. This will be automatically added as a prefix in {tokenURI} to each token's URI, or to the token ID if no specific URI is set for that token ID.\"},\"burn(uint256)\":{\"details\":\"Only callable if the media owner is also the creator.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"isApprovedOrOwner(address,uint256)\":{\"details\":\"Public method which returns whether `spender` is allowed to manage `tokenID`. Requirements: - `tokenID` must exist.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"permit(address,uint256,(uint256,uint8,bytes32,bytes32))\":{\"details\":\"This method is loosely based on the permit for ERC-20 tokens in  EIP-2612, but modified for ERC-721.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenMetadataURI(uint256)\":{\"returns\":{\"_0\":\"the metadata URI for the token\"}},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"This function is an override of the base OZ implementation because we will return the tokenURI even if the media has been burned. In addition, this protocol does not support a base URI, so relevant conditionals are removed.\",\"returns\":{\"_0\":\"the URI for a token\"}},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateTokenMetadataURI(uint256,string)\":{\"details\":\"only callable by approved or owner\"},\"updateTokenURI(uint256,string)\":{\"details\":\"only callable by approved or owner\"}},\"title\":\"A media value system, with perpetual equity to creators\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptBid(uint256,(uint256,address,address,address,(uint256)))\":{\"notice\":\"see IMedia\"},\"auctionTransfer(uint256,address)\":{\"notice\":\"see IMedia\"},\"burn(uint256)\":{\"notice\":\"Burn a token.\"},\"configure(address)\":{\"notice\":\"Sets the market contract address. This address is the only permitted address that can call the mutable functions.\"},\"constructor\":{\"notice\":\"On deployment, set the market contract address and register the ERC721 metadata interface\"},\"getRecentToken(address)\":{\"notice\":\"see IMedia\"},\"mint((string,string,bytes32,bytes32),((uint256),(uint256),(uint256)))\":{\"notice\":\"see IMedia\"},\"mintWithSig(address,(string,string,bytes32,bytes32),((uint256),(uint256),(uint256)),(uint256,uint8,bytes32,bytes32))\":{\"notice\":\"see IMedia\"},\"permit(address,uint256,(uint256,uint8,bytes32,bytes32))\":{\"notice\":\"See IMedia\"},\"removeAsk(uint256)\":{\"notice\":\"see IMedia\"},\"removeBid(uint256)\":{\"notice\":\"see IMedia\"},\"revokeApproval(uint256)\":{\"notice\":\"Revoke the approvals for a token. The provided `approve` function is not sufficient for this protocol, as it does not allow an approved address to revoke it's own approval. In instances where a 3rd party is interacting on a user's behalf via `permit`, they should revoke their approval once their task is complete as a best practice.\"},\"setAsk(uint256,(uint256,address))\":{\"notice\":\"see IMedia\"},\"setBid(uint256,(uint256,address,address,address,(uint256)))\":{\"notice\":\"see IMedia\"},\"tokenExists(uint256)\":{\"notice\":\"Helper to check that token has not been burned or minted\"},\"tokenMetadataURI(uint256)\":{\"notice\":\"Return the metadata URI for a piece of media given the token URI\"},\"tokenURI(uint256)\":{\"notice\":\"return the URI for a particular piece of media with the specified tokenId\"},\"updateTokenMetadataURI(uint256,string)\":{\"notice\":\"see IMedia\"},\"updateTokenURI(uint256,string)\":{\"notice\":\"see IMedia\"}},\"notice\":\"This contract provides an interface to mint media with a market owned by the creator.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/Media.sol\":\"Media\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa69205e5009601cf13be78b1e2f500e1e3b1d8012f22d966e63975273f602038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x78450f4e3b722cce467b21e285f72ce5eaf361e9ba9dd2241a413926246773cd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC165.sol\\\";\\n\\n/**\\n * @dev Storage based implementation of the {IERC165} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterface} to declare\\n * their support of an interface.\\n */\\nabstract contract ERC165Storage is ERC165 {\\n    /**\\n     * @dev Mapping of interface ids to whether or not it's supported.\\n     */\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return super.supportsInterface(interfaceId) || _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n}\\n\",\"keccak256\":\"0x90716b47325c5cd49d4eef5bbe4cba711c81ce317479038e4f0a9a17a206945a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0x49ebdac5d515aebb95168564158940b79d7d5d12fbfe59cec546a00d57fee64a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\\n *\\n *     // Declare a set state variable\\n *     EnumerableMap.UintToAddressMap private myMap;\\n * }\\n * ```\\n *\\n * As of v3.0.0, only maps of type `uint256 -> address` (`UintToAddressMap`) are\\n * supported.\\n */\\nlibrary EnumerableMap {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Map type with\\n    // bytes32 keys and values.\\n    // The Map implementation uses private functions, and user-facing\\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\\n    // the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit\\n    // in bytes32.\\n\\n    struct Map {\\n        // Storage of keys\\n        EnumerableSet.Bytes32Set _keys;\\n        mapping(bytes32 => bytes32) _values;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function _set(\\n        Map storage map,\\n        bytes32 key,\\n        bytes32 value\\n    ) private returns (bool) {\\n        map._values[key] = value;\\n        return map._keys.add(key);\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\\n        delete map._values[key];\\n        return map._keys.remove(key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function _contains(Map storage map, bytes32 key) private view returns (bool) {\\n        return map._keys.contains(key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function _length(Map storage map) private view returns (uint256) {\\n        return map._keys.length();\\n    }\\n\\n    /**\\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of entries inside the\\n     * array, and it may change when more entries are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\\n        bytes32 key = map._keys.at(index);\\n        return (key, map._values[key]);\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {\\n        bytes32 value = map._values[key];\\n        if (value == bytes32(0)) {\\n            return (_contains(map, key), bytes32(0));\\n        } else {\\n            return (true, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || _contains(map, key), \\\"EnumerableMap: nonexistent key\\\");\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {_tryGet}.\\n     */\\n    function _get(\\n        Map storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) private view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || _contains(map, key), errorMessage);\\n        return value;\\n    }\\n\\n    // UintToAddressMap\\n\\n    struct UintToAddressMap {\\n        Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        UintToAddressMap storage map,\\n        uint256 key,\\n        address value\\n    ) internal returns (bool) {\\n        return _set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\\n        return _remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\\n        return _contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\\n        return _length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\\n        return (uint256(key), address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\\n        (bool success, bytes32 value) = _tryGet(map._inner, bytes32(key));\\n        return (success, address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\\n        return address(uint160(uint256(_get(map._inner, bytes32(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        UintToAddressMap storage map,\\n        uint256 key,\\n        string memory errorMessage\\n    ) internal view returns (address) {\\n        return address(uint160(uint256(_get(map._inner, bytes32(key), errorMessage))));\\n    }\\n}\\n\",\"keccak256\":\"0xc1b966eb28b972bae1d366d8ef0b3133eea869cfc65b8b4c90c389fcd67a8085\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x3778dc944f4a696335878bad8beca60f38b7c79b7a0bd8ddbeb618bd502a95ae\",\"license\":\"MIT\"},\"src/Decimal.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity >=0.8.4;\\npragma experimental ABIEncoderV2;\\n\\n// Copyright 2019 dYdX Trading Inc.\\n//\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n// you may not use this file except in compliance with the License.\\n// You may obtain a copy of the License at\\n// http://www.apache.org/licenses/LICENSE-2.0\\n// Unless required by applicable law or agreed to in writing, software\\n// distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n// See the License for the specific language governing permissions and\\n// limitations under the License.\\n\\n/**\\n * NOTE: This file is a clone of the dydx protocol's Decimal.sol contract. It was forked from https://github.com/dydxprotocol/solo\\n * at commit 2d8454e02702fe5bc455b848556660629c3cad36\\n *\\n * It has not been modified other than to use a newer solidity in the pragma to match the rest of the contract suite of this project\\n */\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport { Math } from \\\"./Math.sol\\\";\\n\\n/**\\n * @title Decimal\\n *\\n * Library that defines a fixed-point number with 18 decimal places.\\n */\\nlibrary Decimal {\\n    using SafeMath for uint256;\\n\\n    // ============ Constants ============\\n\\n    uint256 constant BASE_POW = 18;\\n    uint256 constant BASE = 10**BASE_POW;\\n\\n    // ============ Structs ============\\n\\n    struct D256 {\\n        uint256 value;\\n    }\\n\\n    // ============ Functions ============\\n\\n    function one() internal pure returns (D256 memory) {\\n        return D256({value: BASE});\\n    }\\n\\n    function onePlus(D256 memory d) internal pure returns (D256 memory) {\\n        return D256({value: d.value.add(BASE)});\\n    }\\n\\n    function mul(uint256 target, D256 memory d)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return Math.getPartial(target, d.value, BASE);\\n    }\\n\\n    function div(uint256 target, D256 memory d)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return Math.getPartial(target, BASE, d.value);\\n    }\\n}\\n\",\"keccak256\":\"0x1badf132165448ca3c23e4446f5fb4f26cd6a68e82b777734cf429d42c48f9c6\",\"license\":\"Apache-2.0\"},\"src/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.4;\\nimport \\\"./console.sol\\\";\\n\\n/**\\n * NOTE: This file is a clone of the OpenZeppelin ERC721.sol contract. It was forked from https://github.com/OpenZeppelin/openzeppelin-contracts\\n * at commit 1ada3b633e5bfd9d4ffe0207d64773a11f5a7c40\\n *\\n *\\n * The following functions needed to be modified, prompting this clone:\\n *  - `_tokenURIs` visibility was changed from private to internal to support updating URIs after minting\\n *  - `_baseURI` visibiility was changed from private to internal to support fetching token URI even after the token was burned\\n *  - `_INTERFACE_ID_ERC721_METADATA` is no longer registered as an interface because _tokenURI now returns raw content instead of a JSON file, and supports updatable URIs\\n *  - `_approve` visibility was changed from private to internal to support EIP-2612 flavored permits and approval revocation by an approved address\\n */\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableMap.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n/**\\n * @title ERC721 Non-Fungible Token Standard basic implementation\\n * @dev see https://eips.ethereum.org/EIPS/eip-721\\n */\\ncontract ERC721 is\\n    Context,\\n    ERC165Storage,\\n    IERC721,\\n    IERC721Metadata,\\n    IERC721Enumerable\\n{\\n    using SafeMath for uint256;\\n    using Address for address;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\\n    using Strings for uint256;\\n\\n    // Equals to `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`\\n    // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\\n\\n    // Mapping from holder address to their (enumerable) set of owned tokens\\n    mapping(address => EnumerableSet.UintSet) private _holderTokens;\\n\\n    // Enumerable mapping from token ids to their owners\\n    EnumerableMap.UintToAddressMap private _tokenOwners;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) internal _tokenURIs;\\n\\n    // Base URI\\n    string internal _baseURI;\\n\\n    /*\\n     *     bytes4(keccak256('balanceOf(address)')) == 0x70a08231\\n     *     bytes4(keccak256('ownerOf(uint256)')) == 0x6352211e\\n     *     bytes4(keccak256('approve(address,uint256)')) == 0x095ea7b3\\n     *     bytes4(keccak256('getApproved(uint256)')) == 0x081812fc\\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\\n     *     bytes4(keccak256('transferFrom(address,address,uint256)')) == 0x23b872dd\\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256)')) == 0x42842e0e\\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)')) == 0xb88d4fde\\n     *\\n     *     => 0x70a08231 ^ 0x6352211e ^ 0x095ea7b3 ^ 0x081812fc ^\\n     *        0xa22cb465 ^ 0xe985e9c5 ^ 0x23b872dd ^ 0x42842e0e ^ 0xb88d4fde == 0x80ac58cd\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\\n\\n    /*\\n     *     bytes4(keccak256('totalSupply()')) == 0x18160ddd\\n     *     bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) == 0x2f745c59\\n     *     bytes4(keccak256('tokenByIndex(uint256)')) == 0x4f6ccce7\\n     *\\n     *     => 0x18160ddd ^ 0x2f745c59 ^ 0x4f6ccce7 == 0x780e9d63\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory __name, string memory __symbol) {\\n        _name = __name;\\n        _symbol = __symbol;\\n\\n        // register the supported interfaces to conform to ERC721 via ERC165\\n        _registerInterface(_INTERFACE_ID_ERC721);\\n        _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view override returns (uint256) {\\n        require(\\n            owner != address(0),\\n            \\\"ERC721: balance query for the zero address\\\"\\n        );\\n\\n        return _holderTokens[owner].length();\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenID) public view override returns (address) {\\n        return\\n            _tokenOwners.get(\\n                tokenID,\\n                \\\"ERC721: owner query for nonexistent token\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenID)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (string memory)\\n    {\\n        require(\\n            _exists(tokenID),\\n            \\\"ERC721Metadata: URI query for nonexistent token\\\"\\n        );\\n\\n        string memory _tokenURI = _tokenURIs[tokenID];\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(_baseURI).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(_baseURI, _tokenURI));\\n        }\\n        // If there is a baseURI but no tokenURI, concatenate the tokenID to the baseURI.\\n        return string(abi.encodePacked(_baseURI, tokenID.toString()));\\n    }\\n\\n    /**\\n     * @dev Returns the base URI set via {_setBaseURI}. This will be\\n     * automatically added as a prefix in {tokenURI} to each token's URI, or\\n     * to the token ID if no specific URI is set for that token ID.\\n     */\\n    function baseURI() public view returns (string memory) {\\n        return _baseURI;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _holderTokens[owner].at(index);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        // _tokenOwners are indexed by tokenIDs, so .length() returns the number of tokenIDs\\n        return _tokenOwners.length();\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        (uint256 tokenID, ) = _tokenOwners.at(index);\\n        return tokenID;\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenID) public virtual override {\\n        address owner = ownerOf(tokenID);\\n\\n        console.log(\\\"The owner\\\", owner);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        console.log(msg.sender);\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenID);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenID)\\n        public\\n        view\\n        override\\n        returns (address)\\n    {\\n        require(\\n            _exists(tokenID),\\n            \\\"ERC721: approved query for nonexistent token\\\"\\n        );\\n\\n        return _tokenApprovals[tokenID];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved)\\n        public\\n        virtual\\n        override\\n    {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator)\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenID\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(\\n            _isApprovedOrOwner(_msgSender(), tokenID),\\n            \\\"ERC721: transfer caller is not owner nor approved\\\"\\n        );\\n\\n        _transfer(from, to, tokenID);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenID\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenID, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenID,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(\\n            _isApprovedOrOwner(_msgSender(), tokenID),\\n            \\\"ERC721: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeTransfer(from, to, tokenID, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenID` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenID` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenID,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenID);\\n        require(\\n            _checkOnERC721Received(from, to, tokenID, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenID` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenID) internal view returns (bool) {\\n        return _tokenOwners.contains(tokenID);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenID`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenID` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenID)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        require(\\n            _exists(tokenID),\\n            \\\"ERC721: operator query for nonexistent token\\\"\\n        );\\n        address owner = ownerOf(tokenID);\\n        return (spender == owner ||\\n            getApproved(tokenID) == spender ||\\n            isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Public method which returns whether `spender` is allowed to manage `tokenID`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenID` must exist.\\n     */\\n    function isApprovedOrOwner(address spender, uint256 tokenID) public view returns (bool) {\\n        return _isApprovedOrOwner(spender, tokenID);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenID` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     d*\\n     * - `tokenID` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenID) internal virtual {\\n        _safeMint(to, tokenID, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenID,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenID);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenID, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenID` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenID` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenID) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenID), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenID);\\n\\n        _holderTokens[to].add(tokenID);\\n\\n        _tokenOwners.set(tokenID, to);\\n\\n        emit Transfer(address(0), to, tokenID);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenID`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenID` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenID) internal virtual {\\n        address owner = ownerOf(tokenID);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenID);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenID);\\n\\n        // Clear metadata (if any)\\n        if (bytes(_tokenURIs[tokenID]).length != 0) {\\n            delete _tokenURIs[tokenID];\\n        }\\n\\n        _holderTokens[owner].remove(tokenID);\\n\\n        _tokenOwners.remove(tokenID);\\n\\n        emit Transfer(owner, address(0), tokenID);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenID` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenID` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenID\\n    ) internal virtual {\\n        require(\\n            ownerOf(tokenID) == from,\\n            \\\"ERC721: transfer of token that is not own\\\"\\n        );\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenID);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenID);\\n\\n        _holderTokens[from].remove(tokenID);\\n        _holderTokens[to].add(tokenID);\\n\\n        _tokenOwners.set(tokenID, to);\\n\\n        emit Transfer(from, to, tokenID);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenID`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenID` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenID, string memory _tokenURI)\\n        internal\\n        virtual\\n    {\\n        require(\\n            _exists(tokenID),\\n            \\\"ERC721Metadata: URI set of nonexistent token\\\"\\n        );\\n        _tokenURIs[tokenID] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev Internal function to set the base URI for all token IDs. It is\\n     * automatically added as a prefix to the value returned in {tokenURI},\\n     * or to the token ID if {tokenURI} is empty.\\n     */\\n    function _setBaseURI(string memory baseURI_) internal virtual {\\n        _baseURI = baseURI_;\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenID uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenID,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (!to.isContract()) {\\n            return true;\\n        }\\n        bytes memory returndata = to.functionCall(\\n            abi.encodeWithSelector(\\n                IERC721Receiver(to).onERC721Received.selector,\\n                _msgSender(),\\n                from,\\n                tokenID,\\n                _data\\n            ),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n        bytes4 retval = abi.decode(returndata, (bytes4));\\n        return (retval == _ERC721_RECEIVED);\\n    }\\n\\n    function _approve(address to, uint256 tokenID) internal {\\n        _tokenApprovals[tokenID] = to;\\n        emit Approval(ownerOf(tokenID), to, tokenID);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenID` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenID` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenID` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenID\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x69b794707b41510c53df70eb8a3ba1e01b006a8b4d0d7d033504ea49f2f689f8\",\"license\":\"MIT\"},\"src/ERC721Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.4;\\n\\n/**\\n * NOTE: This file is a clone of the OpenZeppelin ERC721.sol contract. It was forked from https://github.com/OpenZeppelin/openzeppelin-contracts\\n * at commit 1ada3b633e5bfd9d4ffe0207d64773a11f5a7c40\\n *\\n * The code was modified to inherit from our customized ERC721 contract.\\n*/\\n\\nimport \\\"./ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/**\\n * @title ERC721 Burnable Token\\n * @dev ERC721 Token that can be irreversibly burned (destroyed).\\n */\\nabstract contract ERC721Burnable is Context, ERC721 {\\n    /**\\n     * @dev Burns `tokenID`. See {ERC721-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenID` or be an approved operator.\\n     */\\n    function burn(uint256 tokenID) public virtual {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenID), \\\"ERC721Burnable: caller is not owner nor approved\\\");\\n        _burn(tokenID);\\n    }\\n}\\n\",\"keccak256\":\"0x57cc634ea8a78a6fb1f0fa12f6bbbb296fb6a09ae48babd72fc84ec1dc1af7eb\",\"license\":\"MIT\"},\"src/Math.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity >=0.8.4;\\npragma experimental ABIEncoderV2;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\n/// @title Math\\n/// Library for non-standard Math functions\\n/// NOTE: This file is a clone of the dydx protocol's Decimal.sol contract.\\n/// It was forked from https://github.com/dydxprotocol/solo at commit\\n/// 2d8454e02702fe5bc455b848556660629c3cad36. It has not been modified other than to use a\\n/// newer solidity in the pragma to match the rest of the contract suite of this project.\\nlibrary Math {\\n    using SafeMath for uint256;\\n\\n    // ============ Library Functions ============\\n\\n    /*\\n     * Return target * (numerator / denominator).\\n     */\\n    function getPartial(\\n        uint256 target,\\n        uint256 numerator,\\n        uint256 denominator\\n    ) internal pure returns (uint256) {\\n        return target.mul(numerator).div(denominator);\\n    }\\n\\n    /*\\n     * Return target * (numerator / denominator), but rounded up.\\n     */\\n    function getPartialRoundUp(\\n        uint256 target,\\n        uint256 numerator,\\n        uint256 denominator\\n    ) internal pure returns (uint256) {\\n        if (target == 0 || numerator == 0) {\\n            // SafeMath will check for zero denominator\\n            return SafeMath.div(0, denominator);\\n        }\\n        return target.mul(numerator).sub(1).div(denominator).add(1);\\n    }\\n\\n    function to128(uint256 number) internal pure returns (uint128) {\\n        uint128 result = uint128(number);\\n        require(result == number, \\\"Math: Unsafe cast to uint128\\\");\\n        return result;\\n    }\\n\\n    function to96(uint256 number) internal pure returns (uint96) {\\n        uint96 result = uint96(number);\\n        require(result == number, \\\"Math: Unsafe cast to uint96\\\");\\n        return result;\\n    }\\n\\n    function to32(uint256 number) internal pure returns (uint32) {\\n        uint32 result = uint32(number);\\n        require(result == number, \\\"Math: Unsafe cast to uint32\\\");\\n        return result;\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n}\\n\",\"keccak256\":\"0xb58d87d1ec96fd6dac4340545a8c3750c43b44036420786c36d5c9074786f4bf\",\"license\":\"Apache-2.0\"},\"src/Media.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n// Forked from https://github.com/ourzora/core @ 450cd154bfbb70f62e94050cc3f1560d58e0506a\\n\\npragma solidity >=0.8.4;\\npragma experimental ABIEncoderV2;\\n\\nimport { ERC721Burnable } from './ERC721Burnable.sol';\\nimport { ERC721 } from './ERC721.sol';\\nimport { EnumerableSet } from '@openzeppelin/contracts/utils/structs/EnumerableSet.sol';\\nimport { Counters } from '@openzeppelin/contracts/utils/Counters.sol';\\nimport { SafeMath } from '@openzeppelin/contracts/utils/math/SafeMath.sol';\\nimport { Math } from '@openzeppelin/contracts/utils/math/Math.sol';\\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport { ReentrancyGuard } from '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\nimport { Ownable } from '@openzeppelin/contracts/access/Ownable.sol';\\nimport { Decimal } from './Decimal.sol';\\nimport { IMarket } from './interfaces/IMarket.sol';\\nimport './interfaces/IMedia.sol';\\n\\nimport './console.sol';\\n\\n/**\\n * @title A media value system, with perpetual equity to creators\\n * @notice This contract provides an interface to mint media with a market\\n * owned by the creator.\\n */\\ncontract Media is IMedia, ERC721Burnable, ReentrancyGuard, Ownable {\\n  using Counters for Counters.Counter;\\n  using SafeMath for uint256;\\n  using EnumerableSet for EnumerableSet.UintSet;\\n\\n  /* *******\\n   * Globals\\n   * *******\\n   */\\n\\n  // Address for the market\\n  address public marketContract;\\n\\n  // Mapping from token to previous owner of the token\\n  mapping(uint256 => address) public previousTokenOwners;\\n\\n  // Mapping from token id to creator address\\n  mapping(uint256 => address) public tokenCreators;\\n\\n  // Mapping from creator address to their (enumerable) set of created tokens\\n  mapping(address => EnumerableSet.UintSet) private _creatorTokens;\\n\\n  // Mapping from token id to sha256 hash of content\\n  mapping(uint256 => bytes32) public tokenContentHashes;\\n\\n  // Mapping from token id to sha256 hash of metadata\\n  mapping(uint256 => bytes32) public tokenMetadataHashes;\\n\\n  // Mapping from token id to metadataURI\\n  mapping(uint256 => string) private _tokenMetadataURIs;\\n\\n  // Mapping from contentHash to bool\\n  mapping(bytes32 => bool) private _contentHashes;\\n\\n  //keccak256(\\\"Permit(address spender,uint256 tokenId,uint256 nonce,uint256 deadline)\\\");\\n  bytes32 public constant PERMIT_TYPEHASH = 0x49ecf333e5b8c95c40fdafc95c1ad136e8914a8fb55e9dc8bb01eaa83a2df9ad;\\n\\n  //keccak256(\\\"MintWithSig(bytes32 contentHash,bytes32 metadataHash,uint256 creatorShare,uint256 nonce,uint256 deadline)\\\");\\n  bytes32 public constant MINT_WITH_SIG_TYPEHASH = 0x2952e482b8e2b192305f87374d7af45dc2eafafe4f50d26a0c02e90f2fdbe14b;\\n\\n  // Mapping from address to token id to permit nonce\\n  mapping(address => mapping(uint256 => uint256)) public permitNonces;\\n\\n  // Mapping from address to mint with sig nonce\\n  mapping(address => uint256) public mintWithSigNonces;\\n\\n  /*\\n   *     bytes4(keccak256('name()')) == 0x06fdde03\\n   *     bytes4(keccak256('symbol()')) == 0x95d89b41\\n   *     bytes4(keccak256('tokenURI(uint256)')) == 0xc87b56dd\\n   *     bytes4(keccak256('tokenMetadataURI(uint256)')) == 0x157c3df9\\n   *\\n   *     => 0x06fdde03 ^ 0x95d89b41 ^ 0xc87b56dd ^ 0x157c3df9 == 0x4e222e66\\n   */\\n  bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x4e222e66;\\n\\n  Counters.Counter private _tokenIdTracker;\\n\\n  /* *********\\n   * Modifiers\\n   * *********\\n   */\\n\\n  /**\\n   * @notice Require that the token has not been burned and has been minted\\n   */\\n  modifier onlyExistingToken(uint256 tokenId) {\\n    require(_exists(tokenId), 'Media: nonexistent token');\\n    _;\\n  }\\n\\n  /**\\n   * @notice Require that the token has had a content hash set\\n   */\\n  modifier onlyTokenWithContentHash(uint256 tokenId) {\\n    require(tokenContentHashes[tokenId] != 0, 'Media: token does not have hash of created content');\\n    _;\\n  }\\n\\n  /**\\n   * @notice Require that the token has had a metadata hash set\\n   */\\n  modifier onlyTokenWithMetadataHash(uint256 tokenId) {\\n    require(tokenMetadataHashes[tokenId] != 0, 'Media: token does not have hash of its metadata');\\n    _;\\n  }\\n\\n  /**\\n   * @notice Ensure that the provided spender is the approved or the owner of\\n   * the media for the specified tokenId\\n   */\\n  modifier onlyApprovedOrOwner(address spender, uint256 tokenId) {\\n    require(_isApprovedOrOwner(spender, tokenId), 'Media: Only approved or owner');\\n    _;\\n  }\\n\\n  /**\\n   * @notice Ensure the token has been created (even if it has been burned)\\n   */\\n  modifier onlyTokenCreated(uint256 tokenId) {\\n    require(_tokenIdTracker.current() > tokenId, 'Media: token with that id does not exist');\\n    _;\\n  }\\n\\n  /**\\n   * @notice Ensure that the provided URI is not empty\\n   */\\n  modifier onlyValidURI(string memory uri) {\\n    require(bytes(uri).length != 0, 'Media: specified uri must be non-empty');\\n    _;\\n  }\\n\\n  /**\\n   * @notice On deployment, set the market contract address and register the\\n   * ERC721 metadata interface\\n   */\\n  constructor(string memory name, string memory symbol) ERC721(name, symbol) {\\n    _registerInterface(_INTERFACE_ID_ERC721_METADATA);\\n  }\\n\\n  /**\\n   * @notice Sets the market contract address. This address is the only permitted address that\\n   * can call the mutable functions.\\n   */\\n  function configure(address marketContractAddr) external onlyOwner {\\n    require(marketContractAddr != address(0), 'Market: cannot set market contract as zero address');\\n    marketContract = marketContractAddr;\\n  }\\n\\n  /* **************\\n   * View Functions\\n   * **************\\n   */\\n\\n  /**\\n   * @notice return the URI for a particular piece of media with the specified tokenId\\n   * @dev This function is an override of the base OZ implementation because we\\n   * will return the tokenURI even if the media has been burned. In addition, this\\n   * protocol does not support a base URI, so relevant conditionals are removed.\\n   * @return the URI for a token\\n   */\\n  function tokenURI(uint256 tokenId) public view override onlyTokenCreated(tokenId) returns (string memory) {\\n    string memory _tokenURI = _tokenURIs[tokenId];\\n\\n    return _tokenURI;\\n  }\\n\\n  /**\\n   * @notice Return the metadata URI for a piece of media given the token URI\\n   * @return the metadata URI for the token\\n   */\\n  function tokenMetadataURI(uint256 tokenId) external view override onlyTokenCreated(tokenId) returns (string memory) {\\n    return _tokenMetadataURIs[tokenId];\\n  }\\n\\n  /* ****************\\n   * Public Functions\\n   * ****************\\n   */\\n\\n  /**\\n   * @notice see IMedia\\n   */\\n  function mint(MediaData memory data, IMarket.BidShares memory bidShares) public override nonReentrant {\\n    _mintForCreator(msg.sender, data, bidShares);\\n  }\\n\\n  /**\\n   * @notice see IMedia\\n   */\\n  function mintWithSig(\\n    address creator,\\n    MediaData memory data,\\n    IMarket.BidShares memory bidShares,\\n    EIP712Signature memory sig\\n  ) public override nonReentrant {\\n    require(sig.deadline == 0 || sig.deadline >= block.timestamp, 'Media: mintWithSig expired');\\n\\n    bytes32 domainSeparator = _calculateDomainSeparator();\\n\\n    bytes32 digest = keccak256(\\n      abi.encodePacked(\\n        '\\\\x19\\\\x01',\\n        domainSeparator,\\n        keccak256(abi.encode(MINT_WITH_SIG_TYPEHASH, data.contentHash, data.metadataHash, bidShares.creator.value, mintWithSigNonces[creator]++, sig.deadline))\\n      )\\n    );\\n\\n    address recoveredAddress = ecrecover(digest, sig.v, sig.r, sig.s);\\n\\n    require(recoveredAddress != address(0) && creator == recoveredAddress, 'Media: Signature invalid');\\n\\n    _mintForCreator(recoveredAddress, data, bidShares);\\n  }\\n\\n  /**\\n   * @notice see IMedia\\n   */\\n  function getRecentToken(address creator) public view returns (uint256) {\\n    uint256 length = EnumerableSet.length(_creatorTokens[creator]) - 1;\\n\\n    return EnumerableSet.at(_creatorTokens[creator], length);\\n  }\\n\\n  /**\\n   * @notice see IMedia\\n   */\\n  function auctionTransfer(uint256 tokenId, address recipient) external override {\\n    require(msg.sender == marketContract, 'Media: only market contract');\\n    previousTokenOwners[tokenId] = ownerOf(tokenId);\\n    _safeTransfer(ownerOf(tokenId), recipient, tokenId, '');\\n  }\\n\\n  /**\\n   * @notice see IMedia\\n   */\\n  function setAsk(uint256 tokenId, IMarket.Ask memory ask) public override nonReentrant onlyApprovedOrOwner(msg.sender, tokenId) {\\n    IMarket(marketContract).setAsk(tokenId, ask);\\n  }\\n\\n  /**\\n   * @notice see IMedia\\n   */\\n  function removeAsk(uint256 tokenId) external override nonReentrant onlyApprovedOrOwner(msg.sender, tokenId) {\\n    IMarket(marketContract).removeAsk(tokenId);\\n  }\\n\\n  /**\\n   * @notice see IMedia\\n   */\\n  function setBid(uint256 tokenId, IMarket.Bid memory bid) public override nonReentrant onlyExistingToken(tokenId) {\\n    require(msg.sender == bid.bidder, 'Market: Bidder must be msg sender');\\n    IMarket(marketContract).setBid(tokenId, bid, msg.sender);\\n  }\\n\\n  /**\\n   * @notice see IMedia\\n   */\\n  function removeBid(uint256 tokenId) external override nonReentrant onlyTokenCreated(tokenId) {\\n    IMarket(marketContract).removeBid(tokenId, msg.sender);\\n  }\\n\\n  /**\\n   * @notice see IMedia\\n   */\\n  function acceptBid(uint256 tokenId, IMarket.Bid memory bid) public override nonReentrant onlyApprovedOrOwner(msg.sender, tokenId) {\\n    IMarket(marketContract).acceptBid(tokenId, bid);\\n  }\\n\\n  /**\\n   * @notice Burn a token.\\n   * @dev Only callable if the media owner is also the creator.\\n   */\\n  function burn(uint256 tokenId) public override nonReentrant onlyExistingToken(tokenId) onlyApprovedOrOwner(msg.sender, tokenId) {\\n    address owner = ownerOf(tokenId);\\n\\n    require(tokenCreators[tokenId] == owner, 'Media: owner is not creator of media');\\n\\n    _burn(tokenId);\\n  }\\n\\n  /**\\n   * @notice Revoke the approvals for a token. The provided `approve` function is not sufficient\\n   * for this protocol, as it does not allow an approved address to revoke it's own approval.\\n   * In instances where a 3rd party is interacting on a user's behalf via `permit`, they should\\n   * revoke their approval once their task is complete as a best practice.\\n   */\\n  function revokeApproval(uint256 tokenId) external override nonReentrant {\\n    require(msg.sender == getApproved(tokenId), 'Media: caller not approved address');\\n    _approve(address(0), tokenId);\\n  }\\n\\n  /**\\n   * @notice see IMedia\\n   * @dev only callable by approved or owner\\n   */\\n  function updateTokenURI(uint256 tokenId, string calldata _tokenURI)\\n    external\\n    override\\n    nonReentrant\\n    onlyApprovedOrOwner(msg.sender, tokenId)\\n    onlyTokenWithContentHash(tokenId)\\n    onlyValidURI(_tokenURI)\\n  {\\n    _setTokenURI(tokenId, _tokenURI);\\n    emit TokenURIUpdated(tokenId, msg.sender, _tokenURI);\\n  }\\n\\n  /**\\n   * @notice see IMedia\\n   * @dev only callable by approved or owner\\n   */\\n  function updateTokenMetadataURI(uint256 tokenId, string calldata metadataURI)\\n    external\\n    override\\n    nonReentrant\\n    onlyApprovedOrOwner(msg.sender, tokenId)\\n    onlyTokenWithMetadataHash(tokenId)\\n    onlyValidURI(metadataURI)\\n  {\\n    _setTokenMetadataURI(tokenId, metadataURI);\\n    emit TokenMetadataURIUpdated(tokenId, msg.sender, metadataURI);\\n  }\\n\\n  /**\\n   * @notice See IMedia\\n   * @dev This method is loosely based on the permit for ERC-20 tokens in  EIP-2612, but modified\\n   * for ERC-721.\\n   */\\n  function permit(\\n    address spender,\\n    uint256 tokenId,\\n    EIP712Signature memory sig\\n  ) public override nonReentrant onlyExistingToken(tokenId) {\\n    require(sig.deadline == 0 || sig.deadline >= block.timestamp, 'Media: Permit expired');\\n    require(spender != address(0), 'Media: spender cannot be 0x0');\\n    bytes32 domainSeparator = _calculateDomainSeparator();\\n\\n    bytes32 digest = keccak256(\\n      abi.encodePacked('\\\\x19\\\\x01', domainSeparator, keccak256(abi.encode(PERMIT_TYPEHASH, spender, tokenId, permitNonces[ownerOf(tokenId)][tokenId]++, sig.deadline)))\\n    );\\n\\n    address recoveredAddress = ecrecover(digest, sig.v, sig.r, sig.s);\\n\\n    require(recoveredAddress != address(0) && ownerOf(tokenId) == recoveredAddress, 'Media: Signature invalid');\\n\\n    _approve(spender, tokenId);\\n  }\\n\\n  /* *****************\\n   * Private Functions\\n   * *****************\\n   */\\n\\n  /**\\n   * @notice Creates a new token for `creator`. Its token ID will be automatically\\n   * assigned (and available on the emitted {IERC721-Transfer} event), and the token\\n   * URI autogenerated based on the base URI passed at construction.\\n   *\\n   * See {ERC721-_safeMint}.\\n   *\\n   * On mint, also set the sha256 hashes of the content and its metadata for integrity\\n   * checks, along with the initial URIs to point to the content and metadata. Attribute\\n   * the token ID to the creator, mark the content hash as used, and set the bid shares for\\n   * the media's market.\\n   *\\n   * Note that although the content hash must be unique for future mints to prevent duplicate media,\\n   * metadata has no such requirement.\\n   */\\n  function _mintForCreator(\\n    address creator,\\n    MediaData memory data,\\n    IMarket.BidShares memory bidShares\\n  ) internal onlyValidURI(data.tokenURI) onlyValidURI(data.metadataURI) {\\n    require(data.contentHash != 0, 'Media: content hash must be non-zero');\\n    // require(_contentHashes[data.contentHash] == false, 'Media: a token has already been created with this content hash');\\n    require(data.metadataHash != 0, 'Media: metadata hash must be non-zero');\\n\\n    uint256 tokenId = _tokenIdTracker.current();\\n\\n    _safeMint(creator, tokenId);\\n    _tokenIdTracker.increment();\\n    _setTokenContentHash(tokenId, data.contentHash);\\n    _setTokenMetadataHash(tokenId, data.metadataHash);\\n    _setTokenMetadataURI(tokenId, data.metadataURI);\\n    _setTokenURI(tokenId, data.tokenURI);\\n    _creatorTokens[creator].add(tokenId);\\n    _contentHashes[data.contentHash] = true;\\n\\n    tokenCreators[tokenId] = creator;\\n    previousTokenOwners[tokenId] = creator;\\n    IMarket(marketContract).setBidShares(tokenId, bidShares);\\n  }\\n\\n  function _setTokenContentHash(uint256 tokenId, bytes32 contentHash) internal virtual onlyExistingToken(tokenId) {\\n    tokenContentHashes[tokenId] = contentHash;\\n  }\\n\\n  function _setTokenMetadataHash(uint256 tokenId, bytes32 metadataHash) internal virtual onlyExistingToken(tokenId) {\\n    tokenMetadataHashes[tokenId] = metadataHash;\\n  }\\n\\n  function _setTokenMetadataURI(uint256 tokenId, string memory metadataURI) internal virtual onlyExistingToken(tokenId) {\\n    _tokenMetadataURIs[tokenId] = metadataURI;\\n  }\\n\\n  /**\\n   * @notice Destroys `tokenId`.\\n   * @dev We modify the OZ _burn implementation to\\n   * maintain metadata and to remove the\\n   * previous token owner from the piece\\n   */\\n  function _burn(uint256 tokenId) internal override {\\n    string memory _tokenURI = _tokenURIs[tokenId];\\n\\n    super._burn(tokenId);\\n\\n    if (bytes(_tokenURI).length != 0) {\\n      _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    delete previousTokenOwners[tokenId];\\n  }\\n\\n  /**\\n   * @notice transfer a token and remove the ask for it.\\n   */\\n  function _transfer(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) internal override {\\n    IMarket(marketContract).removeAsk(tokenId);\\n\\n    super._transfer(from, to, tokenId);\\n  }\\n\\n  /**\\n   * @dev Calculates EIP712 DOMAIN_SEPARATOR based on the current contract and chain ID.\\n   */\\n  function _calculateDomainSeparator() internal view returns (bytes32) {\\n    uint256 chainID;\\n    /* solium-disable-next-line */\\n    assembly {\\n      chainID := chainid()\\n    }\\n\\n    return\\n      keccak256(\\n        abi.encode(\\n          keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'),\\n          keccak256(bytes('ZOO')),\\n          keccak256(bytes('1')),\\n          chainID,\\n          address(this)\\n        )\\n      );\\n  }\\n\\n  function _hashToken(address owner, IZoo.Token memory token) private view returns (IZoo.Token memory) {\\n    console.log('_hashToken', token.data.tokenURI, token.data.metadataURI);\\n    token.data.contentHash = keccak256(abi.encodePacked(token.data.tokenURI, block.number, owner));\\n    token.data.metadataHash = keccak256(abi.encodePacked(token.data.metadataURI, block.number, owner));\\n    return token;\\n  }\\n\\n  function mintToken(address owner, IZoo.Token memory token) external override nonReentrant returns (IZoo.Token memory) {\\n    console.log('mintToken', owner, token.name);\\n    token = _hashToken(owner, token);\\n    _mintForCreator(owner, token.data, token.bidShares);\\n    uint256 id = getRecentToken(owner);\\n    token.id = id;\\n    return token;\\n  }\\n\\n  function burnToken(address owner, uint256 tokenID) external override nonReentrant onlyExistingToken(tokenID) onlyApprovedOrOwner(owner, tokenID) {\\n    _burn(tokenID);\\n  }\\n\\n  /**\\n   * @notice Helper to check that token has not been burned or minted\\n   */\\n  function tokenExists(uint256 tokenID) public view override returns (bool) {\\n    return _exists(tokenID);\\n  }\\n}\\n\",\"keccak256\":\"0xdd4c76314766329b385c0b6b2a24081b33b2cf45e5e4c4bf65b8579ed1d4d248\",\"license\":\"GPL-3.0\"},\"src/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"},\"src/interfaces/IMarket.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n// Forked from https://github.com/ourzora/core @ 450cd154bfbb70f62e94050cc3f1560d58e0506a\\n\\npragma solidity >=0.8.4;\\npragma experimental ABIEncoderV2;\\n\\nimport { Decimal } from '../Decimal.sol';\\n\\n/**\\n * @title Interface for Zoo Protocol's Market\\n */\\ninterface IMarket {\\n  struct Bid {\\n    // Amount of the currency being bid\\n    uint256 amount;\\n    // Address to the ERC20 token being used to bid\\n    address currency;\\n    // Address of the bidder\\n    address bidder;\\n    // Address of the recipient\\n    address recipient;\\n    // % of the next sale to award the current owner\\n    Decimal.D256 sellOnShare;\\n  }\\n\\n  struct Ask {\\n    // Amount of the currency being asked\\n    uint256 amount;\\n    // Address to the ERC20 token being asked\\n    address currency;\\n  }\\n\\n  struct BidShares {\\n    // % of sale value that goes to the _previous_ owner of the nft\\n    Decimal.D256 prevOwner;\\n    // % of sale value that goes to the original creator of the nft\\n    Decimal.D256 creator;\\n    // % of sale value that goes to the seller (current owner) of the nft\\n    Decimal.D256 owner;\\n  }\\n\\n  event BidCreated(uint256 indexed tokenId, Bid bid);\\n  event BidRemoved(uint256 indexed tokenId, Bid bid);\\n  event BidFinalized(uint256 indexed tokenId, Bid bid);\\n  event AskCreated(uint256 indexed tokenId, Ask ask);\\n  event AskRemoved(uint256 indexed tokenId, Ask ask);\\n  event BidShareUpdated(uint256 indexed tokenId, BidShares bidShares);\\n\\n  function bidForTokenBidder(uint256 tokenId, address bidder) external view returns (Bid memory);\\n\\n  function currentAskForToken(uint256 tokenId) external view returns (Ask memory);\\n\\n  function bidSharesForToken(uint256 tokenId) external view returns (BidShares memory);\\n\\n  function isValidBid(uint256 tokenId, uint256 bidAmount) external view returns (bool);\\n\\n  function isValidBidShares(BidShares calldata bidShares) external pure returns (bool);\\n\\n  function splitShare(Decimal.D256 calldata sharePercentage, uint256 amount) external pure returns (uint256);\\n\\n  function configure(address mediaContractAddress) external;\\n\\n  function setBidShares(uint256 tokenId, BidShares calldata bidShares) external;\\n\\n  function setAsk(uint256 tokenId, Ask calldata ask) external;\\n\\n  function removeAsk(uint256 tokenId) external;\\n\\n  function setBid(\\n    uint256 tokenId,\\n    Bid calldata bid,\\n    address spender\\n  ) external;\\n\\n  function removeBid(uint256 tokenId, address bidder) external;\\n\\n  function acceptBid(uint256 tokenId, Bid calldata expectedBid) external;\\n}\\n\",\"keccak256\":\"0x5bab536af63843bc704f62ad797748dc277abce594343c7d9e1ba88ea1a2f82a\",\"license\":\"GPL-3.0\"},\"src/interfaces/IMedia.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n// Forked from https://github.com/ourzora/core @ 450cd154bfbb70f62e94050cc3f1560d58e0506a\\n\\npragma solidity >=0.8.4;\\npragma experimental ABIEncoderV2;\\n\\nimport { IERC721 } from '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport { IMarket } from './IMarket.sol';\\nimport { IZoo } from './IZoo.sol';\\n\\n/**\\n * @title Interface for Zoo Protocol's Media\\n */\\ninterface IMedia is IERC721 {\\n  struct EIP712Signature {\\n    uint256 deadline;\\n    uint8 v;\\n    bytes32 r;\\n    bytes32 s;\\n  }\\n\\n  struct MediaData {\\n    // A valid URI of the content represented by this token\\n    string tokenURI;\\n    // A valid URI of the metadata associated with this token\\n    string metadataURI;\\n    // A SHA256 hash of the content pointed to by tokenURI\\n    bytes32 contentHash;\\n    // A SHA256 hash of the content pointed to by metadataURI\\n    bytes32 metadataHash;\\n  }\\n\\n  event TokenURIUpdated(uint256 indexed _tokenId, address owner, string _uri);\\n  event TokenMetadataURIUpdated(uint256 indexed _tokenId, address owner, string _uri);\\n\\n  /**\\n   * @notice Return the metadata URI for a piece of media given the token URI\\n   */\\n  function tokenMetadataURI(uint256 tokenId) external view returns (string memory);\\n\\n  /**\\n   * @notice Mint new media for msg.sender.\\n   */\\n  function mint(MediaData calldata data, IMarket.BidShares calldata bidShares) external;\\n\\n  /**\\n   * @notice EIP-712 mintWithSig method. Mints new media for a creator given a valid signature.\\n   */\\n  function mintWithSig(\\n    address creator,\\n    MediaData calldata data,\\n    IMarket.BidShares calldata bidShares,\\n    EIP712Signature calldata sig\\n  ) external;\\n\\n  /**\\n   * @notice Transfer the token with the given ID to a given address.\\n   * Save the previous owner before the transfer, in case there is a sell-on fee.\\n   * @dev This can only be called by the auction contract specified at deployment\\n   */\\n  function auctionTransfer(uint256 tokenId, address recipient) external;\\n\\n  /**\\n   * @notice Set the ask on a piece of media\\n   */\\n  function setAsk(uint256 tokenId, IMarket.Ask calldata ask) external;\\n\\n  /**\\n   * @notice Remove the ask on a piece of media\\n   */\\n  function removeAsk(uint256 tokenId) external;\\n\\n  /**\\n   * @notice Set the bid on a piece of media\\n   */\\n  function setBid(uint256 tokenId, IMarket.Bid calldata bid) external;\\n\\n  /**\\n   * @notice Remove the bid on a piece of media\\n   */\\n  function removeBid(uint256 tokenId) external;\\n\\n  function acceptBid(uint256 tokenId, IMarket.Bid calldata bid) external;\\n\\n  /**\\n   * @notice Revoke approval for a piece of media\\n   */\\n  function revokeApproval(uint256 tokenId) external;\\n\\n  /**\\n   * @notice Update the token URI\\n   */\\n  function updateTokenURI(uint256 tokenId, string calldata tokenURI) external;\\n\\n  /**\\n   * @notice Update the token metadata uri\\n   */\\n  function updateTokenMetadataURI(uint256 tokenId, string calldata metadataURI) external;\\n\\n  /**\\n   * @notice EIP-712 permit method. Sets an approved spender given a valid signature.\\n   */\\n  function permit(\\n    address spender,\\n    uint256 tokenId,\\n    EIP712Signature calldata sig\\n  ) external;\\n\\n  // Added for Zoo\\n  function mintToken(address owner, IZoo.Token memory tokenID) external returns (IZoo.Token memory);\\n\\n  function burnToken(address owner, uint256 tokenID) external;\\n\\n  function tokenExists(uint256 tokenID) external returns (bool);\\n}\\n\",\"keccak256\":\"0x3f871bdd2b5e50ea2acd5413ddc3cdacd814c00b73588aa4e7245a862613e9ab\",\"license\":\"GPL-3.0\"},\"src/interfaces/IZoo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.4;\\n\\nimport { IMedia } from \\\"./IMedia.sol\\\";\\nimport { IMarket } from \\\"./IMarket.sol\\\";\\n\\ninterface IZoo {\\n    enum Type {\\n        BASE_EGG,\\n        BASE_ANIMAL,\\n        HYBRID_EGG,\\n        HYBRID_ANIMAL\\n    }\\n\\n    struct Rarity {\\n        string  name;\\n        uint256 probability;\\n        uint256 yield;\\n        uint256 boost;\\n    }\\n\\n    struct Breed {\\n        uint256 count;\\n        uint256 timestamp;\\n    }\\n\\n    struct Parents {\\n        string  animalA;\\n        string  animalB;\\n        uint256 tokenA;\\n        uint256 tokenB;\\n    }\\n\\n    struct Meta {\\n        uint256 eggID;       // originating egg\\n        uint256 dropID;      // originating drop\\n        bool burned;         // token has been burned\\n        bool swapped;        // token has been swapped\\n    }\\n\\n    struct Token {\\n        Rarity  rarity;\\n        Type  kind;\\n        string  name;\\n        uint256 id;           // unique ID\\n        uint256 timestamp;    // time created\\n        uint256 birthday;     // birth block\\n        string  customName;   // optional, paid feature\\n        Parents parents;\\n        Breed   breed;\\n        Meta meta;\\n        IMedia.MediaData data;\\n        IMarket.BidShares bidShares;\\n    }\\n}\\n\",\"keccak256\":\"0xeb9d5375388d30b614005d0cf5dec157aeac9db898a190e97de7df5692bc91df\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200484b3803806200484b8339810160408190526200003491620002e3565b8151829082906200004d9060079060208501906200018a565b508051620000639060089060208401906200018a565b50620000766380ac58cd60e01b620000b4565b6200008863780e9d6360e01b620000b4565b50506001600b556200009a3362000138565b620000ac632711173360e11b620000b4565b50506200039d565b6001600160e01b03198082161415620001135760405162461bcd60e51b815260206004820152601c60248201527f4552433136353a20696e76616c696420696e7465726661636520696400000000604482015260640160405180910390fd5b6001600160e01b0319166000908152602081905260409020805460ff19166001179055565b600c80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b82805462000198906200034a565b90600052602060002090601f016020900481019282620001bc576000855562000207565b82601f10620001d757805160ff191683800117855562000207565b8280016001018555821562000207579182015b8281111562000207578251825591602001919060010190620001ea565b506200021592915062000219565b5090565b5b808211156200021557600081556001016200021a565b600082601f83011262000241578081fd5b81516001600160401b03808211156200025e576200025e62000387565b604051601f8301601f19908116603f0116810190828211818310171562000289576200028962000387565b81604052838152602092508683858801011115620002a5578485fd5b8491505b83821015620002c85785820183015181830184015290820190620002a9565b83821115620002d957848385830101525b9695505050505050565b60008060408385031215620002f6578182fd5b82516001600160401b03808211156200030d578384fd5b6200031b8683870162000230565b9350602085015191508082111562000331578283fd5b50620003408582860162000230565b9150509250929050565b600181811c908216806200035f57607f821691505b602082108114156200038157634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b61449e80620003ad6000396000f3fe608060405234801561001057600080fd5b506004361061024a5760003560e01c80636c0360eb116101425780636c0360eb1461046e57806370a0823114610476578063715018a61461048957806375682e791461049157806375cb2672146104a45780637a7a1202146104b75780638da5cb5b146104ca57806395d89b41146104d25780639d8e7260146104da578063a1794bcd14610503578063a22cb46514610516578063b1e130fc14610529578063b320f4591461053c578063b88d4fde1461054f578063ba33939914610562578063c87b56dd14610575578063d1df306c14610588578063de5236fb1461059b578063e0fd045f146105c2578063e985e9c5146105eb578063ee492ff8146105fe578063f2fde38b1461061e578063f6b630f014610631578063f8ccd5de14610644578063fad321971461066f57600080fd5b8062923f9e1461024f57806301ddc3b51461027757806301ffc9a7146102a557806306fdde03146102b8578063081812fc146102cd578063095ea7b3146102ed5780630bcd899b146103025780630e2a177814610322578063157c3df91461033557806318160ddd1461034857806318e97fd1146103505780632110f20d1461036357806323b872dd1461037657806328220f35146103895780632cca32371461039c5780632f745c59146103af57806330adf81f146103c257806342842e0e146103e957806342966c68146103fc578063430c20811461040f5780634f6ccce7146104225780635bf624221461043557806362f24b70146104485780636352211e1461045b575b600080fd5b61026261025d366004613a3d565b61068f565b60405190151581526020015b60405180910390f35b610297610285366004613a3d565b60126020526000908152604090205481565b60405190815260200161026e565b6102626102b33660046139c2565b6106a0565b6102c06106dc565b60405161026e9190613e3b565b6102e06102db366004613a3d565b61076e565b60405161026e9190613d8c565b6103006102fb36600461395d565b6107fb565b005b610297610310366004613652565b60166020526000908152604090205481565b610300610330366004613986565b610940565b6102c0610343366004613a3d565b610be3565b610297610cad565b61030061035e366004613a77565b610cbe565b610297610371366004613652565b610e68565b61030061038436600461369e565b610ec4565b610300610397366004613a3d565b610ef5565b6103006103aa3660046139fa565b610fa0565b6102976103bd36600461395d565b610fdc565b6102977f49ecf333e5b8c95c40fdafc95c1ad136e8914a8fb55e9dc8bb01eaa83a2df9ad81565b6103006103f736600461369e565b610ffe565b61030061040a366004613a3d565b611019565b61026261041d36600461395d565b611127565b610297610430366004613a3d565b611133565b610300610443366004613b41565b611149565b610300610456366004613aed565b61123a565b6102e0610469366004613a3d565b611308565b6102c0611330565b610297610484366004613652565b61133f565b6103006113cb565b61030061049f366004613a77565b611406565b6103006104b2366004613652565b611597565b6103006104c536600461377a565b611659565b6102e0611867565b6102c0611876565b6102e06104e8366004613a3d565b600e602052600090815260409020546001600160a01b031681565b600d546102e0906001600160a01b031681565b610300610524366004613751565b611885565b610300610537366004613a3d565b611946565b61030061054a366004613a3d565b6119f5565b61030061055d3660046136d9565b611ab2565b610300610570366004613b41565b611aea565b6102c0610583366004613a3d565b611b6c565b61030061059636600461395d565b611c36565b6102977f2952e482b8e2b192305f87374d7af45dc2eafafe4f50d26a0c02e90f2fdbe14b81565b6102e06105d0366004613a3d565b600f602052600090815260409020546001600160a01b031681565b6102626105f936600461366c565b611cb5565b61061161060c3660046137e9565b611ce3565b60405161026e919061411d565b61030061062c366004613652565b611d7f565b61030061063f366004613a55565b611e1f565b61029761065236600461395d565b601560209081526000928352604080842090915290825290205481565b61029761067d366004613a3d565b60116020526000908152604090205481565b600061069a82611ed3565b92915050565b60006301ffc9a760e01b6001600160e01b03198316148061069a5750506001600160e01b03191660009081526020819052604090205460ff1690565b6060600780546106eb9061435b565b80601f01602080910402602001604051908101604052809291908181526020018280546107179061435b565b80156107645780601f1061073957610100808354040283529160200191610764565b820191906000526020600020905b81548152906001019060200180831161074757829003601f168201915b5050505050905090565b600061077982611ed3565b6107df5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600560205260409020546001600160a01b031690565b600061080682611308565b9050610833604051806040016040528060098152602001682a34329037bbb732b960b91b81525082611ee0565b806001600160a01b0316836001600160a01b0316141561089f5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084016107d6565b6108a833611f25565b336001600160a01b03821614806108c457506108c48133611cb5565b6109315760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776044820152771b995c881b9bdc88185c1c1c9bdd995908199bdc88185b1b60421b60648201526084016107d6565b61093b8383611f68565b505050565b6002600b5414156109635760405162461bcd60e51b81526004016107d6906140a0565b6002600b558161097281611ed3565b61098e5760405162461bcd60e51b81526004016107d69061406e565b8151158061099d575081514211155b6109e15760405162461bcd60e51b81526020600482015260156024820152741359591a584e8814195c9b5a5d08195e1c1a5c9959605a1b60448201526064016107d6565b6001600160a01b038416610a365760405162461bcd60e51b815260206004820152601c60248201527b04d656469613a207370656e6465722063616e6e6f74206265203078360241b60448201526064016107d6565b6000610a40611fd6565b90506000817f49ecf333e5b8c95c40fdafc95c1ad136e8914a8fb55e9dc8bb01eaa83a2df9ad8787601585610a7483611308565b6001600160a01b03168152602080820192909252604090810160009081208c82529092528120805491610aa683614390565b9091555088516040805160208101969096526001600160a01b03909416938501939093526060840191909152608083015260a082015260c00160405160208183030381529060405280519060200120604051602001610b06929190613d71565b604051602081830303815290604052805190602001209050600060018286602001518760400151886060015160405160008152602001604052604051610b4f9493929190613e1d565b6020604051602081039080840390855afa158015610b71573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811615801590610baf5750806001600160a01b0316610ba487611308565b6001600160a01b0316145b610bcb5760405162461bcd60e51b81526004016107d69061403c565b610bd58787611f68565b50506001600b555050505050565b60608180610bf060175490565b11610c0d5760405162461bcd60e51b81526004016107d690613ee5565b60008381526013602052604090208054610c269061435b565b80601f0160208091040260200160405190810160405280929190818152602001828054610c529061435b565b8015610c9f5780601f10610c7457610100808354040283529160200191610c9f565b820191906000526020600020905b815481529060010190602001808311610c8257829003601f168201915b505050505091505b50919050565b6000610cb960026120a0565b905090565b6002600b541415610ce15760405162461bcd60e51b81526004016107d6906140a0565b6002600b553383610cf282826120ab565b610d0e5760405162461bcd60e51b81526004016107d690613f7f565b6000858152601160205260409020548590610d865760405162461bcd60e51b815260206004820152603260248201527f4d656469613a20746f6b656e20646f6573206e6f7420686176652068617368206044820152711bd98818dc99585d19590818dbdb9d195b9d60721b60648201526084016107d6565b84848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050825115159150610dde90505760405162461bcd60e51b81526004016107d6906140d7565b610e1e8787878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061217592505050565b867f702fe2dc2dc0f68023540aa4a1e11811c0f29112f6ebf01e61b90538e4f29810338888604051610e5293929190613ddd565b60405180910390a250506001600b555050505050565b6001600160a01b03811660009081526010602052604081208190600190610e8e906121fe565b610e989190614318565b6001600160a01b0384166000908152601060205260409020909150610ebd9082612208565b9392505050565b610ece33826120ab565b610eea5760405162461bcd60e51b81526004016107d690613feb565b61093b838383612214565b6002600b541415610f185760405162461bcd60e51b81526004016107d6906140a0565b6002600b553381610f2982826120ab565b610f455760405162461bcd60e51b81526004016107d690613f7f565b600d546040516328220f3560e01b8152600481018590526001600160a01b03909116906328220f35906024015b600060405180830381600087803b158015610f8c57600080fd5b505af1158015610bd5573d6000803e3d6000fd5b6002600b541415610fc35760405162461bcd60e51b81526004016107d6906140a0565b6002600b55610fd333838361227d565b50506001600b55565b6001600160a01b0382166000908152600160205260408120610ebd9083612208565b61093b83838360405180602001604052806000815250611ab2565b6002600b54141561103c5760405162461bcd60e51b81526004016107d6906140a0565b6002600b558061104b81611ed3565b6110675760405162461bcd60e51b81526004016107d69061406e565b338261107382826120ab565b61108f5760405162461bcd60e51b81526004016107d690613f7f565b600061109a85611308565b6000868152600f60205260409020549091506001600160a01b038083169116146111125760405162461bcd60e51b8152602060048201526024808201527f4d656469613a206f776e6572206973206e6f742063726561746f72206f66206d6044820152636564696160e01b60648201526084016107d6565b61111b856124b8565b50506001600b55505050565b6000610ebd83836120ab565b6000806111416002846125a1565b509392505050565b6002600b54141561116c5760405162461bcd60e51b81526004016107d6906140a0565b6002600b558161117b81611ed3565b6111975760405162461bcd60e51b81526004016107d69061406e565b81604001516001600160a01b0316336001600160a01b0316146112065760405162461bcd60e51b815260206004820152602160248201527f4d61726b65743a20426964646572206d757374206265206d73672073656e64656044820152603960f91b60648201526084016107d6565b600d546040516317b6b0d360e31b81526001600160a01b039091169063bdb5869890610f729086908690339060040161427e565b6002600b54141561125d5760405162461bcd60e51b81526004016107d6906140a0565b6002600b55338261126e82826120ab565b61128a5760405162461bcd60e51b81526004016107d690613f7f565b600d5460405163062f24b760e41b8152600481018690528451602482015260208501516001600160a01b039081166044830152909116906362f24b70906064015b600060405180830381600087803b1580156112e557600080fd5b505af11580156112f9573d6000803e3d6000fd5b50506001600b55505050505050565b600061069a8260405180606001604052806029815260200161442060299139600291906125bd565b6060600a80546106eb9061435b565b60006001600160a01b0382166113aa5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b60648201526084016107d6565b6001600160a01b038216600090815260016020526040902061069a906121fe565b336113d4611867565b6001600160a01b0316146113fa5760405162461bcd60e51b81526004016107d690613fb6565b61140460006125ca565b565b6002600b5414156114295760405162461bcd60e51b81526004016107d6906140a0565b6002600b55338361143a82826120ab565b6114565760405162461bcd60e51b81526004016107d690613f7f565b60008581526012602052604090205485906114cb5760405162461bcd60e51b815260206004820152602f60248201527f4d656469613a20746f6b656e20646f6573206e6f74206861766520686173682060448201526e6f6620697473206d6574616461746160881b60648201526084016107d6565b84848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505082511515915061152390505760405162461bcd60e51b81526004016107d6906140d7565b6115638787878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061261c92505050565b867fe3df41127db820c79e5b8d541a63e40e3e97b9af96f7a50bded13091b70df9ae338888604051610e5293929190613ddd565b336115a0611867565b6001600160a01b0316146115c65760405162461bcd60e51b81526004016107d690613fb6565b6001600160a01b0381166116375760405162461bcd60e51b815260206004820152603260248201527f4d61726b65743a2063616e6e6f7420736574206d61726b657420636f6e7472616044820152716374206173207a65726f206164647265737360701b60648201526084016107d6565b600d80546001600160a01b0319166001600160a01b0392909216919091179055565b6002600b54141561167c5760405162461bcd60e51b81526004016107d6906140a0565b6002600b5580511580611690575080514211155b6116d95760405162461bcd60e51b815260206004820152601a6024820152791359591a584e881b5a5b9d15da5d1a14da59c8195e1c1a5c995960321b60448201526064016107d6565b60006116e3611fd6565b6040808601516060870151602080880151516001600160a01b038b16600090815260169092529381208054959650909486947f2952e482b8e2b192305f87374d7af45dc2eafafe4f50d26a0c02e90f2fdbe14b9493929091908761174683614390565b9091555088516040805160208101979097528601949094526060850192909252608084015260a083015260c082015260e0016040516020818303038152906040528051906020012060405160200161179f929190613d71565b6040516020818303038152906040528051906020012090506000600182856020015186604001518760600151604051600081526020016040526040516117e89493929190613e1d565b6020604051602081039080840390855afa15801561180a573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116158015906118405750806001600160a01b0316876001600160a01b0316145b61185c5760405162461bcd60e51b81526004016107d69061403c565b610bd581878761227d565b600c546001600160a01b031690565b6060600880546106eb9061435b565b6001600160a01b0382163314156118da5760405162461bcd60e51b815260206004820152601960248201527822a9219b99189d1030b8383937bb32903a379031b0b63632b960391b60448201526064016107d6565b3360008181526006602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6002600b5414156119695760405162461bcd60e51b81526004016107d6906140a0565b6002600b556119778161076e565b6001600160a01b0316336001600160a01b0316146119e25760405162461bcd60e51b815260206004820152602260248201527f4d656469613a2063616c6c6572206e6f7420617070726f766564206164647265604482015261737360f01b60648201526084016107d6565b6119ed600082611f68565b506001600b55565b6002600b541415611a185760405162461bcd60e51b81526004016107d6906140a0565b6002600b558080611a2860175490565b11611a455760405162461bcd60e51b81526004016107d690613ee5565b600d5460405163776a083560e01b8152600481018490523360248201526001600160a01b039091169063776a083590604401600060405180830381600087803b158015611a9157600080fd5b505af1158015611aa5573d6000803e3d6000fd5b50506001600b5550505050565b611abc33836120ab565b611ad85760405162461bcd60e51b81526004016107d690613feb565b611ae484848484612661565b50505050565b6002600b541415611b0d5760405162461bcd60e51b81526004016107d6906140a0565b6002600b553382611b1e82826120ab565b611b3a5760405162461bcd60e51b81526004016107d690613f7f565b600d5460405163ba33939960e01b81526001600160a01b039091169063ba339399906112cb908790879060040161426a565b60608180611b7960175490565b11611b965760405162461bcd60e51b81526004016107d690613ee5565b60008381526009602052604081208054611baf9061435b565b80601f0160208091040260200160405190810160405280929190818152602001828054611bdb9061435b565b8015611c285780601f10611bfd57610100808354040283529160200191611c28565b820191906000526020600020905b815481529060010190602001808311611c0b57829003601f168201915b509398975050505050505050565b6002600b541415611c595760405162461bcd60e51b81526004016107d6906140a0565b6002600b5580611c6881611ed3565b611c845760405162461bcd60e51b81526004016107d69061406e565b8282611c9082826120ab565b611cac5760405162461bcd60e51b81526004016107d690613f7f565b61111b846124b8565b6001600160a01b03918216600090815260066020908152604080832093909416825291909152205460ff1690565b611ceb6130ec565b6002600b541415611d0e5760405162461bcd60e51b81526004016107d6906140a0565b6002600b55604080518082018252600981526836b4b73a2a37b5b2b760b91b602082015290830151611d4291908590612694565b611d4c83836126db565b9150611d638383610140015184610160015161227d565b6000611d6e84610e68565b606084015250506001600b55919050565b33611d88611867565b6001600160a01b031614611dae5760405162461bcd60e51b81526004016107d690613fb6565b6001600160a01b038116611e135760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016107d6565b611e1c816125ca565b50565b600d546001600160a01b03163314611e775760405162461bcd60e51b815260206004820152601b60248201527a1359591a584e881bdb9b1e481b585c9ad95d0818dbdb9d1c9858dd602a1b60448201526064016107d6565b611e8082611308565b6000838152600e6020526040902080546001600160a01b0319166001600160a01b0392909216919091179055611ecf611eb883611308565b828460405180602001604052806000815250612661565b5050565b600061069a60028361279e565b611ecf8282604051602401611ef6929190613e4e565b60408051601f198184030181529190526020810180516001600160e01b031663319af33360e01b1790526127aa565b611e1c81604051602401611f399190613d8c565b60408051601f198184030181529190526020810180516001600160e01b031663161765e160e11b1790526127aa565b600081815260056020526040902080546001600160a01b0319166001600160a01b0384169081179091558190611f9d82611308565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60408051808201825260038152625a4f4f60e81b6020918201528151808301835260018152603160f81b9082015281517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818301527ff60aa5d51208599eb8dddd34b5e5f7732da8b35de3e71da60731c16e9a9d3c87818401527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a0808301919091528351808303909101815260c0909101909252815191012090565b600061069a826127cb565b60006120b682611ed3565b6121175760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016107d6565b600061212283611308565b9050806001600160a01b0316846001600160a01b0316148061215d5750836001600160a01b03166121528461076e565b6001600160a01b0316145b8061216d575061216d8185611cb5565b949350505050565b61217e82611ed3565b6121df5760405162461bcd60e51b815260206004820152602c60248201527f4552433732314d657461646174613a2055524920736574206f66206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016107d6565b6000828152600960209081526040909120825161093b92840190613207565b600061069a825490565b6000610ebd83836127d6565b600d546040516328220f3560e01b8152600481018390526001600160a01b03909116906328220f3590602401600060405180830381600087803b15801561225a57600080fd5b505af115801561226e573d6000803e3d6000fd5b5050505061093b83838361280e565b8151805161229d5760405162461bcd60e51b81526004016107d6906140d7565b602083015180516122c05760405162461bcd60e51b81526004016107d6906140d7565b604084015161231d5760405162461bcd60e51b8152602060048201526024808201527f4d656469613a20636f6e74656e742068617368206d757374206265206e6f6e2d6044820152637a65726f60e01b60648201526084016107d6565b606084015161237c5760405162461bcd60e51b815260206004820152602560248201527f4d656469613a206d657461646174612068617368206d757374206265206e6f6e6044820152642d7a65726f60d81b60648201526084016107d6565b600061238760175490565b9050612393868261297d565b6123a1601780546001019055565b6123af818660400151612997565b6123bd8186606001516129d0565b6123cb81866020015161261c565b6123d9818660000151612175565b6001600160a01b03861660009081526010602052604090206123fb9082612a09565b50604080860151600090815260146020908152828220805460ff19166001179055838252600f815282822080546001600160a01b03808c166001600160a01b03199283168117909355600e90935292849020805490931617909155600d5491516375aab41d60e11b815291169063eb55683a9061247e9084908890600401614256565b600060405180830381600087803b15801561249857600080fd5b505af11580156124ac573d6000803e3d6000fd5b50505050505050505050565b600081815260096020526040812080546124d19061435b565b80601f01602080910402602001604051908101604052809291908181526020018280546124fd9061435b565b801561254a5780601f1061251f5761010080835404028352916020019161254a565b820191906000526020600020905b81548152906001019060200180831161252d57829003601f168201915b5050505050905061255a82612a15565b805115612582576000828152600960209081526040909120825161258092840190613207565b505b506000908152600e6020526040902080546001600160a01b0319169055565b60008080806125b08686612abd565b9097909650945050505050565b600061216d848484612ae8565b600c80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b8161262681611ed3565b6126425760405162461bcd60e51b81526004016107d69061406e565b60008381526013602090815260409091208351611ae492850190613207565b61266c848484612214565b61267884848484612b34565b611ae45760405162461bcd60e51b81526004016107d690613f2d565b61093b8383836040516024016126ac93929190613e78565b60408051601f198184030181529190526020810180516001600160e01b031663e0e9ad4f60e01b1790526127aa565b6126e36130ec565b6127226040518060400160405280600a8152602001692fb430b9b42a37b5b2b760b11b8152508361014001516000015184610140015160200151612c05565b6101408201515160405161273d919043908690602001613d3d565b60408051601f19818403018152918152815160209283012061014085018051830191909152518201519051612776924391879101613d3d565b60408051808303601f1901815291905280516020909101206101408301516060015250919050565b6000610ebd8383612c4c565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b600061069a826121fe565b60008260000182815481106127fb57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b826001600160a01b031661282182611308565b6001600160a01b0316146128895760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b60648201526084016107d6565b6001600160a01b0382166128eb5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016107d6565b6128f6600082611f68565b6001600160a01b03831660009081526001602052604090206129189082612c58565b506001600160a01b038216600090815260016020526040902061293b9082612a09565b5061294860028284612c64565b5080826001600160a01b0316846001600160a01b031660008051602061444983398151915260405160405180910390a4505050565b611ecf828260405180602001604052806000815250612c7a565b816129a181611ed3565b6129bd5760405162461bcd60e51b81526004016107d69061406e565b5060009182526011602052604090912055565b816129da81611ed3565b6129f65760405162461bcd60e51b81526004016107d69061406e565b5060009182526012602052604090912055565b6000610ebd8383612cad565b6000612a2082611308565b9050612a2d600083611f68565b60008281526009602052604090208054612a469061435b565b159050612a64576000828152600960205260408120612a649161328b565b6001600160a01b0381166000908152600160205260409020612a869083612c58565b50612a92600283612cfc565b5060405182906000906001600160a01b03841690600080516020614449833981519152908390a45050565b60008080612acb8585612208565b600081815260029690960160205260409095205494959350505050565b600082815260028401602052604081205480151580612b0c5750612b0c8585612c4c565b8390612b2b5760405162461bcd60e51b81526004016107d69190613e3b565b50949350505050565b60006001600160a01b0384163b612b4d5750600161216d565b6000612bce630a85bd0160e11b33888787604051602401612b719493929190613da0565b604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b0383818316178352505050506040518060600160405280603281526020016143ee603291396001600160a01b0388169190612d08565b9050600081806020019051810190612be691906139de565b6001600160e01b031916630a85bd0160e11b1492505050949350505050565b61093b838383604051602401612c1d93929190613eac565b60408051601f198184030181529190526020810180516001600160e01b0316632ced7cef60e01b1790526127aa565b6000610ebd8383612d17565b6000610ebd8383612d2f565b600061216d84846001600160a01b038516612e4c565b612c848383612e69565b612c916000848484612b34565b61093b5760405162461bcd60e51b81526004016107d690613f2d565b6000818152600183016020526040812054612cf45750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561069a565b50600061069a565b6000610ebd8383612f6e565b606061216d8484600085612f8b565b60008181526001830160205260408120541515610ebd565b60008181526001830160205260408120548015612e42576000612d53600183614318565b8554909150600090612d6790600190614318565b9050818114612de8576000866000018281548110612d9557634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905080876000018481548110612dc657634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255918252600188019052604090208390555b8554869080612e0757634e487b7160e01b600052603160045260246000fd5b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061069a565b600091505061069a565b6000828152600284016020526040812082905561216d8484612a09565b6001600160a01b038216612ebf5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016107d6565b612ec881611ed3565b15612f145760405162461bcd60e51b815260206004820152601c60248201527b115490cdcc8c4e881d1bdad95b88185b1c9958591e481b5a5b9d195960221b60448201526064016107d6565b6001600160a01b0382166000908152600160205260409020612f369082612a09565b50612f4360028284612c64565b5060405181906001600160a01b03841690600090600080516020614449833981519152908290a45050565b60008181526002830160205260408120819055610ebd8383612c58565b606082471015612fec5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016107d6565b843b61303a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016107d6565b600080866001600160a01b031685876040516130569190613d21565b60006040518083038185875af1925050503d8060008114613093576040519150601f19603f3d011682016040523d82523d6000602084013e613098565b606091505b50915091506130a88282866130b3565b979650505050505050565b606083156130c2575081610ebd565b8251156130d25782518084602001fd5b8160405162461bcd60e51b81526004016107d69190613e3b565b6040805161020081019091526060610180820190815260006101a083018190526101c083018190526101e0830152819081526020016000815260200160608152602001600081526020016000815260200160008152602001606081526020016131766040518060800160405280606081526020016060815260200160008152602001600081525090565b8152602001613198604051806040016040528060008152602001600081525090565b81526040805160808101825260008082526020828101829052928201819052606082015291019081526020016131f56040518060800160405280606081526020016060815260200160008019168152602001600080191681525090565b81526020016132026132c5565b905290565b8280546132139061435b565b90600052602060002090601f016020900481019282613235576000855561327b565b82601f1061324e57805160ff191683800117855561327b565b8280016001018555821561327b579182015b8281111561327b578251825591602001919060010190613260565b506132879291506132f2565b5090565b5080546132979061435b565b6000825580601f106132a7575050565b601f016020900490600052602060002090810190611e1c91906132f2565b60405180606001604052806132d8613307565b81526020016132e5613307565b8152602001613202613307565b5b8082111561328757600081556001016132f3565b6040518060200160405280600081525090565b60006001600160401b0380841115613334576133346143c1565b604051601f8501601f19908116603f0116810190828211818310171561335c5761335c6143c1565b8160405280935085815286868601111561337557600080fd5b858560208301376000602087830101525050509392505050565b80356001600160a01b03811681146133a657600080fd5b919050565b803580151581146133a657600080fd5b8035600481106133a657600080fd5b600082601f8301126133da578081fd5b610ebd8383356020850161331a565b6000606082840312156133fa578081fd5b604051606081018181106001600160401b038211171561341c5761341c6143c1565b60405290508061342c8484613488565b815261343b8460208501613488565b602082015261344d8460408501613488565b60408201525092915050565b60006040828403121561346a578081fd5b6134726142ab565b9050813581526020820135602082015292915050565b600060208284031215613499578081fd5b604051602081018181106001600160401b03821117156134bb576134bb6143c1565b6040529135825250919050565b6000608082840312156134d9578081fd5b6134e16142d3565b905081358152602082013560ff811681146134fb57600080fd5b80602083015250604082013560408201526060820135606082015292915050565b60006080828403121561352d578081fd5b6135356142d3565b905081356001600160401b038082111561354e57600080fd5b61355a858386016133ca565b8352602084013591508082111561357057600080fd5b5061357d848285016133ca565b602083015250604082013560408201526060820135606082015292915050565b6000608082840312156135ae578081fd5b6135b66142d3565b905081358152602082013560208201526135d2604083016133ab565b60408201526135e3606083016133ab565b606082015292915050565b6000608082840312156135ff578081fd5b6136076142d3565b905081356001600160401b0381111561361f57600080fd5b61362b848285016133ca565b82525060208201356020820152604082013560408201526060820135606082015292915050565b600060208284031215613663578081fd5b610ebd8261338f565b6000806040838503121561367e578081fd5b6136878361338f565b91506136956020840161338f565b90509250929050565b6000806000606084860312156136b2578081fd5b6136bb8461338f565b92506136c96020850161338f565b9150604084013590509250925092565b600080600080608085870312156136ee578182fd5b6136f78561338f565b93506137056020860161338f565b92506040850135915060608501356001600160401b03811115613726578182fd5b8501601f81018713613736578182fd5b6137458782356020840161331a565b91505092959194509250565b60008060408385031215613763578182fd5b61376c8361338f565b9150613695602084016133ab565b6000806000806101208587031215613790578182fd5b6137998561338f565b935060208501356001600160401b038111156137b3578283fd5b6137bf8782880161351c565b9350506137cf86604087016133e9565b91506137de8660a087016134c8565b905092959194509250565b600080604083850312156137fb578182fd5b6138048361338f565b915060208301356001600160401b038082111561381f578283fd5b908401906102408287031215613833578283fd5b61383b6142f5565b823582811115613849578485fd5b613855888286016135ee565b825250613864602084016133bb565b602082015260408301358281111561387a578485fd5b613886888286016133ca565b604083015250606083013560608201526080830135608082015260a083013560a082015260c0830135828111156138bb578485fd5b6138c7888286016133ca565b60c08301525060e0830135828111156138de578485fd5b6138ea8882860161351c565b60e0830152506101006138ff88828601613459565b908201526101406139128885830161359d565b6101208301526101c08401358381111561392a578586fd5b6139368982870161351c565b82840152505061394a876101e085016133e9565b6101608201528093505050509250929050565b6000806040838503121561396f578182fd5b6139788361338f565b946020939093013593505050565b600080600060c0848603121561399a578081fd5b6139a38461338f565b9250602084013591506139b985604086016134c8565b90509250925092565b6000602082840312156139d3578081fd5b8135610ebd816143d7565b6000602082840312156139ef578081fd5b8151610ebd816143d7565b60008060808385031215613a0c578182fd5b82356001600160401b03811115613a21578283fd5b613a2d8582860161351c565b92505061369584602085016133e9565b600060208284031215613a4e578081fd5b5035919050565b60008060408385031215613a67578182fd5b823591506136956020840161338f565b600080600060408486031215613a8b578081fd5b8335925060208401356001600160401b0380821115613aa8578283fd5b818601915086601f830112613abb578283fd5b813581811115613ac9578384fd5b876020828501011115613ada578384fd5b6020830194508093505050509250925092565b6000808284036060811215613b00578283fd5b833592506040601f1982011215613b15578182fd5b50613b1e6142ab565b60208401358152613b316040850161338f565b6020820152809150509250929050565b60008082840360c0811215613b54578283fd5b8335925060a0601f1982011215613b69578182fd5b5060405160a081018181106001600160401b0382111715613b8c57613b8c6143c1565b806040525060208401358152613ba46040850161338f565b6020820152613bb56060850161338f565b6040820152613bc66080850161338f565b6060820152613bd88560a08601613488565b6080820152809150509250929050565b60008151808452613c0081602086016020860161432f565b601f01601f19169290920160200192915050565b60048110613c3257634e487b7160e01b600052602160045260246000fd5b9052565b8051518252602080820151519083015260409081015151910152565b805182526020808201516001600160a01b03908116918401919091526040808301518216908401526060808301519091169083015260809081015151910152565b6000815160808452613ca86080850182613be8565b905060208301518482036020860152613cc18282613be8565b91505060408301516040850152606083015160608501528091505092915050565b6000815160808452613cf76080850182613be8565b90506020830151602085015260408301516040850152606083015160608501528091505092915050565b60008251613d3381846020870161432f565b9190910192915050565b60008451613d4f81846020890161432f565b919091019283525060601b6001600160601b0319166020820152603401919050565b61190160f01b81526002810192909252602282015260420190565b6001600160a01b0391909116815260200190565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090613dd390830184613be8565b9695505050505050565b6001600160a01b03841681526040602082018190528101829052818360608301376000818301606090810191909152601f909201601f1916010192915050565b93845260ff9290921660208401526040830152606082015260800190565b602081526000610ebd6020830184613be8565b604081526000613e616040830185613be8565b905060018060a01b03831660208301529392505050565b606081526000613e8b6060830186613be8565b6001600160a01b03851660208401528281036040840152613dd38185613be8565b606081526000613ebf6060830186613be8565b8281036020840152613ed18186613be8565b90508281036040840152613dd38185613be8565b60208082526028908201527f4d656469613a20746f6b656e2077697468207468617420696420646f6573206e6040820152671bdd08195e1a5cdd60c21b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6020808252601d908201527f4d656469613a204f6e6c7920617070726f766564206f72206f776e6572000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6020808252601890820152771359591a584e8814da59db985d1d5c99481a5b9d985b1a5960421b604082015260600190565b60208082526018908201527726b2b234b09d103737b732bc34b9ba32b73a103a37b5b2b760411b604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60208082526026908201527f4d656469613a2073706563696669656420757269206d757374206265206e6f6e6040820152652d656d70747960d01b606082015260800190565b6020815260008251610240602084015261413b610260840182613ce2565b9050602084015161414f6040850182613c14565b506040840151601f198085840301606086015261416c8383613be8565b925060608601516080860152608086015160a086015260a086015160c086015260c08601519150808584030160e08601526141a78383613be8565b925060e086015191506101008186850301818701526141c68484613c93565b9350808701519250506101206141e88187018480518252602090810151910152565b86015191506101606142218682018480518252602081015160208301526040810151151560408301526060810151151560608301525050565b610140870151925081868503016101e087015261423e8484613c93565b93508087015192505050611141610200850182613c36565b82815260808101610ebd6020830184613c36565b82815260c08101610ebd6020830184613c52565b83815260e081016142926020830185613c52565b6001600160a01b039290921660c0919091015292915050565b604080519081016001600160401b03811182821017156142cd576142cd6143c1565b60405290565b604051608081016001600160401b03811182821017156142cd576142cd6143c1565b60405161018081016001600160401b03811182821017156142cd576142cd6143c1565b60008282101561432a5761432a6143ab565b500390565b60005b8381101561434a578181015183820152602001614332565b83811115611ae45750506000910152565b600181811c9082168061436f57607f821691505b60208210811415610ca757634e487b7160e01b600052602260045260246000fd5b60006000198214156143a4576143a46143ab565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b031981168114611e1c57600080fdfe4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465724552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b656eddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa26469706673582212201caf7ae9a44d3a89be33220f4ca29475fdf9d3587a1af65c7e0d6ab36cb70b1f64736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061024a5760003560e01c80636c0360eb116101425780636c0360eb1461046e57806370a0823114610476578063715018a61461048957806375682e791461049157806375cb2672146104a45780637a7a1202146104b75780638da5cb5b146104ca57806395d89b41146104d25780639d8e7260146104da578063a1794bcd14610503578063a22cb46514610516578063b1e130fc14610529578063b320f4591461053c578063b88d4fde1461054f578063ba33939914610562578063c87b56dd14610575578063d1df306c14610588578063de5236fb1461059b578063e0fd045f146105c2578063e985e9c5146105eb578063ee492ff8146105fe578063f2fde38b1461061e578063f6b630f014610631578063f8ccd5de14610644578063fad321971461066f57600080fd5b8062923f9e1461024f57806301ddc3b51461027757806301ffc9a7146102a557806306fdde03146102b8578063081812fc146102cd578063095ea7b3146102ed5780630bcd899b146103025780630e2a177814610322578063157c3df91461033557806318160ddd1461034857806318e97fd1146103505780632110f20d1461036357806323b872dd1461037657806328220f35146103895780632cca32371461039c5780632f745c59146103af57806330adf81f146103c257806342842e0e146103e957806342966c68146103fc578063430c20811461040f5780634f6ccce7146104225780635bf624221461043557806362f24b70146104485780636352211e1461045b575b600080fd5b61026261025d366004613a3d565b61068f565b60405190151581526020015b60405180910390f35b610297610285366004613a3d565b60126020526000908152604090205481565b60405190815260200161026e565b6102626102b33660046139c2565b6106a0565b6102c06106dc565b60405161026e9190613e3b565b6102e06102db366004613a3d565b61076e565b60405161026e9190613d8c565b6103006102fb36600461395d565b6107fb565b005b610297610310366004613652565b60166020526000908152604090205481565b610300610330366004613986565b610940565b6102c0610343366004613a3d565b610be3565b610297610cad565b61030061035e366004613a77565b610cbe565b610297610371366004613652565b610e68565b61030061038436600461369e565b610ec4565b610300610397366004613a3d565b610ef5565b6103006103aa3660046139fa565b610fa0565b6102976103bd36600461395d565b610fdc565b6102977f49ecf333e5b8c95c40fdafc95c1ad136e8914a8fb55e9dc8bb01eaa83a2df9ad81565b6103006103f736600461369e565b610ffe565b61030061040a366004613a3d565b611019565b61026261041d36600461395d565b611127565b610297610430366004613a3d565b611133565b610300610443366004613b41565b611149565b610300610456366004613aed565b61123a565b6102e0610469366004613a3d565b611308565b6102c0611330565b610297610484366004613652565b61133f565b6103006113cb565b61030061049f366004613a77565b611406565b6103006104b2366004613652565b611597565b6103006104c536600461377a565b611659565b6102e0611867565b6102c0611876565b6102e06104e8366004613a3d565b600e602052600090815260409020546001600160a01b031681565b600d546102e0906001600160a01b031681565b610300610524366004613751565b611885565b610300610537366004613a3d565b611946565b61030061054a366004613a3d565b6119f5565b61030061055d3660046136d9565b611ab2565b610300610570366004613b41565b611aea565b6102c0610583366004613a3d565b611b6c565b61030061059636600461395d565b611c36565b6102977f2952e482b8e2b192305f87374d7af45dc2eafafe4f50d26a0c02e90f2fdbe14b81565b6102e06105d0366004613a3d565b600f602052600090815260409020546001600160a01b031681565b6102626105f936600461366c565b611cb5565b61061161060c3660046137e9565b611ce3565b60405161026e919061411d565b61030061062c366004613652565b611d7f565b61030061063f366004613a55565b611e1f565b61029761065236600461395d565b601560209081526000928352604080842090915290825290205481565b61029761067d366004613a3d565b60116020526000908152604090205481565b600061069a82611ed3565b92915050565b60006301ffc9a760e01b6001600160e01b03198316148061069a5750506001600160e01b03191660009081526020819052604090205460ff1690565b6060600780546106eb9061435b565b80601f01602080910402602001604051908101604052809291908181526020018280546107179061435b565b80156107645780601f1061073957610100808354040283529160200191610764565b820191906000526020600020905b81548152906001019060200180831161074757829003601f168201915b5050505050905090565b600061077982611ed3565b6107df5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600560205260409020546001600160a01b031690565b600061080682611308565b9050610833604051806040016040528060098152602001682a34329037bbb732b960b91b81525082611ee0565b806001600160a01b0316836001600160a01b0316141561089f5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084016107d6565b6108a833611f25565b336001600160a01b03821614806108c457506108c48133611cb5565b6109315760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776044820152771b995c881b9bdc88185c1c1c9bdd995908199bdc88185b1b60421b60648201526084016107d6565b61093b8383611f68565b505050565b6002600b5414156109635760405162461bcd60e51b81526004016107d6906140a0565b6002600b558161097281611ed3565b61098e5760405162461bcd60e51b81526004016107d69061406e565b8151158061099d575081514211155b6109e15760405162461bcd60e51b81526020600482015260156024820152741359591a584e8814195c9b5a5d08195e1c1a5c9959605a1b60448201526064016107d6565b6001600160a01b038416610a365760405162461bcd60e51b815260206004820152601c60248201527b04d656469613a207370656e6465722063616e6e6f74206265203078360241b60448201526064016107d6565b6000610a40611fd6565b90506000817f49ecf333e5b8c95c40fdafc95c1ad136e8914a8fb55e9dc8bb01eaa83a2df9ad8787601585610a7483611308565b6001600160a01b03168152602080820192909252604090810160009081208c82529092528120805491610aa683614390565b9091555088516040805160208101969096526001600160a01b03909416938501939093526060840191909152608083015260a082015260c00160405160208183030381529060405280519060200120604051602001610b06929190613d71565b604051602081830303815290604052805190602001209050600060018286602001518760400151886060015160405160008152602001604052604051610b4f9493929190613e1d565b6020604051602081039080840390855afa158015610b71573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811615801590610baf5750806001600160a01b0316610ba487611308565b6001600160a01b0316145b610bcb5760405162461bcd60e51b81526004016107d69061403c565b610bd58787611f68565b50506001600b555050505050565b60608180610bf060175490565b11610c0d5760405162461bcd60e51b81526004016107d690613ee5565b60008381526013602052604090208054610c269061435b565b80601f0160208091040260200160405190810160405280929190818152602001828054610c529061435b565b8015610c9f5780601f10610c7457610100808354040283529160200191610c9f565b820191906000526020600020905b815481529060010190602001808311610c8257829003601f168201915b505050505091505b50919050565b6000610cb960026120a0565b905090565b6002600b541415610ce15760405162461bcd60e51b81526004016107d6906140a0565b6002600b553383610cf282826120ab565b610d0e5760405162461bcd60e51b81526004016107d690613f7f565b6000858152601160205260409020548590610d865760405162461bcd60e51b815260206004820152603260248201527f4d656469613a20746f6b656e20646f6573206e6f7420686176652068617368206044820152711bd98818dc99585d19590818dbdb9d195b9d60721b60648201526084016107d6565b84848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050825115159150610dde90505760405162461bcd60e51b81526004016107d6906140d7565b610e1e8787878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061217592505050565b867f702fe2dc2dc0f68023540aa4a1e11811c0f29112f6ebf01e61b90538e4f29810338888604051610e5293929190613ddd565b60405180910390a250506001600b555050505050565b6001600160a01b03811660009081526010602052604081208190600190610e8e906121fe565b610e989190614318565b6001600160a01b0384166000908152601060205260409020909150610ebd9082612208565b9392505050565b610ece33826120ab565b610eea5760405162461bcd60e51b81526004016107d690613feb565b61093b838383612214565b6002600b541415610f185760405162461bcd60e51b81526004016107d6906140a0565b6002600b553381610f2982826120ab565b610f455760405162461bcd60e51b81526004016107d690613f7f565b600d546040516328220f3560e01b8152600481018590526001600160a01b03909116906328220f35906024015b600060405180830381600087803b158015610f8c57600080fd5b505af1158015610bd5573d6000803e3d6000fd5b6002600b541415610fc35760405162461bcd60e51b81526004016107d6906140a0565b6002600b55610fd333838361227d565b50506001600b55565b6001600160a01b0382166000908152600160205260408120610ebd9083612208565b61093b83838360405180602001604052806000815250611ab2565b6002600b54141561103c5760405162461bcd60e51b81526004016107d6906140a0565b6002600b558061104b81611ed3565b6110675760405162461bcd60e51b81526004016107d69061406e565b338261107382826120ab565b61108f5760405162461bcd60e51b81526004016107d690613f7f565b600061109a85611308565b6000868152600f60205260409020549091506001600160a01b038083169116146111125760405162461bcd60e51b8152602060048201526024808201527f4d656469613a206f776e6572206973206e6f742063726561746f72206f66206d6044820152636564696160e01b60648201526084016107d6565b61111b856124b8565b50506001600b55505050565b6000610ebd83836120ab565b6000806111416002846125a1565b509392505050565b6002600b54141561116c5760405162461bcd60e51b81526004016107d6906140a0565b6002600b558161117b81611ed3565b6111975760405162461bcd60e51b81526004016107d69061406e565b81604001516001600160a01b0316336001600160a01b0316146112065760405162461bcd60e51b815260206004820152602160248201527f4d61726b65743a20426964646572206d757374206265206d73672073656e64656044820152603960f91b60648201526084016107d6565b600d546040516317b6b0d360e31b81526001600160a01b039091169063bdb5869890610f729086908690339060040161427e565b6002600b54141561125d5760405162461bcd60e51b81526004016107d6906140a0565b6002600b55338261126e82826120ab565b61128a5760405162461bcd60e51b81526004016107d690613f7f565b600d5460405163062f24b760e41b8152600481018690528451602482015260208501516001600160a01b039081166044830152909116906362f24b70906064015b600060405180830381600087803b1580156112e557600080fd5b505af11580156112f9573d6000803e3d6000fd5b50506001600b55505050505050565b600061069a8260405180606001604052806029815260200161442060299139600291906125bd565b6060600a80546106eb9061435b565b60006001600160a01b0382166113aa5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b60648201526084016107d6565b6001600160a01b038216600090815260016020526040902061069a906121fe565b336113d4611867565b6001600160a01b0316146113fa5760405162461bcd60e51b81526004016107d690613fb6565b61140460006125ca565b565b6002600b5414156114295760405162461bcd60e51b81526004016107d6906140a0565b6002600b55338361143a82826120ab565b6114565760405162461bcd60e51b81526004016107d690613f7f565b60008581526012602052604090205485906114cb5760405162461bcd60e51b815260206004820152602f60248201527f4d656469613a20746f6b656e20646f6573206e6f74206861766520686173682060448201526e6f6620697473206d6574616461746160881b60648201526084016107d6565b84848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505082511515915061152390505760405162461bcd60e51b81526004016107d6906140d7565b6115638787878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061261c92505050565b867fe3df41127db820c79e5b8d541a63e40e3e97b9af96f7a50bded13091b70df9ae338888604051610e5293929190613ddd565b336115a0611867565b6001600160a01b0316146115c65760405162461bcd60e51b81526004016107d690613fb6565b6001600160a01b0381166116375760405162461bcd60e51b815260206004820152603260248201527f4d61726b65743a2063616e6e6f7420736574206d61726b657420636f6e7472616044820152716374206173207a65726f206164647265737360701b60648201526084016107d6565b600d80546001600160a01b0319166001600160a01b0392909216919091179055565b6002600b54141561167c5760405162461bcd60e51b81526004016107d6906140a0565b6002600b5580511580611690575080514211155b6116d95760405162461bcd60e51b815260206004820152601a6024820152791359591a584e881b5a5b9d15da5d1a14da59c8195e1c1a5c995960321b60448201526064016107d6565b60006116e3611fd6565b6040808601516060870151602080880151516001600160a01b038b16600090815260169092529381208054959650909486947f2952e482b8e2b192305f87374d7af45dc2eafafe4f50d26a0c02e90f2fdbe14b9493929091908761174683614390565b9091555088516040805160208101979097528601949094526060850192909252608084015260a083015260c082015260e0016040516020818303038152906040528051906020012060405160200161179f929190613d71565b6040516020818303038152906040528051906020012090506000600182856020015186604001518760600151604051600081526020016040526040516117e89493929190613e1d565b6020604051602081039080840390855afa15801561180a573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116158015906118405750806001600160a01b0316876001600160a01b0316145b61185c5760405162461bcd60e51b81526004016107d69061403c565b610bd581878761227d565b600c546001600160a01b031690565b6060600880546106eb9061435b565b6001600160a01b0382163314156118da5760405162461bcd60e51b815260206004820152601960248201527822a9219b99189d1030b8383937bb32903a379031b0b63632b960391b60448201526064016107d6565b3360008181526006602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6002600b5414156119695760405162461bcd60e51b81526004016107d6906140a0565b6002600b556119778161076e565b6001600160a01b0316336001600160a01b0316146119e25760405162461bcd60e51b815260206004820152602260248201527f4d656469613a2063616c6c6572206e6f7420617070726f766564206164647265604482015261737360f01b60648201526084016107d6565b6119ed600082611f68565b506001600b55565b6002600b541415611a185760405162461bcd60e51b81526004016107d6906140a0565b6002600b558080611a2860175490565b11611a455760405162461bcd60e51b81526004016107d690613ee5565b600d5460405163776a083560e01b8152600481018490523360248201526001600160a01b039091169063776a083590604401600060405180830381600087803b158015611a9157600080fd5b505af1158015611aa5573d6000803e3d6000fd5b50506001600b5550505050565b611abc33836120ab565b611ad85760405162461bcd60e51b81526004016107d690613feb565b611ae484848484612661565b50505050565b6002600b541415611b0d5760405162461bcd60e51b81526004016107d6906140a0565b6002600b553382611b1e82826120ab565b611b3a5760405162461bcd60e51b81526004016107d690613f7f565b600d5460405163ba33939960e01b81526001600160a01b039091169063ba339399906112cb908790879060040161426a565b60608180611b7960175490565b11611b965760405162461bcd60e51b81526004016107d690613ee5565b60008381526009602052604081208054611baf9061435b565b80601f0160208091040260200160405190810160405280929190818152602001828054611bdb9061435b565b8015611c285780601f10611bfd57610100808354040283529160200191611c28565b820191906000526020600020905b815481529060010190602001808311611c0b57829003601f168201915b509398975050505050505050565b6002600b541415611c595760405162461bcd60e51b81526004016107d6906140a0565b6002600b5580611c6881611ed3565b611c845760405162461bcd60e51b81526004016107d69061406e565b8282611c9082826120ab565b611cac5760405162461bcd60e51b81526004016107d690613f7f565b61111b846124b8565b6001600160a01b03918216600090815260066020908152604080832093909416825291909152205460ff1690565b611ceb6130ec565b6002600b541415611d0e5760405162461bcd60e51b81526004016107d6906140a0565b6002600b55604080518082018252600981526836b4b73a2a37b5b2b760b91b602082015290830151611d4291908590612694565b611d4c83836126db565b9150611d638383610140015184610160015161227d565b6000611d6e84610e68565b606084015250506001600b55919050565b33611d88611867565b6001600160a01b031614611dae5760405162461bcd60e51b81526004016107d690613fb6565b6001600160a01b038116611e135760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016107d6565b611e1c816125ca565b50565b600d546001600160a01b03163314611e775760405162461bcd60e51b815260206004820152601b60248201527a1359591a584e881bdb9b1e481b585c9ad95d0818dbdb9d1c9858dd602a1b60448201526064016107d6565b611e8082611308565b6000838152600e6020526040902080546001600160a01b0319166001600160a01b0392909216919091179055611ecf611eb883611308565b828460405180602001604052806000815250612661565b5050565b600061069a60028361279e565b611ecf8282604051602401611ef6929190613e4e565b60408051601f198184030181529190526020810180516001600160e01b031663319af33360e01b1790526127aa565b611e1c81604051602401611f399190613d8c565b60408051601f198184030181529190526020810180516001600160e01b031663161765e160e11b1790526127aa565b600081815260056020526040902080546001600160a01b0319166001600160a01b0384169081179091558190611f9d82611308565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60408051808201825260038152625a4f4f60e81b6020918201528151808301835260018152603160f81b9082015281517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818301527ff60aa5d51208599eb8dddd34b5e5f7732da8b35de3e71da60731c16e9a9d3c87818401527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a0808301919091528351808303909101815260c0909101909252815191012090565b600061069a826127cb565b60006120b682611ed3565b6121175760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016107d6565b600061212283611308565b9050806001600160a01b0316846001600160a01b0316148061215d5750836001600160a01b03166121528461076e565b6001600160a01b0316145b8061216d575061216d8185611cb5565b949350505050565b61217e82611ed3565b6121df5760405162461bcd60e51b815260206004820152602c60248201527f4552433732314d657461646174613a2055524920736574206f66206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016107d6565b6000828152600960209081526040909120825161093b92840190613207565b600061069a825490565b6000610ebd83836127d6565b600d546040516328220f3560e01b8152600481018390526001600160a01b03909116906328220f3590602401600060405180830381600087803b15801561225a57600080fd5b505af115801561226e573d6000803e3d6000fd5b5050505061093b83838361280e565b8151805161229d5760405162461bcd60e51b81526004016107d6906140d7565b602083015180516122c05760405162461bcd60e51b81526004016107d6906140d7565b604084015161231d5760405162461bcd60e51b8152602060048201526024808201527f4d656469613a20636f6e74656e742068617368206d757374206265206e6f6e2d6044820152637a65726f60e01b60648201526084016107d6565b606084015161237c5760405162461bcd60e51b815260206004820152602560248201527f4d656469613a206d657461646174612068617368206d757374206265206e6f6e6044820152642d7a65726f60d81b60648201526084016107d6565b600061238760175490565b9050612393868261297d565b6123a1601780546001019055565b6123af818660400151612997565b6123bd8186606001516129d0565b6123cb81866020015161261c565b6123d9818660000151612175565b6001600160a01b03861660009081526010602052604090206123fb9082612a09565b50604080860151600090815260146020908152828220805460ff19166001179055838252600f815282822080546001600160a01b03808c166001600160a01b03199283168117909355600e90935292849020805490931617909155600d5491516375aab41d60e11b815291169063eb55683a9061247e9084908890600401614256565b600060405180830381600087803b15801561249857600080fd5b505af11580156124ac573d6000803e3d6000fd5b50505050505050505050565b600081815260096020526040812080546124d19061435b565b80601f01602080910402602001604051908101604052809291908181526020018280546124fd9061435b565b801561254a5780601f1061251f5761010080835404028352916020019161254a565b820191906000526020600020905b81548152906001019060200180831161252d57829003601f168201915b5050505050905061255a82612a15565b805115612582576000828152600960209081526040909120825161258092840190613207565b505b506000908152600e6020526040902080546001600160a01b0319169055565b60008080806125b08686612abd565b9097909650945050505050565b600061216d848484612ae8565b600c80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b8161262681611ed3565b6126425760405162461bcd60e51b81526004016107d69061406e565b60008381526013602090815260409091208351611ae492850190613207565b61266c848484612214565b61267884848484612b34565b611ae45760405162461bcd60e51b81526004016107d690613f2d565b61093b8383836040516024016126ac93929190613e78565b60408051601f198184030181529190526020810180516001600160e01b031663e0e9ad4f60e01b1790526127aa565b6126e36130ec565b6127226040518060400160405280600a8152602001692fb430b9b42a37b5b2b760b11b8152508361014001516000015184610140015160200151612c05565b6101408201515160405161273d919043908690602001613d3d565b60408051601f19818403018152918152815160209283012061014085018051830191909152518201519051612776924391879101613d3d565b60408051808303601f1901815291905280516020909101206101408301516060015250919050565b6000610ebd8383612c4c565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b600061069a826121fe565b60008260000182815481106127fb57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b826001600160a01b031661282182611308565b6001600160a01b0316146128895760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b60648201526084016107d6565b6001600160a01b0382166128eb5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016107d6565b6128f6600082611f68565b6001600160a01b03831660009081526001602052604090206129189082612c58565b506001600160a01b038216600090815260016020526040902061293b9082612a09565b5061294860028284612c64565b5080826001600160a01b0316846001600160a01b031660008051602061444983398151915260405160405180910390a4505050565b611ecf828260405180602001604052806000815250612c7a565b816129a181611ed3565b6129bd5760405162461bcd60e51b81526004016107d69061406e565b5060009182526011602052604090912055565b816129da81611ed3565b6129f65760405162461bcd60e51b81526004016107d69061406e565b5060009182526012602052604090912055565b6000610ebd8383612cad565b6000612a2082611308565b9050612a2d600083611f68565b60008281526009602052604090208054612a469061435b565b159050612a64576000828152600960205260408120612a649161328b565b6001600160a01b0381166000908152600160205260409020612a869083612c58565b50612a92600283612cfc565b5060405182906000906001600160a01b03841690600080516020614449833981519152908390a45050565b60008080612acb8585612208565b600081815260029690960160205260409095205494959350505050565b600082815260028401602052604081205480151580612b0c5750612b0c8585612c4c565b8390612b2b5760405162461bcd60e51b81526004016107d69190613e3b565b50949350505050565b60006001600160a01b0384163b612b4d5750600161216d565b6000612bce630a85bd0160e11b33888787604051602401612b719493929190613da0565b604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b0383818316178352505050506040518060600160405280603281526020016143ee603291396001600160a01b0388169190612d08565b9050600081806020019051810190612be691906139de565b6001600160e01b031916630a85bd0160e11b1492505050949350505050565b61093b838383604051602401612c1d93929190613eac565b60408051601f198184030181529190526020810180516001600160e01b0316632ced7cef60e01b1790526127aa565b6000610ebd8383612d17565b6000610ebd8383612d2f565b600061216d84846001600160a01b038516612e4c565b612c848383612e69565b612c916000848484612b34565b61093b5760405162461bcd60e51b81526004016107d690613f2d565b6000818152600183016020526040812054612cf45750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561069a565b50600061069a565b6000610ebd8383612f6e565b606061216d8484600085612f8b565b60008181526001830160205260408120541515610ebd565b60008181526001830160205260408120548015612e42576000612d53600183614318565b8554909150600090612d6790600190614318565b9050818114612de8576000866000018281548110612d9557634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905080876000018481548110612dc657634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255918252600188019052604090208390555b8554869080612e0757634e487b7160e01b600052603160045260246000fd5b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061069a565b600091505061069a565b6000828152600284016020526040812082905561216d8484612a09565b6001600160a01b038216612ebf5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016107d6565b612ec881611ed3565b15612f145760405162461bcd60e51b815260206004820152601c60248201527b115490cdcc8c4e881d1bdad95b88185b1c9958591e481b5a5b9d195960221b60448201526064016107d6565b6001600160a01b0382166000908152600160205260409020612f369082612a09565b50612f4360028284612c64565b5060405181906001600160a01b03841690600090600080516020614449833981519152908290a45050565b60008181526002830160205260408120819055610ebd8383612c58565b606082471015612fec5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016107d6565b843b61303a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016107d6565b600080866001600160a01b031685876040516130569190613d21565b60006040518083038185875af1925050503d8060008114613093576040519150601f19603f3d011682016040523d82523d6000602084013e613098565b606091505b50915091506130a88282866130b3565b979650505050505050565b606083156130c2575081610ebd565b8251156130d25782518084602001fd5b8160405162461bcd60e51b81526004016107d69190613e3b565b6040805161020081019091526060610180820190815260006101a083018190526101c083018190526101e0830152819081526020016000815260200160608152602001600081526020016000815260200160008152602001606081526020016131766040518060800160405280606081526020016060815260200160008152602001600081525090565b8152602001613198604051806040016040528060008152602001600081525090565b81526040805160808101825260008082526020828101829052928201819052606082015291019081526020016131f56040518060800160405280606081526020016060815260200160008019168152602001600080191681525090565b81526020016132026132c5565b905290565b8280546132139061435b565b90600052602060002090601f016020900481019282613235576000855561327b565b82601f1061324e57805160ff191683800117855561327b565b8280016001018555821561327b579182015b8281111561327b578251825591602001919060010190613260565b506132879291506132f2565b5090565b5080546132979061435b565b6000825580601f106132a7575050565b601f016020900490600052602060002090810190611e1c91906132f2565b60405180606001604052806132d8613307565b81526020016132e5613307565b8152602001613202613307565b5b8082111561328757600081556001016132f3565b6040518060200160405280600081525090565b60006001600160401b0380841115613334576133346143c1565b604051601f8501601f19908116603f0116810190828211818310171561335c5761335c6143c1565b8160405280935085815286868601111561337557600080fd5b858560208301376000602087830101525050509392505050565b80356001600160a01b03811681146133a657600080fd5b919050565b803580151581146133a657600080fd5b8035600481106133a657600080fd5b600082601f8301126133da578081fd5b610ebd8383356020850161331a565b6000606082840312156133fa578081fd5b604051606081018181106001600160401b038211171561341c5761341c6143c1565b60405290508061342c8484613488565b815261343b8460208501613488565b602082015261344d8460408501613488565b60408201525092915050565b60006040828403121561346a578081fd5b6134726142ab565b9050813581526020820135602082015292915050565b600060208284031215613499578081fd5b604051602081018181106001600160401b03821117156134bb576134bb6143c1565b6040529135825250919050565b6000608082840312156134d9578081fd5b6134e16142d3565b905081358152602082013560ff811681146134fb57600080fd5b80602083015250604082013560408201526060820135606082015292915050565b60006080828403121561352d578081fd5b6135356142d3565b905081356001600160401b038082111561354e57600080fd5b61355a858386016133ca565b8352602084013591508082111561357057600080fd5b5061357d848285016133ca565b602083015250604082013560408201526060820135606082015292915050565b6000608082840312156135ae578081fd5b6135b66142d3565b905081358152602082013560208201526135d2604083016133ab565b60408201526135e3606083016133ab565b606082015292915050565b6000608082840312156135ff578081fd5b6136076142d3565b905081356001600160401b0381111561361f57600080fd5b61362b848285016133ca565b82525060208201356020820152604082013560408201526060820135606082015292915050565b600060208284031215613663578081fd5b610ebd8261338f565b6000806040838503121561367e578081fd5b6136878361338f565b91506136956020840161338f565b90509250929050565b6000806000606084860312156136b2578081fd5b6136bb8461338f565b92506136c96020850161338f565b9150604084013590509250925092565b600080600080608085870312156136ee578182fd5b6136f78561338f565b93506137056020860161338f565b92506040850135915060608501356001600160401b03811115613726578182fd5b8501601f81018713613736578182fd5b6137458782356020840161331a565b91505092959194509250565b60008060408385031215613763578182fd5b61376c8361338f565b9150613695602084016133ab565b6000806000806101208587031215613790578182fd5b6137998561338f565b935060208501356001600160401b038111156137b3578283fd5b6137bf8782880161351c565b9350506137cf86604087016133e9565b91506137de8660a087016134c8565b905092959194509250565b600080604083850312156137fb578182fd5b6138048361338f565b915060208301356001600160401b038082111561381f578283fd5b908401906102408287031215613833578283fd5b61383b6142f5565b823582811115613849578485fd5b613855888286016135ee565b825250613864602084016133bb565b602082015260408301358281111561387a578485fd5b613886888286016133ca565b604083015250606083013560608201526080830135608082015260a083013560a082015260c0830135828111156138bb578485fd5b6138c7888286016133ca565b60c08301525060e0830135828111156138de578485fd5b6138ea8882860161351c565b60e0830152506101006138ff88828601613459565b908201526101406139128885830161359d565b6101208301526101c08401358381111561392a578586fd5b6139368982870161351c565b82840152505061394a876101e085016133e9565b6101608201528093505050509250929050565b6000806040838503121561396f578182fd5b6139788361338f565b946020939093013593505050565b600080600060c0848603121561399a578081fd5b6139a38461338f565b9250602084013591506139b985604086016134c8565b90509250925092565b6000602082840312156139d3578081fd5b8135610ebd816143d7565b6000602082840312156139ef578081fd5b8151610ebd816143d7565b60008060808385031215613a0c578182fd5b82356001600160401b03811115613a21578283fd5b613a2d8582860161351c565b92505061369584602085016133e9565b600060208284031215613a4e578081fd5b5035919050565b60008060408385031215613a67578182fd5b823591506136956020840161338f565b600080600060408486031215613a8b578081fd5b8335925060208401356001600160401b0380821115613aa8578283fd5b818601915086601f830112613abb578283fd5b813581811115613ac9578384fd5b876020828501011115613ada578384fd5b6020830194508093505050509250925092565b6000808284036060811215613b00578283fd5b833592506040601f1982011215613b15578182fd5b50613b1e6142ab565b60208401358152613b316040850161338f565b6020820152809150509250929050565b60008082840360c0811215613b54578283fd5b8335925060a0601f1982011215613b69578182fd5b5060405160a081018181106001600160401b0382111715613b8c57613b8c6143c1565b806040525060208401358152613ba46040850161338f565b6020820152613bb56060850161338f565b6040820152613bc66080850161338f565b6060820152613bd88560a08601613488565b6080820152809150509250929050565b60008151808452613c0081602086016020860161432f565b601f01601f19169290920160200192915050565b60048110613c3257634e487b7160e01b600052602160045260246000fd5b9052565b8051518252602080820151519083015260409081015151910152565b805182526020808201516001600160a01b03908116918401919091526040808301518216908401526060808301519091169083015260809081015151910152565b6000815160808452613ca86080850182613be8565b905060208301518482036020860152613cc18282613be8565b91505060408301516040850152606083015160608501528091505092915050565b6000815160808452613cf76080850182613be8565b90506020830151602085015260408301516040850152606083015160608501528091505092915050565b60008251613d3381846020870161432f565b9190910192915050565b60008451613d4f81846020890161432f565b919091019283525060601b6001600160601b0319166020820152603401919050565b61190160f01b81526002810192909252602282015260420190565b6001600160a01b0391909116815260200190565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090613dd390830184613be8565b9695505050505050565b6001600160a01b03841681526040602082018190528101829052818360608301376000818301606090810191909152601f909201601f1916010192915050565b93845260ff9290921660208401526040830152606082015260800190565b602081526000610ebd6020830184613be8565b604081526000613e616040830185613be8565b905060018060a01b03831660208301529392505050565b606081526000613e8b6060830186613be8565b6001600160a01b03851660208401528281036040840152613dd38185613be8565b606081526000613ebf6060830186613be8565b8281036020840152613ed18186613be8565b90508281036040840152613dd38185613be8565b60208082526028908201527f4d656469613a20746f6b656e2077697468207468617420696420646f6573206e6040820152671bdd08195e1a5cdd60c21b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6020808252601d908201527f4d656469613a204f6e6c7920617070726f766564206f72206f776e6572000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6020808252601890820152771359591a584e8814da59db985d1d5c99481a5b9d985b1a5960421b604082015260600190565b60208082526018908201527726b2b234b09d103737b732bc34b9ba32b73a103a37b5b2b760411b604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60208082526026908201527f4d656469613a2073706563696669656420757269206d757374206265206e6f6e6040820152652d656d70747960d01b606082015260800190565b6020815260008251610240602084015261413b610260840182613ce2565b9050602084015161414f6040850182613c14565b506040840151601f198085840301606086015261416c8383613be8565b925060608601516080860152608086015160a086015260a086015160c086015260c08601519150808584030160e08601526141a78383613be8565b925060e086015191506101008186850301818701526141c68484613c93565b9350808701519250506101206141e88187018480518252602090810151910152565b86015191506101606142218682018480518252602081015160208301526040810151151560408301526060810151151560608301525050565b610140870151925081868503016101e087015261423e8484613c93565b93508087015192505050611141610200850182613c36565b82815260808101610ebd6020830184613c36565b82815260c08101610ebd6020830184613c52565b83815260e081016142926020830185613c52565b6001600160a01b039290921660c0919091015292915050565b604080519081016001600160401b03811182821017156142cd576142cd6143c1565b60405290565b604051608081016001600160401b03811182821017156142cd576142cd6143c1565b60405161018081016001600160401b03811182821017156142cd576142cd6143c1565b60008282101561432a5761432a6143ab565b500390565b60005b8381101561434a578181015183820152602001614332565b83811115611ae45750506000910152565b600181811c9082168061436f57607f821691505b60208210811415610ca757634e487b7160e01b600052602260045260246000fd5b60006000198214156143a4576143a46143ab565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b031981168114611e1c57600080fdfe4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465724552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b656eddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa26469706673582212201caf7ae9a44d3a89be33220f4ca29475fdf9d3587a1af65c7e0d6ab36cb70b1f64736f6c63430008040033",
  "libraries": {},
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "baseURI()": {
        "details": "Returns the base URI set via {_setBaseURI}. This will be automatically added as a prefix in {tokenURI} to each token's URI, or to the token ID if no specific URI is set for that token ID."
      },
      "burn(uint256)": {
        "details": "Only callable if the media owner is also the creator."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "isApprovedOrOwner(address,uint256)": {
        "details": "Public method which returns whether `spender` is allowed to manage `tokenID`. Requirements: - `tokenID` must exist."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "permit(address,uint256,(uint256,uint8,bytes32,bytes32))": {
        "details": "This method is loosely based on the permit for ERC-20 tokens in  EIP-2612, but modified for ERC-721."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenMetadataURI(uint256)": {
        "returns": {
          "_0": "the metadata URI for the token"
        }
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "This function is an override of the base OZ implementation because we will return the tokenURI even if the media has been burned. In addition, this protocol does not support a base URI, so relevant conditionals are removed.",
        "returns": {
          "_0": "the URI for a token"
        }
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateTokenMetadataURI(uint256,string)": {
        "details": "only callable by approved or owner"
      },
      "updateTokenURI(uint256,string)": {
        "details": "only callable by approved or owner"
      }
    },
    "title": "A media value system, with perpetual equity to creators",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptBid(uint256,(uint256,address,address,address,(uint256)))": {
        "notice": "see IMedia"
      },
      "auctionTransfer(uint256,address)": {
        "notice": "see IMedia"
      },
      "burn(uint256)": {
        "notice": "Burn a token."
      },
      "configure(address)": {
        "notice": "Sets the market contract address. This address is the only permitted address that can call the mutable functions."
      },
      "constructor": {
        "notice": "On deployment, set the market contract address and register the ERC721 metadata interface"
      },
      "getRecentToken(address)": {
        "notice": "see IMedia"
      },
      "mint((string,string,bytes32,bytes32),((uint256),(uint256),(uint256)))": {
        "notice": "see IMedia"
      },
      "mintWithSig(address,(string,string,bytes32,bytes32),((uint256),(uint256),(uint256)),(uint256,uint8,bytes32,bytes32))": {
        "notice": "see IMedia"
      },
      "permit(address,uint256,(uint256,uint8,bytes32,bytes32))": {
        "notice": "See IMedia"
      },
      "removeAsk(uint256)": {
        "notice": "see IMedia"
      },
      "removeBid(uint256)": {
        "notice": "see IMedia"
      },
      "revokeApproval(uint256)": {
        "notice": "Revoke the approvals for a token. The provided `approve` function is not sufficient for this protocol, as it does not allow an approved address to revoke it's own approval. In instances where a 3rd party is interacting on a user's behalf via `permit`, they should revoke their approval once their task is complete as a best practice."
      },
      "setAsk(uint256,(uint256,address))": {
        "notice": "see IMedia"
      },
      "setBid(uint256,(uint256,address,address,address,(uint256)))": {
        "notice": "see IMedia"
      },
      "tokenExists(uint256)": {
        "notice": "Helper to check that token has not been burned or minted"
      },
      "tokenMetadataURI(uint256)": {
        "notice": "Return the metadata URI for a piece of media given the token URI"
      },
      "tokenURI(uint256)": {
        "notice": "return the URI for a particular piece of media with the specified tokenId"
      },
      "updateTokenMetadataURI(uint256,string)": {
        "notice": "see IMedia"
      },
      "updateTokenURI(uint256,string)": {
        "notice": "see IMedia"
      }
    },
    "notice": "This contract provides an interface to mint media with a market owned by the creator.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4228,
        "contract": "src/Media.sol:Media",
        "label": "_supportedInterfaces",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes4,t_bool)"
      },
      {
        "astId": 9089,
        "contract": "src/Media.sol:Media",
        "label": "_holderTokens",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(UintSet)5629_storage)"
      },
      {
        "astId": 9092,
        "contract": "src/Media.sol:Media",
        "label": "_tokenOwners",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(UintToAddressMap)4926_storage"
      },
      {
        "astId": 9096,
        "contract": "src/Media.sol:Media",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 9102,
        "contract": "src/Media.sol:Media",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 9104,
        "contract": "src/Media.sol:Media",
        "label": "_name",
        "offset": 0,
        "slot": "7",
        "type": "t_string_storage"
      },
      {
        "astId": 9106,
        "contract": "src/Media.sol:Media",
        "label": "_symbol",
        "offset": 0,
        "slot": "8",
        "type": "t_string_storage"
      },
      {
        "astId": 9110,
        "contract": "src/Media.sol:Media",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 9112,
        "contract": "src/Media.sol:Media",
        "label": "_baseURI",
        "offset": 0,
        "slot": "10",
        "type": "t_string_storage"
      },
      {
        "astId": 1625,
        "contract": "src/Media.sol:Media",
        "label": "_status",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 1426,
        "contract": "src/Media.sol:Media",
        "label": "_owner",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 12094,
        "contract": "src/Media.sol:Media",
        "label": "marketContract",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 12098,
        "contract": "src/Media.sol:Media",
        "label": "previousTokenOwners",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 12102,
        "contract": "src/Media.sol:Media",
        "label": "tokenCreators",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 12107,
        "contract": "src/Media.sol:Media",
        "label": "_creatorTokens",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_struct(UintSet)5629_storage)"
      },
      {
        "astId": 12111,
        "contract": "src/Media.sol:Media",
        "label": "tokenContentHashes",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 12115,
        "contract": "src/Media.sol:Media",
        "label": "tokenMetadataHashes",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 12119,
        "contract": "src/Media.sol:Media",
        "label": "_tokenMetadataURIs",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 12123,
        "contract": "src/Media.sol:Media",
        "label": "_contentHashes",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 12135,
        "contract": "src/Media.sol:Media",
        "label": "permitNonces",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 12139,
        "contract": "src/Media.sol:Media",
        "label": "mintWithSigNonces",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 12145,
        "contract": "src/Media.sol:Media",
        "label": "_tokenIdTracker",
        "offset": 0,
        "slot": "23",
        "type": "t_struct(Counter)3922_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_struct(UintSet)5629_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableSet.UintSet)",
        "numberOfBytes": "32",
        "value": "t_struct(UintSet)5629_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes4,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Bytes32Set)5365_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Bytes32Set",
        "members": [
          {
            "astId": 5364,
            "contract": "src/Media.sol:Media",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)5171_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Counter)3922_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 3921,
            "contract": "src/Media.sol:Media",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Map)4696_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableMap.Map",
        "members": [
          {
            "astId": 4691,
            "contract": "src/Media.sol:Media",
            "label": "_keys",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Bytes32Set)5365_storage"
          },
          {
            "astId": 4695,
            "contract": "src/Media.sol:Media",
            "label": "_values",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_bytes32,t_bytes32)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Set)5171_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 5166,
            "contract": "src/Media.sol:Media",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 5170,
            "contract": "src/Media.sol:Media",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UintSet)5629_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.UintSet",
        "members": [
          {
            "astId": 5628,
            "contract": "src/Media.sol:Media",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)5171_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UintToAddressMap)4926_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableMap.UintToAddressMap",
        "members": [
          {
            "astId": 4925,
            "contract": "src/Media.sol:Media",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Map)4696_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}