{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822ProxiableUpgradeable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.3) (interfaces/IERC1967.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\n *\n * _Available since v4.9._\n */\ninterface IERC1967Upgradeable {\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Emitted when the beacon is changed.\n     */\n    event BeaconUpgraded(address indexed beacon);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeaconUpgradeable {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.3) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeaconUpgradeable.sol\";\nimport \"../../interfaces/IERC1967Upgradeable.sol\";\nimport \"../../interfaces/draft-IERC1822Upgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/StorageSlotUpgradeable.sol\";\nimport \"../utils/Initializable.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\n    function __ERC1967Upgrade_init() internal onlyInitializing {\n    }\n\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\n    }\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(AddressUpgradeable.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(AddressUpgradeable.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\n        }\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\n        require(AddressUpgradeable.isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return AddressUpgradeable.verifyCallResult(success, returndata, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/UUPSUpgradeable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../interfaces/draft-IERC1822Upgradeable.sol\";\nimport \"../ERC1967/ERC1967UpgradeUpgradeable.sol\";\nimport \"./Initializable.sol\";\n\n/**\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n *\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n * `UUPSUpgradeable` with a custom implementation of upgrades.\n *\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n *\n * _Available since v4.1._\n */\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\n    function __UUPSUpgradeable_init() internal onlyInitializing {\n    }\n\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\n    }\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\n    address private immutable __self = address(this);\n\n    /**\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n     * fail.\n     */\n    modifier onlyProxy() {\n        require(address(this) != __self, \"Function must be called through delegatecall\");\n        require(_getImplementation() == __self, \"Function must be called through active proxy\");\n        _;\n    }\n\n    /**\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\n     * callable on the implementing contract but not through proxies.\n     */\n    modifier notDelegated() {\n        require(address(this) == __self, \"UUPSUpgradeable: must not be called through delegatecall\");\n        _;\n    }\n\n    /**\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\n     */\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\n        return _IMPLEMENTATION_SLOT;\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n     * encoded in `data`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n     * {upgradeTo} and {upgradeToAndCall}.\n     *\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n     *\n     * ```solidity\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\n     * ```\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual;\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlotUpgradeable {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(account),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155Receiver.sol\";\nimport \"../../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../../../utils/Context.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20Burnable is Context, ERC20 {\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual {\n        _spendAllowance(account, _msgSender(), amount);\n        _burn(account, amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.2) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _ownerOf(tokenId);\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner or approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n     */\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        return _owners[tokenId];\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _ownerOf(tokenId) != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\n\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        unchecked {\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\n            // Given that tokens are minted one by one, it is impossible in practice that\n            // this ever happens. Might change if we allow batch minting.\n            // The ERC fails to describe this case.\n            _balances[to] += 1;\n        }\n\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId, 1);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\n\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\n        owner = ERC721.ownerOf(tokenId);\n\n        // Clear approvals\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // Cannot overflow, as that would require more tokens to be burned/transferred\n            // out than the owner initially received through minting and transferring in.\n            _balances[owner] -= 1;\n        }\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId, 1);\n\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n\n        // Clear approvals from the previous owner\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\n            // `from`'s balance is the number of token held, which is at least one before the current\n            // transfer.\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\n            // all 2**256 token ids to be minted, which in practice is impossible.\n            _balances[from] -= 1;\n            _balances[to] += 1;\n        }\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId, 1);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\n     * - When `from` is zero, the tokens will be minted for `to`.\n     * - When `to` is zero, ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 firstTokenId,\n        uint256 batchSize\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\n     * - When `from` is zero, the tokens were minted for `to`.\n     * - When `to` is zero, ``from``'s tokens were burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 firstTokenId,\n        uint256 batchSize\n    ) internal virtual {}\n\n    /**\n     * @dev Unsafe write access to the balances, used by extensions that \"mint\" tokens using an {ownerOf} override.\n     *\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\n     * that `ownerOf(tokenId)` is `a`.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\n        _balances[account] += amount;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165Storage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165Storage.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ERC165.sol\";\n\n/**\n * @dev Storage based implementation of the {IERC165} interface.\n *\n * Contracts may inherit from this and call {_registerInterface} to declare\n * their support of an interface.\n */\nabstract contract ERC165Storage is ERC165 {\n    /**\n     * @dev Mapping of interface ids to whether or not it's supported.\n     */\n    mapping(bytes4 => bool) private _supportedInterfaces;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return super.supportsInterface(interfaceId) || _supportedInterfaces[interfaceId];\n    }\n\n    /**\n     * @dev Registers the contract as an implementer of the interface defined by\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\n     * registering its interface id is not required.\n     *\n     * See {IERC165-supportsInterface}.\n     *\n     * Requirements:\n     *\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\n     */\n    function _registerInterface(bytes4 interfaceId) internal virtual {\n        require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\n        _supportedInterfaces[interfaceId] = true;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableMap.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableMap.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableMap.js.\n\npragma solidity ^0.8.0;\n\nimport \"./EnumerableSet.sol\";\n\n/**\n * @dev Library for managing an enumerable variant of Solidity's\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\n * type.\n *\n * Maps have the following properties:\n *\n * - Entries are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\n *\n *     // Declare a set state variable\n *     EnumerableMap.UintToAddressMap private myMap;\n * }\n * ```\n *\n * The following map types are supported:\n *\n * - `uint256 -> address` (`UintToAddressMap`) since v3.0.0\n * - `address -> uint256` (`AddressToUintMap`) since v4.6.0\n * - `bytes32 -> bytes32` (`Bytes32ToBytes32Map`) since v4.6.0\n * - `uint256 -> uint256` (`UintToUintMap`) since v4.7.0\n * - `bytes32 -> uint256` (`Bytes32ToUintMap`) since v4.7.0\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableMap, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableMap.\n * ====\n */\nlibrary EnumerableMap {\n    using EnumerableSet for EnumerableSet.Bytes32Set;\n\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Map type with\n    // bytes32 keys and values.\n    // The Map implementation uses private functions, and user-facing\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\n    // the underlying Map.\n    // This means that we can only create new EnumerableMaps for types that fit\n    // in bytes32.\n\n    struct Bytes32ToBytes32Map {\n        // Storage of keys\n        EnumerableSet.Bytes32Set _keys;\n        mapping(bytes32 => bytes32) _values;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function set(\n        Bytes32ToBytes32Map storage map,\n        bytes32 key,\n        bytes32 value\n    ) internal returns (bool) {\n        map._values[key] = value;\n        return map._keys.add(key);\n    }\n\n    /**\n     * @dev Removes a key-value pair from a map. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function remove(Bytes32ToBytes32Map storage map, bytes32 key) internal returns (bool) {\n        delete map._values[key];\n        return map._keys.remove(key);\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function contains(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool) {\n        return map._keys.contains(key);\n    }\n\n    /**\n     * @dev Returns the number of key-value pairs in the map. O(1).\n     */\n    function length(Bytes32ToBytes32Map storage map) internal view returns (uint256) {\n        return map._keys.length();\n    }\n\n    /**\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\n     *\n     * Note that there are no guarantees on the ordering of entries inside the\n     * array, and it may change when more entries are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32ToBytes32Map storage map, uint256 index) internal view returns (bytes32, bytes32) {\n        bytes32 key = map._keys.at(index);\n        return (key, map._values[key]);\n    }\n\n    /**\n     * @dev Tries to returns the value associated with `key`. O(1).\n     * Does not revert if `key` is not in the map.\n     */\n    function tryGet(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool, bytes32) {\n        bytes32 value = map._values[key];\n        if (value == bytes32(0)) {\n            return (contains(map, key), bytes32(0));\n        } else {\n            return (true, value);\n        }\n    }\n\n    /**\n     * @dev Returns the value associated with `key`. O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function get(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bytes32) {\n        bytes32 value = map._values[key];\n        require(value != 0 || contains(map, key), \"EnumerableMap: nonexistent key\");\n        return value;\n    }\n\n    /**\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryGet}.\n     */\n    function get(\n        Bytes32ToBytes32Map storage map,\n        bytes32 key,\n        string memory errorMessage\n    ) internal view returns (bytes32) {\n        bytes32 value = map._values[key];\n        require(value != 0 || contains(map, key), errorMessage);\n        return value;\n    }\n\n    // UintToUintMap\n\n    struct UintToUintMap {\n        Bytes32ToBytes32Map _inner;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function set(\n        UintToUintMap storage map,\n        uint256 key,\n        uint256 value\n    ) internal returns (bool) {\n        return set(map._inner, bytes32(key), bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function remove(UintToUintMap storage map, uint256 key) internal returns (bool) {\n        return remove(map._inner, bytes32(key));\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function contains(UintToUintMap storage map, uint256 key) internal view returns (bool) {\n        return contains(map._inner, bytes32(key));\n    }\n\n    /**\n     * @dev Returns the number of elements in the map. O(1).\n     */\n    function length(UintToUintMap storage map) internal view returns (uint256) {\n        return length(map._inner);\n    }\n\n    /**\n     * @dev Returns the element stored at position `index` in the set. O(1).\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintToUintMap storage map, uint256 index) internal view returns (uint256, uint256) {\n        (bytes32 key, bytes32 value) = at(map._inner, index);\n        return (uint256(key), uint256(value));\n    }\n\n    /**\n     * @dev Tries to returns the value associated with `key`. O(1).\n     * Does not revert if `key` is not in the map.\n     */\n    function tryGet(UintToUintMap storage map, uint256 key) internal view returns (bool, uint256) {\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\n        return (success, uint256(value));\n    }\n\n    /**\n     * @dev Returns the value associated with `key`. O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function get(UintToUintMap storage map, uint256 key) internal view returns (uint256) {\n        return uint256(get(map._inner, bytes32(key)));\n    }\n\n    /**\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryGet}.\n     */\n    function get(\n        UintToUintMap storage map,\n        uint256 key,\n        string memory errorMessage\n    ) internal view returns (uint256) {\n        return uint256(get(map._inner, bytes32(key), errorMessage));\n    }\n\n    // UintToAddressMap\n\n    struct UintToAddressMap {\n        Bytes32ToBytes32Map _inner;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function set(\n        UintToAddressMap storage map,\n        uint256 key,\n        address value\n    ) internal returns (bool) {\n        return set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\n        return remove(map._inner, bytes32(key));\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\n        return contains(map._inner, bytes32(key));\n    }\n\n    /**\n     * @dev Returns the number of elements in the map. O(1).\n     */\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\n        return length(map._inner);\n    }\n\n    /**\n     * @dev Returns the element stored at position `index` in the set. O(1).\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\n        (bytes32 key, bytes32 value) = at(map._inner, index);\n        return (uint256(key), address(uint160(uint256(value))));\n    }\n\n    /**\n     * @dev Tries to returns the value associated with `key`. O(1).\n     * Does not revert if `key` is not in the map.\n     */\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\n        return (success, address(uint160(uint256(value))));\n    }\n\n    /**\n     * @dev Returns the value associated with `key`. O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\n        return address(uint160(uint256(get(map._inner, bytes32(key)))));\n    }\n\n    /**\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryGet}.\n     */\n    function get(\n        UintToAddressMap storage map,\n        uint256 key,\n        string memory errorMessage\n    ) internal view returns (address) {\n        return address(uint160(uint256(get(map._inner, bytes32(key), errorMessage))));\n    }\n\n    // AddressToUintMap\n\n    struct AddressToUintMap {\n        Bytes32ToBytes32Map _inner;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function set(\n        AddressToUintMap storage map,\n        address key,\n        uint256 value\n    ) internal returns (bool) {\n        return set(map._inner, bytes32(uint256(uint160(key))), bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function remove(AddressToUintMap storage map, address key) internal returns (bool) {\n        return remove(map._inner, bytes32(uint256(uint160(key))));\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function contains(AddressToUintMap storage map, address key) internal view returns (bool) {\n        return contains(map._inner, bytes32(uint256(uint160(key))));\n    }\n\n    /**\n     * @dev Returns the number of elements in the map. O(1).\n     */\n    function length(AddressToUintMap storage map) internal view returns (uint256) {\n        return length(map._inner);\n    }\n\n    /**\n     * @dev Returns the element stored at position `index` in the set. O(1).\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressToUintMap storage map, uint256 index) internal view returns (address, uint256) {\n        (bytes32 key, bytes32 value) = at(map._inner, index);\n        return (address(uint160(uint256(key))), uint256(value));\n    }\n\n    /**\n     * @dev Tries to returns the value associated with `key`. O(1).\n     * Does not revert if `key` is not in the map.\n     */\n    function tryGet(AddressToUintMap storage map, address key) internal view returns (bool, uint256) {\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(uint256(uint160(key))));\n        return (success, uint256(value));\n    }\n\n    /**\n     * @dev Returns the value associated with `key`. O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function get(AddressToUintMap storage map, address key) internal view returns (uint256) {\n        return uint256(get(map._inner, bytes32(uint256(uint160(key)))));\n    }\n\n    /**\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryGet}.\n     */\n    function get(\n        AddressToUintMap storage map,\n        address key,\n        string memory errorMessage\n    ) internal view returns (uint256) {\n        return uint256(get(map._inner, bytes32(uint256(uint160(key))), errorMessage));\n    }\n\n    // Bytes32ToUintMap\n\n    struct Bytes32ToUintMap {\n        Bytes32ToBytes32Map _inner;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function set(\n        Bytes32ToUintMap storage map,\n        bytes32 key,\n        uint256 value\n    ) internal returns (bool) {\n        return set(map._inner, key, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function remove(Bytes32ToUintMap storage map, bytes32 key) internal returns (bool) {\n        return remove(map._inner, key);\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function contains(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool) {\n        return contains(map._inner, key);\n    }\n\n    /**\n     * @dev Returns the number of elements in the map. O(1).\n     */\n    function length(Bytes32ToUintMap storage map) internal view returns (uint256) {\n        return length(map._inner);\n    }\n\n    /**\n     * @dev Returns the element stored at position `index` in the set. O(1).\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32ToUintMap storage map, uint256 index) internal view returns (bytes32, uint256) {\n        (bytes32 key, bytes32 value) = at(map._inner, index);\n        return (key, uint256(value));\n    }\n\n    /**\n     * @dev Tries to returns the value associated with `key`. O(1).\n     * Does not revert if `key` is not in the map.\n     */\n    function tryGet(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool, uint256) {\n        (bool success, bytes32 value) = tryGet(map._inner, key);\n        return (success, uint256(value));\n    }\n\n    /**\n     * @dev Returns the value associated with `key`. O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function get(Bytes32ToUintMap storage map, bytes32 key) internal view returns (uint256) {\n        return uint256(get(map._inner, key));\n    }\n\n    /**\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryGet}.\n     */\n    function get(\n        Bytes32ToUintMap storage map,\n        bytes32 key,\n        string memory errorMessage\n    ) internal view returns (uint256) {\n        return uint256(get(map._inner, key, errorMessage));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "@zoolabs/solidity/contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IERC20 {\n    // transfer and tranferFrom have been removed, because they don't work on all tokens (some aren't ERC20 complaint).\n    // By removing them you can't accidentally use them.\n    // name, symbol and decimals have been removed, because they are optional and sometimes wrongly implemented (MKR).\n    // Use BoringERC20 with `using BoringERC20 for IERC20` and call `safeTransfer`, `safeTransferFrom`, etc instead.\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /// @notice EIP 2612\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n}\n\ninterface IStrictERC20 {\n    // This is the strict ERC20 interface. Don't use this, certainly not if you don't control the ERC20 token you're calling.\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address _owner) external view returns (uint256 balance);\n    function transfer(address _to, uint256 _value) external returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\n    function approve(address _spender, uint256 _value) external returns (bool success);\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /// @notice EIP 2612\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n}\n"
    },
    "src/Auction.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n// Forked from https://github.com/ourzora/auction-house @ 54a12ec1a6cf562e49f0a4917990474b11350a2d\n\npragma solidity >=0.8.4;\npragma experimental ABIEncoderV2;\n\nimport { Counters } from \"@openzeppelin/contracts/utils/Counters.sol\";\nimport { IERC165 } from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { IERC721 } from \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { ReentrancyGuard } from \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport { SafeERC20 } from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport { SafeMath } from \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport { IMarket, Decimal } from \"./interfaces/IMarket.sol\";\nimport { IMedia } from \"./interfaces/IMedia.sol\";\nimport { IAuctionHouse } from \"./interfaces/IAuctionHouse.sol\";\nimport \"./console.sol\";\n\ninterface IMediaExtended is IMedia {\n    function marketContract() external returns (address);\n}\n\n/**\n * @title Zoo's auction house, enabling players to buy, sell and trade NFTs\n */\ncontract Auction is IAuctionHouse, ReentrancyGuard, Ownable {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n    using Counters for Counters.Counter;\n\n    // The minimum amount of time left in an auction after a new bid is created\n    uint256 public timeBuffer;\n\n    // The minimum percentage difference between the last bid amount and the current bid.\n    uint8 public minBidIncrementPercentage;\n\n    // The address of the Media protocol to use via this contract\n    address public mediaAddress;\n\n    // The address of the Token contract\n    address public tokenAddress;\n\n    // A mapping of all of the auctions currently running.\n    mapping(uint256 => IAuctionHouse.Auction) public auctions;\n\n    bytes4 constant interfaceID = 0x80ac58cd; // 721 interface id\n\n    Counters.Counter private _auctionIDTracker;\n\n    /**\n     * @notice Require that the specified auction exists\n     */\n    modifier auctionExists(uint256 auctionID) {\n        require(_exists(auctionID), \"Auction doesn't exist\");\n        _;\n    }\n\n    function getAllAuctions() public view returns(IAuctionHouse.Auction[] memory) {\n        IAuctionHouse.Auction[] memory allAuctions = new IAuctionHouse.Auction[](_auctionIDTracker.current());\n        \n        for (uint256 i = 0; i < _auctionIDTracker.current(); i++) {\n            if(auctions[i + 1].addresses.tokenOwner != address(0)){\n                allAuctions[i] = auctions[i + 1];\n            }\n        }\n\n        return allAuctions;\n    }\n\n    /*\n     * Configure ZooAuction to work with the proper media and token contract\n     */\n    function configure(address _mediaAddress, address _tokenAddress) public onlyOwner {\n        require(\n            IERC165(_mediaAddress).supportsInterface(interfaceID),\n            \"Doesn't support NFT interface\"\n        );\n        mediaAddress = _mediaAddress;\n        tokenAddress = _tokenAddress;\n        timeBuffer = 15 * 60; // extend 15 minutes after every bid made in last 15 minutes\n        minBidIncrementPercentage = 5; // 5%\n    }\n\n    /**\n     * @notice Create an auction.\n     * @dev Store the auction details in the auctions mapping and emit an AuctionCreated event.\n     * If there is no curator, or if the curator is the auction creator, automatically approve the auction.\n     */\n    function createAuction(\n        uint256 tokenID,\n        address tokenContract,\n        uint256 duration,\n        uint256 reservePrice,\n        address payable curator,\n        uint8 curatorFeePercentage,\n        address auctionCurrency\n    ) public override nonReentrant returns (uint256) {\n        require(\n            IERC165(tokenContract).supportsInterface(interfaceID),\n            \"tokenContract does not support ERC721 interface\"\n        );\n        require(\n            curatorFeePercentage < 100,\n            \"curatorFeePercentage must be less than 100\"\n        );\n        address tokenOwner = IERC721(tokenContract).ownerOf(tokenID);\n        require(\n            msg.sender == IERC721(tokenContract).getApproved(tokenID) ||\n                msg.sender == tokenOwner,\n            \"Caller must be approved or owner for token id\"\n        );\n        _auctionIDTracker.increment();\n\n        uint256 auctionID = _auctionIDTracker.current();\n\n        auctions[auctionID].auctionId = auctionID;\n        auctions[auctionID].tokenID = tokenID;\n        auctions[auctionID].approved = false;\n        auctions[auctionID].amount = 0;\n        auctions[auctionID].duration = duration;\n        auctions[auctionID].firstBidTime = 0;\n        auctions[auctionID].reservePrice = reservePrice;\n        auctions[auctionID].curatorFeePercentage = curatorFeePercentage;\n        auctions[auctionID].addresses = AuctionAddresses({tokenOwner: tokenOwner,auctionCurrency: auctionCurrency,curator: curator,tokenContract: tokenContract,bidder: payable(address(0))});\n\n        IERC721(tokenContract).transferFrom(tokenOwner, address(this), tokenID);\n\n        emit AuctionCreated(\n            auctionID,\n            tokenID,\n            tokenContract,\n            duration,\n            reservePrice,\n            tokenOwner,\n            curator,\n            curatorFeePercentage,\n            auctionCurrency\n        );\n\n        if (\n            auctions[auctionID].addresses.curator == address(0) || curator == tokenOwner\n        ) {\n            _approveAuction(auctionID, true);\n        }\n\n        return auctionID;\n    }\n\n    /**\n     * @notice Approve an auction, opening up the auction for bids.\n     * @dev Only callable by the curator. Cannot be called if the auction has already started.\n     */\n    function setAuctionApproval(uint256 auctionID, bool approved)\n        external\n        override\n        auctionExists(auctionID)\n    {\n        require(\n            msg.sender == auctions[auctionID].addresses.curator,\n            \"Must be auction curator\"\n        );\n        require(\n            auctions[auctionID].firstBidTime == 0,\n            \"Auction has already started\"\n        );\n        _approveAuction(auctionID, approved);\n    }\n\n    function setAuctionReservePrice(uint256 auctionID, uint256 reservePrice)\n        external\n        override\n        auctionExists(auctionID)\n    {\n        require(\n            msg.sender == auctions[auctionID].addresses.curator ||\n                msg.sender == auctions[auctionID].addresses.tokenOwner,\n            \"Must be auction curator or token owner\"\n        );\n        require(\n            auctions[auctionID].firstBidTime == 0,\n            \"Auction has already started\"\n        );\n\n        auctions[auctionID].reservePrice = reservePrice;\n\n        emit AuctionReservePriceUpdated(\n            auctionID,\n            auctions[auctionID].tokenID,\n            auctions[auctionID].addresses.tokenContract,\n            reservePrice\n        );\n    }\n\n    /**\n     * @notice Create a bid on a token, with a given amount.\n     * @dev If provided a valid bid, transfers the provided amount to this contract.\n     * If the auction is run in native ETH, the ETH is wrapped so it can be identically to other\n     * auction currencies in this contract.\n     */\n    function createBid(uint256 auctionID, uint256 amount)\n        external\n        payable\n        override\n        auctionExists(auctionID)\n        nonReentrant\n    {\n        address payable lastBidder = auctions[auctionID].addresses.bidder;\n\n        require(\n            auctions[auctionID].approved,\n            \"Auction must be approved by curator\"\n        );\n        require(\n            auctions[auctionID].firstBidTime == 0 ||\n                block.timestamp <\n                auctions[auctionID].firstBidTime.add(\n                    auctions[auctionID].duration\n                ),\n            \"Auction expired\"\n        );\n\n        require(\n            amount >= auctions[auctionID].reservePrice,\n            \"Must send at least reservePrice\"\n        );\n        require(\n            amount >=\n                auctions[auctionID].amount.add(\n                    auctions[auctionID]\n                    .amount\n                    .mul(minBidIncrementPercentage)\n                    .div(100)\n                ),\n            \"Must send more than last bid by minBidIncrementPercentage amount\"\n        );\n\n        // For Zoo Protocol, ensure that the bid is valid for the current bidShare configuration\n        if (auctions[auctionID].addresses.tokenContract == tokenAddress) {\n            require(\n                IMarket(IMediaExtended(tokenAddress).marketContract())\n                    .isValidBid(auctions[auctionID].tokenID, amount),\n                \"Bid invalid for share splitting\"\n            );\n        }\n\n        // If this is the first valid bid, we should set the starting time now.\n        // If it's not, then we should refund the last bidder\n        if (auctions[auctionID].firstBidTime == 0) {\n            auctions[auctionID].firstBidTime = block.timestamp;\n        } else if (lastBidder != address(0)) {\n            _handleOutgoingBid(\n                lastBidder,\n                auctions[auctionID].amount,\n                auctions[auctionID].addresses.auctionCurrency\n            );\n        }\n\n        _handleIncomingBid(amount, tokenAddress);\n\n        auctions[auctionID].amount = amount;\n        auctions[auctionID].addresses.bidder = payable(msg.sender);\n\n        bool extended = false;\n        // at this point we know that the timestamp is less than start + duration (since the auction would be over, otherwise)\n        // we want to know by how much the timestamp is less than start + duration\n        // if the difference is less than the timeBuffer, increase the duration by the timeBuffer\n        if (\n            auctions[auctionID]\n            .firstBidTime\n            .add(auctions[auctionID].duration)\n            .sub(block.timestamp) < timeBuffer\n        ) {\n            // Playing code golf for gas optimization:\n            // uint256 expectedEnd = auctions[auctionID].firstBidTime.add(auctions[auctionID].duration);\n            // uint256 timeRemaining = expectedEnd.sub(block.timestamp);\n            // uint256 timeToAdd = timeBuffer.sub(timeRemaining);\n            // uint256 newDuration = auctions[auctionID].duration.add(timeToAdd);\n            uint256 oldDuration = auctions[auctionID].duration;\n            auctions[auctionID].duration = oldDuration.add(\n                timeBuffer.sub(\n                    auctions[auctionID].firstBidTime.add(oldDuration).sub(\n                        block.timestamp\n                    )\n                )\n            );\n            extended = true;\n        }\n\n        auctions[auctionID].auctionHistory.push(AuctionHistory(\n            {\n                amount: amount,\n                bidder: msg.sender,\n                blockNumber: uint40(block.number),\n                time: uint40(block.timestamp)\n            }\n        ));\n\n        emit AuctionBid(\n            auctionID,\n            auctions[auctionID].tokenID,\n            auctions[auctionID].addresses.tokenContract,\n            msg.sender,\n            amount,\n            lastBidder == address(0), // firstBid boolean\n            extended\n        );\n\n        if (extended) {\n            emit AuctionDurationExtended(\n                auctionID,\n                auctions[auctionID].tokenID,\n                auctions[auctionID].addresses.tokenContract,\n                auctions[auctionID].duration\n            );\n        }\n    }\n\n    /**\n     * @notice End an auction, finalizing the bid on Zoo if applicable and paying out the respective parties.\n     * @dev If for some reason the auction cannot be finalized (invalid token recipient, for example),\n     * The auction is reset and the NFT is transferred back to the auction creator.\n     */\n    function endAuction(uint256 auctionID)\n        external\n        override\n        auctionExists(auctionID)\n        nonReentrant\n    {\n        require(\n            uint256(auctions[auctionID].firstBidTime) != 0,\n            \"Auction hasn't begun\"\n        );\n        require(\n            block.timestamp >=\n                auctions[auctionID].firstBidTime.add(\n                    auctions[auctionID].duration\n                ),\n            \"Auction hasn't completed\"\n        );\n\n        address currency = tokenAddress;\n\n        uint256 curatorFee = 0;\n\n        uint256 tokenOwnerProfit = auctions[auctionID].amount;\n\n        if (auctions[auctionID].addresses.tokenContract == tokenAddress) {\n            // If the auction is running on zoo, settle it on the protocol\n            (\n                bool success,\n                uint256 remainingProfit\n            ) = _handleZooAuctionSettlement(auctionID);\n            tokenOwnerProfit = remainingProfit;\n            if (success != true) {\n                _handleOutgoingBid(\n                    auctions[auctionID].addresses.bidder,\n                    auctions[auctionID].amount,\n                    auctions[auctionID].addresses.auctionCurrency\n                );\n                _cancelAuction(auctionID);\n                return;\n            }\n        } else {\n            // Otherwise, transfer the token to the winner and pay out the participants below\n            try\n                IERC721(auctions[auctionID].addresses.tokenContract).safeTransferFrom(\n                    address(this),\n                    auctions[auctionID].addresses.bidder,\n                    auctions[auctionID].tokenID\n                )\n            {} catch {\n                _handleOutgoingBid(\n                    auctions[auctionID].addresses.bidder,\n                    auctions[auctionID].amount,\n                    auctions[auctionID].addresses.auctionCurrency\n                );\n                _cancelAuction(auctionID);\n                return;\n            }\n        }\n\n        if (auctions[auctionID].addresses.curator != address(0)) {\n            curatorFee = tokenOwnerProfit\n            .mul(auctions[auctionID].curatorFeePercentage)\n            .div(100);\n            tokenOwnerProfit = tokenOwnerProfit.sub(curatorFee);\n            _handleOutgoingBid(\n                auctions[auctionID].addresses.curator,\n                curatorFee,\n                auctions[auctionID].addresses.auctionCurrency\n            );\n        }\n        _handleOutgoingBid(\n            auctions[auctionID].addresses.tokenOwner,\n            tokenOwnerProfit,\n            auctions[auctionID].addresses.auctionCurrency\n        );\n\n        emit AuctionEnded(\n            auctionID,\n            auctions[auctionID].tokenID,\n            auctions[auctionID].addresses.tokenContract,\n            auctions[auctionID].addresses.tokenOwner,\n            auctions[auctionID].addresses.curator,\n            auctions[auctionID].addresses.bidder,\n            tokenOwnerProfit,\n            curatorFee,\n            currency\n        );\n        delete auctions[auctionID];\n    }\n\n    /**\n     * @notice Cancel an auction.\n     * @dev Transfers the NFT back to the auction creator and emits an AuctionCanceled event\n     */\n    function cancelAuction(uint256 auctionID)\n        external\n        override\n        nonReentrant\n        auctionExists(auctionID)\n    {\n        require(\n            auctions[auctionID].addresses.tokenOwner == msg.sender ||\n                auctions[auctionID].addresses.curator == msg.sender,\n            \"Can only be called by auction creator or curator\"\n        );\n        require(\n            uint256(auctions[auctionID].firstBidTime) == 0,\n            \"Can't cancel an auction once it's begun\"\n        );\n        _cancelAuction(auctionID);\n    }\n\n    /**\n     * @dev Given an amount and a currency, transfer the currency to this contract.\n     * If the currency is ETH (0x0), attempt to wrap the amount as WETH\n     */\n    function _handleIncomingBid(uint256 amount, address currency) internal {\n        // We must check the balance that was actually transferred to the auction,\n        // as some tokens impose a transfer fee and would not actually transfer the\n        // full amount to the market, resulting in potentally locked funds\n        IERC20 token = IERC20(currency);\n\n        uint256 beforeBalance = token.balanceOf(address(this));\n\n        token.safeTransferFrom(msg.sender, address(this), amount);\n\n        uint256 afterBalance = token.balanceOf(address(this));\n        require(\n            beforeBalance.add(amount) == afterBalance,\n            \"Token transfer call did not transfer expected amount\"\n        );\n        // }\n    }\n\n    function _handleOutgoingBid(\n        address to,\n        uint256 amount,\n        address currency\n    ) internal {\n        IERC20(currency).safeTransfer(to, amount);\n    }\n\n    function _safeTransferETH(address to, uint256 value)\n        internal\n        returns (bool)\n    {\n        (bool success, ) = to.call{value: value}(new bytes(0));\n        return success;\n    }\n\n    function _cancelAuction(uint256 auctionID) internal {\n        address tokenOwner = auctions[auctionID].addresses.tokenOwner;\n        IERC721(auctions[auctionID].addresses.tokenContract).safeTransferFrom(\n            address(this),\n            tokenOwner,\n            auctions[auctionID].tokenID\n        );\n\n        emit AuctionCanceled(\n            auctionID,\n            auctions[auctionID].tokenID,\n            auctions[auctionID].addresses.tokenContract,\n            tokenOwner\n        );\n        delete auctions[auctionID];\n    }\n\n    function _approveAuction(uint256 auctionID, bool approved) internal {\n        auctions[auctionID].approved = approved;\n        emit AuctionApprovalUpdated(\n            auctionID,\n            auctions[auctionID].tokenID,\n            auctions[auctionID].addresses.tokenContract,\n            approved\n        );\n    }\n\n    function _exists(uint256 auctionID) internal view returns (bool) {\n        return auctions[auctionID].addresses.tokenOwner != address(0);\n    }\n\n    function _handleZooAuctionSettlement(uint256 auctionID)\n        internal\n        returns (bool, uint256)\n    {\n        address currency = tokenAddress;\n        // ? tokenAddress\n        // : auctions[auctionID].auctionCurrency;\n\n        IMarket.Bid memory bid = IMarket.Bid({\n            amount: auctions[auctionID].amount,\n            currency: currency,\n            bidder: address(this),\n            recipient: auctions[auctionID].addresses.bidder,\n            sellOnShare: Decimal.D256(0),\n            offline: false\n        });\n\n        IERC20(currency).approve(\n            IMediaExtended(tokenAddress).marketContract(),\n            bid.amount\n        );\n        IMedia(tokenAddress).setBid(auctions[auctionID].tokenID, bid);\n        uint256 beforeBalance = IERC20(currency).balanceOf(address(this));\n        try\n            IMedia(tokenAddress).acceptBid(auctions[auctionID].tokenID, bid)\n        {} catch {\n            // If the underlying NFT transfer here fails, we should cancel the auction and refund the winner\n            IMediaExtended(tokenAddress).removeBid(auctions[auctionID].tokenID);\n            return (false, 0);\n        }\n        uint256 afterBalance = IERC20(currency).balanceOf(address(this));\n\n        // We have to calculate the amount to send to the token owner here in case there was a\n        // sell-on share on the token\n        return (true, afterBalance.sub(beforeBalance));\n    }\n\n    // TODO: consider reverting if the message sender is not WETH\n    receive() external payable {}\n\n    fallback() external payable {}\n}\n"
    },
    "src/Bridge.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.4;\n\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { ZooKeeper } from \"./ZooKeeper.sol\";\nimport { IERC20Bridgable } from \"./interfaces/IERC20Bridgable.sol\";\nimport { SafeERC20 } from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { IZoo } from \"./interfaces/IZoo.sol\";\nimport { SafeMath } from \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\nimport \"./console.sol\";\n\ncontract Bridge is Ownable {\n    using SafeERC20 for IERC20;\n    using SafeMath for uint256;\n\n    // Supported token types\n    enum Type {\n        ERC20,\n        ERC721\n    }\n\n    // Supported tokens\n    struct Token {\n        Type kind;\n        uint256 id;\n        uint chainId;\n        address tokenAddress;\n        bool enabled;\n    }\n\n    // Unique Swap Tx\n    struct Transaction {\n        uint256 id;\n        Token tokenA;\n        Token tokenB;\n        address sender;\n        address recipient;\n        uint256 amount;\n        uint256 nonce;\n    }\n\n    // Supported tokens\n    mapping (uint256 => Token) public tokens;\n\n    // Transactions\n    mapping (uint256 => Transaction) public transactions;\n\n    // Events\n    event AddToken(uint chainId, address tokenAddress);\n    event RemoveToken(uint chainId, address tokenAddress);\n    event Mint(uint chainId, address tokenAddress, address to, uint256 amount);\n    event Burn(uint chainId, address tokenAddress, address from, uint256 amount);\n    event Swap(uint256 tokenA, uint256 tokenB, uint256 txID, address sender, address recipient, uint256 amount);\n\n    // DAO address\n    address public daoAddress;\n\n    // DAO share\n    uint256 public daoShare;\n\n    constructor(address _daoAddress, uint _daoShare) {\n        daoAddress = _daoAddress;\n        daoShare = _daoShare;\n    }\n\n    // Hash chain, address to a unique identifier\n    function tokenID(Token memory token) internal pure returns (uint256) {\n        return uint256(keccak256(abi.encodePacked(token.chainId, token.tokenAddress)));\n    }\n\n    // Hash TX to unique identifier\n    function txID(Transaction memory t) internal pure returns (uint256) {\n        return uint256(keccak256(abi.encodePacked(t.tokenA.id, t.tokenB.id, t.sender, t.recipient, t.amount, t.nonce)));\n    }\n\n    // Check if chain ID and token is supported\n    function enabledToken(Token memory token) internal view returns (bool) {\n        return tokens[tokenID(token)].enabled;\n    }\n\n    // Compare chain ID to local chain ID\n    function currentChain(uint _chainId) internal view returns (bool) {\n        return keccak256(abi.encodePacked(block.chainid)) == keccak256(abi.encodePacked(_chainId));\n    }\n\n    // Enable swapping a new ERC20 token\n    function setToken(Token memory token) public onlyOwner {\n        console.log(\"setToken\", token.chainId, token.tokenAddress);\n        require(token.tokenAddress != address(0), \"Token address must not be zero\");\n\n        require(token.chainId != 0, \"Chain ID must not be zero\");\n\n        // Update token configuration save ID\n        token.id = tokenID(token);\n        tokens[token.id] = token;\n        console.log(\"Save token\");\n\n        console.log(\"Check enabled Token\");\n        if (enabledToken(token)) {\n            console.log(\"AddToken\");\n            emit AddToken(token.chainId, token.tokenAddress);\n        } else {\n            console.log(\"RemoveToken\");\n            emit RemoveToken(token.chainId, token.tokenAddress);\n        }\n    }\n\n    // Swap from tokenA to tokenB on another chain. User initiated function, relies on msg.sender\n    function swap(Token memory tokenA, Token memory tokenB, address recipient, uint256 amount, uint256 nonce) public {\n        require(currentChain(tokenA.chainId) || currentChain(tokenB.chainId), \"Wrong chain\");\n        console.log(\"swap\", msg.sender, recipient, nonce);\n        require(enabledToken(tokenA), \"Swap from token not enabled\");\n        require(enabledToken(tokenB), \"Swap to token not enabled\");\n        require(amount > 0, \"Amount must be greater than zero\");\n        require(recipient != address(0), \"Recipient should not be zero address\");\n\n        // Save transaction\n        Transaction memory t = Transaction(0, tokenA, tokenB, msg.sender, recipient, amount, nonce);\n        t.id = txID(t);\n\n        // Ensure this is a new swap request\n        // There could be an error here as the transaction itself is created\n        // and then this check is run.\n        // TODO: revert the swap\n        require(transactions[t.id].nonce != nonce, \"Nonce already used\");\n        transactions[t.id] = t;\n\n        // Emit all swap related events so listening contracts can mint on other side\n        emit Swap(tokenID(tokenA), tokenID(tokenB), t.id, msg.sender, recipient, amount);\n\n        // Burn original tokens\n        if (currentChain(tokenA.chainId)) {\n            console.log(\"burn\", msg.sender, amount);\n            burn(tokenA, msg.sender, amount);\n        } else\n\n        // Mint new tokens\n        if (currentChain(tokenB.chainId)) {\n            console.log(\"mint\", msg.sender, amount);\n            mint(tokenB, msg.sender, amount);\n        }\n    }\n\n    // Internal function to burn token + emit event\n    function burn(Token memory token, address owner, uint256 amount) internal {\n        console.log(\"burn\", token.tokenAddress, owner, amount);\n\n        if (token.kind == Type.ERC20) {\n            IERC20Bridgable(token.tokenAddress).bridgeBurn(owner, amount);\n        } else if (token.kind == Type.ERC721) {\n            // ZooKeeper(token.tokenAddress).swap(owner, token.id);\n        }\n\n        emit Burn(token.chainId, token.tokenAddress, owner, token.id);\n    }\n\n    // Mint new tokens for user after burn + swap on alternate chain\n    function mint(Token memory token, address owner, uint256 amount) public onlyOwner {\n        require(owner != address(0));\n        require(amount > 0);\n        require(currentChain(token.chainId), \"Token not on chain\");\n\n        if (token.kind == Type.ERC20) {\n            uint256 fee = daoShare.div(10000).mul(amount);\n            IERC20Bridgable(token.tokenAddress).bridgeMint(owner, amount.sub(fee));\n            IERC20Bridgable(token.tokenAddress).bridgeMint(daoAddress, fee);\n        } else {\n            // ZooKeeper(token.id).remint(owner, token, token.chainId);\n        }\n        emit Mint(token.chainId, token.tokenAddress, owner, amount);\n    }\n}\n"
    },
    "src/console.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.4.22 <0.9.0;\n\nlibrary console {\n\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\n\n\tfunction _sendLogPayload(bytes memory payload) private view {\n\t\tuint256 payloadLength = payload.length;\n\t\taddress consoleAddress = CONSOLE_ADDRESS;\n\t\tassembly {\n\t\t\tlet payloadStart := add(payload, 32)\n\t\t\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\n\t\t}\n\t}\n\n\tfunction log() internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log()\"));\n\t}\n\n\tfunction logInt(int p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(int)\", p0));\n\t}\n\n\tfunction logUint(uint p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n\t}\n\n\tfunction logString(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction logBool(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction logAddress(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction logBytes(bytes memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n\t}\n\n\tfunction logBytes1(bytes1 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n\t}\n\n\tfunction logBytes2(bytes2 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n\t}\n\n\tfunction logBytes3(bytes3 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n\t}\n\n\tfunction logBytes4(bytes4 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n\t}\n\n\tfunction logBytes5(bytes5 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n\t}\n\n\tfunction logBytes6(bytes6 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n\t}\n\n\tfunction logBytes7(bytes7 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n\t}\n\n\tfunction logBytes8(bytes8 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n\t}\n\n\tfunction logBytes9(bytes9 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n\t}\n\n\tfunction logBytes10(bytes10 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n\t}\n\n\tfunction logBytes11(bytes11 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n\t}\n\n\tfunction logBytes12(bytes12 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n\t}\n\n\tfunction logBytes13(bytes13 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n\t}\n\n\tfunction logBytes14(bytes14 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n\t}\n\n\tfunction logBytes15(bytes15 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n\t}\n\n\tfunction logBytes16(bytes16 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n\t}\n\n\tfunction logBytes17(bytes17 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n\t}\n\n\tfunction logBytes18(bytes18 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n\t}\n\n\tfunction logBytes19(bytes19 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n\t}\n\n\tfunction logBytes20(bytes20 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n\t}\n\n\tfunction logBytes21(bytes21 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n\t}\n\n\tfunction logBytes22(bytes22 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n\t}\n\n\tfunction logBytes23(bytes23 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n\t}\n\n\tfunction logBytes24(bytes24 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n\t}\n\n\tfunction logBytes25(bytes25 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n\t}\n\n\tfunction logBytes26(bytes26 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n\t}\n\n\tfunction logBytes27(bytes27 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n\t}\n\n\tfunction logBytes28(bytes28 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n\t}\n\n\tfunction logBytes29(bytes29 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n\t}\n\n\tfunction logBytes30(bytes30 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n\t}\n\n\tfunction logBytes31(bytes31 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n\t}\n\n\tfunction logBytes32(bytes32 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n\t}\n\n\tfunction log(uint p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n\t}\n\n\tfunction log(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction log(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction log(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction log(uint p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n\t}\n\n\tfunction log(address p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint)\", p0, p1));\n\t}\n\n\tfunction log(address p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n\t}\n\n\tfunction log(address p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n\t}\n\n\tfunction log(address p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n}\n"
    },
    "src/DAO.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.4;\npragma experimental ABIEncoderV2;\n\nimport { OwnableUpgradeable } from '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\nimport { UUPSUpgradeable } from '@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol';\n\ncontract DAO is UUPSUpgradeable, OwnableUpgradeable {\n  function _authorizeUpgrade(address newImplementation) internal override onlyOwner { }\n\n  function initialize() public initializer {\n    __Ownable_init_unchained();\n  }\n}\n"
    },
    "src/Decimal.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\npragma solidity >=0.8.4;\npragma experimental ABIEncoderV2;\n\n// Copyright 2019 dYdX Trading Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n// http://www.apache.org/licenses/LICENSE-2.0\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * NOTE: This file is a clone of the dydx protocol's Decimal.sol contract. It was forked from https://github.com/dydxprotocol/solo\n * at commit 2d8454e02702fe5bc455b848556660629c3cad36\n *\n * It has not been modified other than to use a newer solidity in the pragma to match the rest of the contract suite of this project\n */\n\nimport { SafeMath } from \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport { Math } from \"./Math.sol\";\n\n/**\n * @title Decimal\n *\n * Library that defines a fixed-point number with 18 decimal places.\n */\nlibrary Decimal {\n    using SafeMath for uint256;\n\n    // ============ Constants ============\n\n    uint256 constant BASE_POW = 18;\n    uint256 constant BASE = 10**BASE_POW;\n\n    // ============ Structs ============\n\n    struct D256 {\n        uint256 value;\n    }\n\n    // ============ Functions ============\n\n    function one() internal pure returns (D256 memory) {\n        return D256({value: BASE});\n    }\n\n    function onePlus(D256 memory d) internal pure returns (D256 memory) {\n        return D256({value: d.value.add(BASE)});\n    }\n\n    function mul(uint256 target, D256 memory d)\n        internal\n        pure\n        returns (uint256)\n    {\n        return Math.getPartial(target, d.value, BASE);\n    }\n\n    function div(uint256 target, D256 memory d)\n        internal\n        pure\n        returns (uint256)\n    {\n        return Math.getPartial(target, BASE, d.value);\n    }\n}\n"
    },
    "src/Drop.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.4;\n\nimport { SafeMath } from \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { Decimal } from \"./Decimal.sol\";\nimport { IMarket } from \"./interfaces/IMarket.sol\";\nimport { IMedia } from \"./interfaces/IMedia.sol\";\nimport { IZoo } from \"./interfaces/IZoo.sol\";\nimport { IDrop } from \"./interfaces/IDrop.sol\";\nimport { Counters } from \"@openzeppelin/contracts/utils/Counters.sol\";\nimport { IKeeper } from \"./interfaces/IKeeper.sol\";\n\ncontract Drop is IDrop, Ownable {\n    using SafeMath for uint256;\n\n    using Counters for Counters.Counter;\n\n    Counters.Counter public eggId;\n\n struct  DropData {\n    string image;\n    string description;\n  }\n\n    // Title of drop\n    string override public title;\n\n    mapping(string => DropData) public dropInformation;\n\n    string public rareAnimal;\n\n    uint256 randomLimit;\n\n    uint256 public override silverEgg;\n\n    // Address of ZooKeeper contract\n    address public keeperAddress;\n\n    address public override EggDropAddress;\n\n    // mapping of Rarity name to Rarity\n    mapping (string => IZoo.Rarity) public rarities;\n\n    mapping (string => string[]) public rarityAnimals;\n\n    // Rarity sorted by most rare -> least rare\n    string[] public raritySorted;\n\n    // mapping of Egg name to Egg\n    mapping (uint256 => Egg) public eggs;\n\n    // mapping of Animal name to Animal\n    mapping (string => Animal) public animals;\n\n    // mapping of animal name to Hybrid\n    mapping (string => Hybrid) public hybrids;\n\n    // mapping of (parent + parent) to Hybrid\n    mapping (string => Hybrid) public hybridParents;\n\n    mapping (string => IZoo.URIs) public adultHoodURIs;\n\n    mapping (string => IZoo.StageYields) public animalStageYields;\n\n\n    // Ensure only ZK can call method\n    modifier onlyZoo() {\n        require(\n            keeperAddress == msg.sender, \"Only ZooKeeper can call this method\"\n        );\n        _;\n    }\n\n    constructor(string memory _title, string memory description, string memory image) {\n        title = _title;\n        randomLimit = 3;\n        rareAnimal = \"Javan Rhino\";\n        dropInformation[_title] = DropData({description: description, image: image});\n    }\n\n    function modifyDrop (string memory description, string memory image) public onlyOwner {\n        dropInformation[title] = DropData({description: description, image: image});\n  }\n\n    function getAdultHoodURIs(string memory name, IZoo.AdultHood stage) public view override returns(IMedia.MediaData memory){\n        IZoo.URIs storage data = adultHoodURIs[name];\n        if(stage == IZoo.AdultHood.BABY){\n            return data.dataBaby;\n        }\n        else if(stage == IZoo.AdultHood.TEEN){\n            return data.dataTeen;\n        }\n        else{\n            return data.dataAdult;\n        }\n    }\n\n\n    function totalSupply() public override view returns (uint256) {\n        return eggId.current();\n    }\n\n    function getAllEggs() public view returns(Egg[] memory) {\n        Egg[] memory availableEggs = new Egg[](eggId.current());\n        \n        for (uint256 i = 0; i < eggId.current(); i++) {\n            if(eggs[i + 1].exist == true){\n                availableEggs[i] = eggs[i + 1];\n            }\n        }\n\n        return availableEggs;\n    }\n\n    // Set currentSupply base and hybrid egg\n    function configureEggs(uint256 _silverEgg) public eggExists(_silverEgg) onlyOwner {\n        silverEgg = _silverEgg;\n    }\n\n    function changeRareAnimal(string memory name) public onlyOwner {\n        rareAnimal = name;\n    }\n\n    // Configure current ZooKeeper\n    function configureKeeper(address zooKeeper) public onlyOwner {\n        keeperAddress = zooKeeper;\n    }\n\n    function configureEggDropper(address eggdropper) public onlyOwner {\n        EggDropAddress = eggdropper;\n    }\n\n    function changeRandomLimit(uint256 limit) override public {\n        require(msg.sender == owner() || msg.sender == EggDropAddress || msg.sender == keeperAddress, \"not allowed\");\n        randomLimit = limit;\n    }\n\n    function eggStatus(uint256 egg, bool status) public onlyOwner {\n        eggs[egg].exist = status;\n    }\n\n\n    // Add or configure a given rarity\n    function setRarity(string memory name, uint256 probability, uint256 yields, uint256 boost) public onlyOwner {\n        require(probability > 0, \"Rarity must be over zero\");\n\n        IZoo.Rarity memory rarity = IZoo.Rarity({\n            name: name,\n            probability: probability,\n            yields: yields,\n            boost: boost\n        });\n\n        // Save rarity\n        rarities[rarity.name] = rarity;\n        raritySorted.push(rarity.name);\n    }\n\n    // Add or configure a given kind of egg\n    function setEgg(string memory name, uint256 price, uint256 supply, string memory tokenURI, string memory metadataURI) public onlyOwner {\n        eggId.increment();\n        uint256 id = eggId.current();\n        Egg memory egg;\n        egg.name = name;\n        egg.id = id;\n        egg.data = getMediaData(tokenURI, metadataURI);\n        egg.bidShares = getBidShares();\n        egg.price = price;\n        egg.supply = supply;\n        egg.exist = true;\n        eggs[id] = egg;\n    }\n\n    function setEggPrice(uint256 id, uint256 price) public eggExists(id) onlyOwner {\n       eggs[id].price = price;\n    }\n\n    function setEggURIs(uint256 id, string memory tokenURI, string memory metadataURI) public eggExists(id) onlyOwner{\n       eggs[id].data = eggs[id].data = getMediaData(tokenURI, metadataURI);\n    }\n\n    function setAnimalURIs(string memory name, string memory adultTokenURI, string memory adultMetadataURI, string memory teenTokenURI, string memory teenMetadataURI, string memory babyTokenURI, string memory babyMetadataURI) public onlyOwner {\n        adultHoodURIs[name] = IZoo.URIs({dataBaby: getMediaData(babyTokenURI, babyMetadataURI), dataTeen: getMediaData(teenTokenURI, teenMetadataURI), dataAdult: getMediaData(adultTokenURI, adultMetadataURI)});\n    }\n\n    function setStageYields(string memory name, uint256 yieldBaby, uint256 boostBaby, uint256 yieldTeen, uint256 boostTeen, uint256 yieldAdult, uint256 boostAdult) public onlyOwner {\n        animalStageYields[name] = IZoo.StageYields({baby: IZoo.YieldsBoost({\n            yields: yieldBaby,\n            boost: boostBaby\n        }), teen: IZoo.YieldsBoost({\n            yields: yieldTeen,\n            boost: boostTeen\n        }), adult: IZoo.YieldsBoost({\n            yields: yieldAdult,\n            boost: boostAdult\n        })});\n    }\n\n    // Add or configure a given animal\n    function setAnimal(string memory name, string memory rarity, string memory adultTokenURI, string memory adultMetadataURI, string memory babyTokenURI, string memory babyMetadataURI, string memory teenTokenURI, string memory teenMetadataURI) public onlyOwner {\n        Animal memory animal = Animal({\n            kind: IZoo.Type.BASE_ANIMAL,\n            stage: IZoo.AdultHood.BABY,\n            rarity: getRarity(rarity),\n            name: name,\n            data: getMediaData(babyTokenURI, babyMetadataURI),\n            bidShares: getBidShares()\n        });\n\n        // Save animal by name\n        animals[name] = animal;\n\n        setAnimalURIs(name, adultTokenURI, adultMetadataURI, teenTokenURI, teenMetadataURI, babyTokenURI, babyMetadataURI);\n        // Try to add animal to rarity\n        addAnimalToRarity(animal.rarity.name, animal.name);\n    }\n\n    // Add or configure a given hybrid\n    function setHybrid(string memory name, string memory rarity, uint256 yields, string memory parentA, string memory parentB, string memory tokenURI, string memory metadataURI) public onlyOwner{\n        Hybrid memory hybrid = Hybrid({\n            kind: IZoo.Type.HYBRID_ANIMAL,\n            name: name,\n            rarity: getRarity(rarity),\n            yields: yields,\n            parentA: parentA,\n            parentB: parentB,\n            data: getMediaData(tokenURI, metadataURI),\n            bidShares: getBidShares()\n        });\n\n        hybrids[name] = hybrid;\n        hybridParents[parentsKey(parentA, parentB)] = hybrid;\n    }\n\n\n\n    // Add Animal to rarity set if it has not been seen before\n    function addAnimalToRarity(string memory rarity, string memory name) private {\n        string[] storage _animals = rarityAnimals[rarity];\n\n        // Check if animal has been added to this rarity before\n        for (uint256 i = 0; i < _animals.length; i++) {\n            string storage known = _animals[i];\n            if (keccak256(bytes(name)) == keccak256(bytes(known))) {\n                // Not a new Animal\n                return;\n            }\n        }\n\n        // New animal lets add to rarity list\n        _animals.push(name);\n\n        // Ensure stored\n        rarityAnimals[rarity] = _animals;\n    }\n\n    modifier eggExists (uint256 id){\n        require(eggs[id].exist, \"Egg does't exist\");\n        _;\n    }\n\n    // Return price for current EggDrop\n    function eggPrice(uint256 id) public eggExists(id) override view returns (uint256) {\n        return getEgg(id).price;\n    }\n\n    function eggSupply(uint256 id) public eggExists(id) override view returns (uint256) {\n        return getEgg(id).supply;\n    }\n\n    // Return a new Egg Token\n    function newEgg(uint256 id) override public eggExists(id) returns (IZoo.Token memory) {\n        require(keeperAddress == msg.sender || EggDropAddress == msg.sender, \"only authorized callers\");\n        Egg memory egg = getEgg(id);\n        require(eggSupply(id) == 0 || egg.minted < eggSupply(id), \"Out of eggs\");\n\n        egg.minted++;\n        eggs[egg.id] = egg;\n\n        // Convert egg into a token\n        return IZoo.Token({\n            rarity: getRarity('Endangered'),\n            kind: IZoo.Type.BASE_EGG,\n            dropEgg: id,\n            name: egg.name,\n            birthValues: IZoo.Birth({birthday: uint40(block.number), timestamp: uint40(block.timestamp), parents: IZoo.Parents(\"\", \"\", 0, 0)}),\n            data: egg.data,\n            bidShares: egg.bidShares,\n            customName: \"\",\n            id: 0,\n            breed: IZoo.Breed(0, 0),\n            meta: IZoo.Meta(0, 0, false, false),\n            stage: IZoo.AdultHood.BABY\n        });\n    }\n\n    // Return a new Hybrid Egg Token\n    function newHybridEgg(IZoo.Parents memory parents) override external view onlyZoo returns (IZoo.Token memory) {\n        uint256 randomEgg = unsafeRandom();\n\n        Egg memory egg = getEgg(randomEgg);\n        require(eggSupply(randomEgg) == 0 || egg.minted < eggSupply(randomEgg), \"Out of eggs\");\n\n        // Convert egg into a token\n        return IZoo.Token({\n            rarity: getRarity(animals[parents.animalA].rarity.name),\n            kind: IZoo.Type.HYBRID_EGG,\n            name: egg.name,\n            birthValues: IZoo.Birth({birthday: uint40(block.number), timestamp: uint40(block.timestamp), parents: parents}),\n            data: egg.data,\n            bidShares: egg.bidShares,\n            dropEgg: egg.id,\n            id: 0,\n            customName: \"\",\n            breed: IZoo.Breed(0, 0),\n            meta: IZoo.Meta(0, 0, false, false),\n            stage: IZoo.AdultHood.BABY\n        });\n    }\n\n    // Get Egg by id\n    function getEgg(uint256 id) public eggExists(id) view override returns (Egg memory) {\n        return eggs[id];\n    }\n\n    // Get Rarity by name\n    function getRarity(string memory name) private view returns (IZoo.Rarity memory) {\n        return rarities[name];\n    }\n\n    // Get Animal by name\n    function getAnimal(string memory name) private view returns (Animal memory) {\n        return animals[name];\n    }\n\n    // Get Hybrid by name\n    function getHybrid(string memory name) private view returns (Hybrid memory) {\n        return hybrids[name];\n    }\n\n    function getBredAnimal(string memory animal, IZoo.Parents memory parents) override public view returns(IZoo.Token memory token) {\n        token.kind = IZoo.Type.HYBRID_ANIMAL;\n        token.name = animals[animal].name;\n        token.data = adultHoodURIs[animals[animal].name].dataBaby;\n        token.rarity = animals[animal].rarity;\n        token.bidShares = animals[animal].bidShares;\n        token.birthValues.timestamp = uint40(block.timestamp);\n        token.birthValues.birthday = uint40(block.number);\n        token.birthValues.parents = parents;\n\n        return token;\n    }\n\n    // Chooses animal based on random number generated from(0-999)\n    function getRandomAnimal(uint256 random, uint256 dropEgg) override external view returns (IZoo.Token memory token) {\n        Animal memory animal;\n\n        if(dropEgg == silverEgg){\n            animal = getAnimal(rareAnimal);\n        }\n        else{\n\n            // Find rarest animal choices first\n            for (uint256 i = 0; i < raritySorted.length; i++) {\n                string memory name = raritySorted[i];\n                IZoo.Rarity memory rarity = rarities[name];\n\n                // Highest probability first, failing that use lowest rarity (common) animal\n                if (rarity.probability > random || i == raritySorted.length - 1) {\n                    string[] memory choices = rarityAnimals[name];\n                    animal = getAnimal(choices[random % choices.length]);\n                    break;\n                }\n            }\n\n        }\n\n        // Return Token\n        token.kind = IZoo.Type.BASE_ANIMAL;\n        token.name = animal.name;\n        token.data = adultHoodURIs[animal.name].dataBaby;\n        token.rarity = animal.rarity;\n        token.bidShares = animal.bidShares;\n        token.birthValues.timestamp = uint40(block.timestamp);\n        token.birthValues.birthday = uint40(block.number);\n\n        return token;\n    }\n\n    // Helper to construct IMarket.BidShares struct\n    function getBidShares() private pure returns (IMarket.BidShares memory) {\n        return IMarket.BidShares({\n            creator: Decimal.D256(uint256(10).mul(Decimal.BASE)),\n            owner: Decimal.D256(uint256(80).mul(Decimal.BASE)),\n            prevOwner: Decimal.D256(uint256(10).mul(Decimal.BASE))\n        });\n    }\n\n    // Helper to construct IMedia.MediaData struct\n    function getMediaData(string memory tokenURI, string memory metadataURI) private pure returns (IMedia.MediaData memory) {\n        return IMedia.MediaData({\n            tokenURI: tokenURI,\n            metadataURI: metadataURI,\n            contentHash: bytes32(0),\n            metadataHash: bytes32(0)\n        });\n    }\n\n    // Get key for two parents\n    function parentsKey(string memory animalA, string memory animalB) private pure returns (string memory) {\n        return string(abi.encodePacked(animalA, animalB));\n    }\n\n    // Get Hybrid from Parents\n    function parentsToHybrid(string memory nameA, string memory nameB) private view returns (Hybrid memory) {\n        return hybridParents[parentsKey(nameA, nameB)];\n    }\n\n    // // Return the higher of two rarities\n    function higher(IZoo.Rarity memory rarityA, IZoo.Rarity memory rarityB) private pure returns (IZoo.Rarity memory) {\n        if (rarityA.probability < rarityB.probability) {\n            return rarityA;\n        }\n        return rarityB;\n    }\n\n    function unsafeRandom() public view override returns (uint256) {\n        uint256 randomNumber = uint256(keccak256(abi.encodePacked(block.number, msg.sender, block.timestamp))) % randomLimit;\n        return randomNumber;\n    }\n\n\n}\n"
    },
    "src/DropEggs.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.4;\n\nimport { SafeMath } from \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { IDrop } from \"./interfaces/IDrop.sol\";\nimport { Counters } from \"@openzeppelin/contracts/utils/Counters.sol\";\nimport { IKeeper } from \"./interfaces/IKeeper.sol\";\n\ncontract DropEggs1 is Ownable {\n    using SafeMath for uint256;\n\n    using Counters for Counters.Counter;\n    uint256 randomLimit;\n    Counters.Counter public whitelistedCount;\n\n    uint256 zooKeeperDropId;\n\n    uint256 maxEggForSublime;\n\n    // Address of ZooKeeper contract\n    address public keeperAddress;\n\n    address public dropAddress;\n\n    mapping(address => uint256) private _whitelistedAllowToMint;\n    mapping(uint => address) private whitelisted;\n\n    constructor() {\n        zooKeeperDropId = 1;\n        maxEggForSublime = 20;\n        randomLimit = 3;\n    }\n\n    function configureDropAddress(address drop) public onlyOwner {\n        dropAddress = drop;\n    }\n\n    function changeRandomLimit(uint256 limit) private {\n        randomLimit = limit;\n    }\n\n    function configureKeeperAddress(address keeper) public onlyOwner {\n        keeperAddress = keeper;\n    }\n\n    function addressAllowedToMint(address _address) public view returns (uint) {\n        return _whitelistedAllowToMint[_address];\n    }\n\n\n    function changeZookeeperDropId(uint256 id) public onlyOwner {\n        zooKeeperDropId = id;\n    }\n\n\n    function changeMaxEggForSublime(uint256 max) public onlyOwner {\n        maxEggForSublime = max;\n    }\n\n\n    modifier airdropModifier (address[] memory addresses, uint256[] memory numAllowedToMint) {\n        require(addresses.length > 0 && addresses.length == numAllowedToMint.length, \"addresses and numAllowedToMint must be equal in length\");\n        uint256 i;\n        uint totalNumberToMint;\n        for (i = 0; i < addresses.length; i++) {\n            require(addresses[i] != address(0), \"An address is equal to 0x0\"); // ensure no zero address\n        }\n\n        for (i = 0; i < numAllowedToMint.length; i++) {\n            totalNumberToMint += numAllowedToMint[i];\n        }\n        require(totalNumberToMint != 0, \"Amount to mint should not equal to zero\");\n        _;\n    }\n\n\n    function unsafeRandom() public view returns (uint256) {\n        uint256 randomNumber = uint256(keccak256(abi.encodePacked(block.number, msg.sender, block.timestamp))) % randomLimit;\n        return randomNumber;\n    }\n\n   function AirdropEggs(address[] memory addresses, uint256[] memory numAllowedToMint) airdropModifier(addresses, numAllowedToMint) public onlyOwner {\n        uint256 _zooKeeperDropId = zooKeeperDropId;\n        uint256 _maxEggForSublime = maxEggForSublime;\n\n        for (uint256 i = 0; i < addresses.length; i++) {\n            _whitelistedAllowToMint[addresses[i]] = numAllowedToMint[i];\n            whitelistedCount.increment();\n            whitelisted[whitelistedCount.current()] = addresses[i];\n        }\n\n        IKeeper keeper = IKeeper(keeperAddress);\n        IDrop drop = IDrop(dropAddress);\n\n        for (uint256 i = 0; i < addresses.length; i++){\n            address buyerAddress = addresses[i];\n                require(_whitelistedAllowToMint[buyerAddress] != 0, \"Can not mint 0 token\");\n                if(_whitelistedAllowToMint[buyerAddress] >= _maxEggForSublime){\n                    changeRandomLimit(4);\n                }\n                for (uint256 j = 0; j < _whitelistedAllowToMint[buyerAddress]; j++){\n                    require(buyerAddress != address(0), \"An address is equal to 0x0\");\n                    uint256 randomEgg = unsafeRandom();\n                    uint256 Id;\n                    IDrop.Egg memory egg;\n\n                    if(randomEgg > 0) {\n                        egg = drop.getEgg(randomEgg);\n                        Id = randomEgg;\n                    } else {\n                        egg = drop.getEgg(1);\n                        Id = 1;\n                    }\n                    require(egg.minted <= egg.supply, \"STOCK_EXCEEDED\");\n                    keeper.dropEggs(Id, _zooKeeperDropId, buyerAddress);\n                }\n                changeRandomLimit(3);\n\n        }\n\n    }\n}\n"
    },
    "src/EGGDrop.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.4;\n\nimport { SafeMath } from \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { IDrop } from \"./interfaces/IDrop.sol\";\nimport { Counters } from \"@openzeppelin/contracts/utils/Counters.sol\";\nimport { IKeeper } from \"./interfaces/IKeeper.sol\";\n\ncontract DropEggs is Ownable {\n    using SafeMath for uint256;\n\n    using Counters for Counters.Counter;\n\n    Counters.Counter public whitelistedCount;\n\n    uint256 zooKeeperDropId;\n\n    uint256 maxEggForSublime;\n\n    // Address of ZooKeeper contract\n    address public keeperAddress;\n\n    address public dropAddress;\n\n    mapping(address => uint256) private _whitelistedAllowToMint;\n    mapping(uint => address) private whitelisted;\n\n    constructor() {\n        zooKeeperDropId = 1;\n        maxEggForSublime = 20;\n    }\n\n    function configureDropAddress(address drop) public onlyOwner {\n        dropAddress = drop;\n    }\n\n    function configureKeeperAddress(address keeper) public onlyOwner {\n        keeperAddress = keeper;\n    }\n\n    function addressAllowedToMint(address _address) public view returns (uint) {\n        return _whitelistedAllowToMint[_address];\n    }\n\n\n    function changeZookeeperDropId(uint256 id) public onlyOwner {\n        zooKeeperDropId = id;\n    }\n\n\n    function changeMaxEggForSublime(uint256 max) public onlyOwner {\n        maxEggForSublime = max;\n    }\n\n\n    modifier airdropModifier (address[] memory addresses, uint256[] memory numAllowedToMint) {\n        require(addresses.length > 0 && addresses.length == numAllowedToMint.length, \"addresses and numAllowedToMint must be equal in length\");\n        uint256 i;\n        uint totalNumberToMint;\n        for (i = 0; i < addresses.length; i++) {\n            require(addresses[i] != address(0), \"An address is equal to 0x0\"); // ensure no zero address\n        }\n\n        for (i = 0; i < numAllowedToMint.length; i++) {\n            totalNumberToMint += numAllowedToMint[i];\n        }\n        require(totalNumberToMint != 0, \"Amount to mint should not equal to zero\");\n        _;\n    }\n\n   function AirdropEggs(address[] memory addresses, uint256[] memory numAllowedToMint) airdropModifier(addresses, numAllowedToMint) public onlyOwner {\n\n        for (uint256 i = 0; i < addresses.length; i++) {\n            _whitelistedAllowToMint[addresses[i]] = numAllowedToMint[i];\n            whitelistedCount.increment();\n            whitelisted[whitelistedCount.current()] = addresses[i];\n        }\n\n        IKeeper keeper = IKeeper(keeperAddress);\n        IDrop drop = IDrop(dropAddress);\n\n        for (uint256 i = 0; i < addresses.length; i++){\n            address buyerAddress = addresses[i];\n                require(_whitelistedAllowToMint[buyerAddress] != 0, \"Can not mint 0 token\");\n                if(_whitelistedAllowToMint[buyerAddress] >= maxEggForSublime){\n                    drop.changeRandomLimit(4);\n                }\n                for (uint256 j = 0; j < _whitelistedAllowToMint[buyerAddress]; j++){\n                    require(buyerAddress != address(0), \"An address is equal to 0x0\");\n                    uint256 randomEgg = drop.unsafeRandom();\n                    uint256 Id;\n                    IDrop.Egg memory egg;\n\n                    if(randomEgg > 0) {\n                        egg = drop.getEgg(randomEgg);\n                        Id = randomEgg;\n                    } else {\n                        egg = drop.getEgg(1);\n                        Id = 1;\n                    }\n                    require(egg.minted <= egg.supply, \"STOCK_EXCEEDED\");\n                    keeper.dropEggs(Id, zooKeeperDropId, buyerAddress);\n                }\n                drop.changeRandomLimit(3);\n\n        }\n\n    }\n}\n"
    },
    "src/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.4;\nimport \"./console.sol\";\n\n/**\n * NOTE: This file is a clone of the OpenZeppelin ERC721.sol contract. It was forked from https://github.com/OpenZeppelin/openzeppelin-contracts\n * at commit 1ada3b633e5bfd9d4ffe0207d64773a11f5a7c40\n *\n *\n * The following functions needed to be modified, prompting this clone:\n *  - `_tokenURIs` visibility was changed from private to internal to support updating URIs after minting\n *  - `_baseURI` visibiility was changed from private to internal to support fetching token URI even after the token was burned\n *  - `_INTERFACE_ID_ERC721_METADATA` is no longer registered as an interface because _tokenURI now returns raw content instead of a JSON file, and supports updatable URIs\n *  - `_approve` visibility was changed from private to internal to support EIP-2612 flavored permits and approval revocation by an approved address\n */\n\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"@openzeppelin/contracts/utils/structs/EnumerableMap.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\n\n/**\n * @title ERC721 Non-Fungible Token Standard basic implementation\n * @dev see https://eips.ethereum.org/EIPS/eip-721\n */\ncontract ERC721 is\n    Context,\n    ERC165Storage,\n    IERC721,\n    IERC721Metadata,\n    IERC721Enumerable\n{\n    using SafeMath for uint256;\n    using Address for address;\n    using EnumerableSet for EnumerableSet.UintSet;\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\n    using Strings for uint256;\n\n    // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n    // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n\n    // Mapping from holder address to their (enumerable) set of owned tokens\n    mapping(address => EnumerableSet.UintSet) private _holderTokens;\n\n    // Enumerable mapping from token ids to their owners\n    EnumerableMap.UintToAddressMap private _tokenOwners;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Optional mapping for token URIs\n    mapping(uint256 => string) internal _tokenURIs;\n\n    // Base URI\n    string internal _baseURI;\n\n    /*\n     *     bytes4(keccak256('balanceOf(address)')) == 0x70a08231\n     *     bytes4(keccak256('ownerOf(uint256)')) == 0x6352211e\n     *     bytes4(keccak256('approve(address,uint256)')) == 0x095ea7b3\n     *     bytes4(keccak256('getApproved(uint256)')) == 0x081812fc\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\n     *     bytes4(keccak256('transferFrom(address,address,uint256)')) == 0x23b872dd\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256)')) == 0x42842e0e\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)')) == 0xb88d4fde\n     *\n     *     => 0x70a08231 ^ 0x6352211e ^ 0x095ea7b3 ^ 0x081812fc ^\n     *        0xa22cb465 ^ 0xe985e9c5 ^ 0x23b872dd ^ 0x42842e0e ^ 0xb88d4fde == 0x80ac58cd\n     */\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\n\n    /*\n     *     bytes4(keccak256('totalSupply()')) == 0x18160ddd\n     *     bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) == 0x2f745c59\n     *     bytes4(keccak256('tokenByIndex(uint256)')) == 0x4f6ccce7\n     *\n     *     => 0x18160ddd ^ 0x2f745c59 ^ 0x4f6ccce7 == 0x780e9d63\n     */\n    bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory __name, string memory __symbol) {\n        _name = __name;\n        _symbol = __symbol;\n\n        // register the supported interfaces to conform to ERC721 via ERC165\n        _registerInterface(_INTERFACE_ID_ERC721);\n        _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view override returns (uint256) {\n        require(\n            owner != address(0),\n            \"ERC721: balance query for the zero address\"\n        );\n\n        return _holderTokens[owner].length();\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenID) public view override returns (address) {\n        return\n            _tokenOwners.get(\n                tokenID,\n                \"ERC721: owner query for nonexistent token\"\n            );\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenID)\n        public\n        view\n        virtual\n        override\n        returns (string memory)\n    {\n        require(\n            _exists(tokenID),\n            \"ERC721Metadata: URI query for nonexistent token\"\n        );\n\n        string memory _tokenURI = _tokenURIs[tokenID];\n\n        // If there is no base URI, return the token URI.\n        if (bytes(_baseURI).length == 0) {\n            return _tokenURI;\n        }\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\n        if (bytes(_tokenURI).length > 0) {\n            return string(abi.encodePacked(_baseURI, _tokenURI));\n        }\n        // If there is a baseURI but no tokenURI, concatenate the tokenID to the baseURI.\n        return string(abi.encodePacked(_baseURI, tokenID.toString()));\n    }\n\n    /**\n     * @dev Returns the base URI set via {_setBaseURI}. This will be\n     * automatically added as a prefix in {tokenURI} to each token's URI, or\n     * to the token ID if no specific URI is set for that token ID.\n     */\n    function baseURI() public view returns (string memory) {\n        return _baseURI;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index)\n        public\n        view\n        override\n        returns (uint256)\n    {\n        return _holderTokens[owner].at(index);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n    function totalSupply() public view override returns (uint256) {\n        // _tokenOwners are indexed by tokenIDs, so .length() returns the number of tokenIDs\n        return _tokenOwners.length();\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n    function tokenByIndex(uint256 index)\n        public\n        view\n        override\n        returns (uint256)\n    {\n        (uint256 tokenID, ) = _tokenOwners.at(index);\n        return tokenID;\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenID) public virtual override {\n        address owner = ownerOf(tokenID);\n\n        console.log(\"The owner\", owner);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        console.log(msg.sender);\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenID);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenID)\n        public\n        view\n        override\n        returns (address)\n    {\n        require(\n            _exists(tokenID),\n            \"ERC721: approved query for nonexistent token\"\n        );\n\n        return _tokenApprovals[tokenID];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved)\n        public\n        virtual\n        override\n    {\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\n\n        _operatorApprovals[_msgSender()][operator] = approved;\n        emit ApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator)\n        public\n        view\n        override\n        returns (bool)\n    {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenID\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(\n            _isApprovedOrOwner(_msgSender(), tokenID),\n            \"ERC721: transfer caller is not owner nor approved\"\n        );\n\n        _transfer(from, to, tokenID);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenID\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenID, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenID,\n        bytes memory _data\n    ) public virtual override {\n        require(\n            _isApprovedOrOwner(_msgSender(), tokenID),\n            \"ERC721: transfer caller is not owner nor approved\"\n        );\n        _safeTransfer(from, to, tokenID, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenID` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenID` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenID,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenID);\n        require(\n            _checkOnERC721Received(from, to, tokenID, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Returns whether `tokenID` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenID) internal view returns (bool) {\n        return _tokenOwners.contains(tokenID);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenID`.\n     *\n     * Requirements:\n     *\n     * - `tokenID` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenID)\n        internal\n        view\n        returns (bool)\n    {\n        require(\n            _exists(tokenID),\n            \"ERC721: operator query for nonexistent token\"\n        );\n        address owner = ownerOf(tokenID);\n        return (spender == owner ||\n            getApproved(tokenID) == spender ||\n            isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Public method which returns whether `spender` is allowed to manage `tokenID`.\n     *\n     * Requirements:\n     *\n     * - `tokenID` must exist.\n     */\n    function isApprovedOrOwner(address spender, uint256 tokenID) public view returns (bool) {\n        return _isApprovedOrOwner(spender, tokenID);\n    }\n\n    /**\n     * @dev Safely mints `tokenID` and transfers it to `to`.\n     *\n     * Requirements:\n     d*\n     * - `tokenID` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenID) internal virtual {\n        _safeMint(to, tokenID, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenID,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenID);\n        require(\n            _checkOnERC721Received(address(0), to, tokenID, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenID` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenID` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenID) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenID), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenID);\n\n        _holderTokens[to].add(tokenID);\n\n        _tokenOwners.set(tokenID, to);\n\n        emit Transfer(address(0), to, tokenID);\n    }\n\n    /**\n     * @dev Destroys `tokenID`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenID` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenID) internal virtual {\n        address owner = ownerOf(tokenID);\n\n        _beforeTokenTransfer(owner, address(0), tokenID);\n\n        // Clear approvals\n        _approve(address(0), tokenID);\n\n        // Clear metadata (if any)\n        if (bytes(_tokenURIs[tokenID]).length != 0) {\n            delete _tokenURIs[tokenID];\n        }\n\n        _holderTokens[owner].remove(tokenID);\n\n        _tokenOwners.remove(tokenID);\n\n        emit Transfer(owner, address(0), tokenID);\n    }\n\n    /**\n     * @dev Transfers `tokenID` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenID` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenID\n    ) internal virtual {\n        require(\n            ownerOf(tokenID) == from,\n            \"ERC721: transfer of token that is not own\"\n        );\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenID);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenID);\n\n        _holderTokens[from].remove(tokenID);\n        _holderTokens[to].add(tokenID);\n\n        _tokenOwners.set(tokenID, to);\n\n        emit Transfer(from, to, tokenID);\n    }\n\n    /**\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenID`.\n     *\n     * Requirements:\n     *\n     * - `tokenID` must exist.\n     */\n    function _setTokenURI(uint256 tokenID, string memory _tokenURI)\n        internal\n        virtual\n    {\n        require(\n            _exists(tokenID),\n            \"ERC721Metadata: URI set of nonexistent token\"\n        );\n        _tokenURIs[tokenID] = _tokenURI;\n    }\n\n    /**\n     * @dev Internal function to set the base URI for all token IDs. It is\n     * automatically added as a prefix to the value returned in {tokenURI},\n     * or to the token ID if {tokenURI} is empty.\n     */\n    function _setBaseURI(string memory baseURI_) internal virtual {\n        _baseURI = baseURI_;\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenID uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenID,\n        bytes memory _data\n    ) private returns (bool) {\n        if (!to.isContract()) {\n            return true;\n        }\n        bytes memory returndata = to.functionCall(\n            abi.encodeWithSelector(\n                IERC721Receiver(to).onERC721Received.selector,\n                _msgSender(),\n                from,\n                tokenID,\n                _data\n            ),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n        bytes4 retval = abi.decode(returndata, (bytes4));\n        return (retval == _ERC721_RECEIVED);\n    }\n\n    function _approve(address to, uint256 tokenID) internal {\n        _tokenApprovals[tokenID] = to;\n        emit Approval(ownerOf(tokenID), to, tokenID);\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenID` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenID` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenID` will be burned.\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenID\n    ) internal virtual {}\n}\n"
    },
    "src/ERC721Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.4;\n\n/**\n * NOTE: This file is a clone of the OpenZeppelin ERC721.sol contract. It was forked from https://github.com/OpenZeppelin/openzeppelin-contracts\n * at commit 1ada3b633e5bfd9d4ffe0207d64773a11f5a7c40\n *\n * The code was modified to inherit from our customized ERC721 contract.\n*/\n\nimport \"./ERC721.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\n\n/**\n * @title ERC721 Burnable Token\n * @dev ERC721 Token that can be irreversibly burned (destroyed).\n */\nabstract contract ERC721Burnable is Context, ERC721 {\n    /**\n     * @dev Burns `tokenID`. See {ERC721-_burn}.\n     *\n     * Requirements:\n     *\n     * - The caller must own `tokenID` or be an approved operator.\n     */\n    function burn(uint256 tokenID) public virtual {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenID), \"ERC721Burnable: caller is not owner nor approved\");\n        _burn(tokenID);\n    }\n}\n"
    },
    "src/Farm.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >= 0.8.4;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"./interfaces/IERC20Mintable.sol\";\n\ncontract Farm is Ownable {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n    using SafeERC20 for IERC20Mintable;\n\n    // Info of each user.\n    struct UserInfo {\n        uint256 amount;     // How many LP tokens the user has provided.\n        uint256 rewardDebt; // Reward debt. See explanation below.\n    }\n\n    // Info of each pool.\n    struct PoolInfo {\n        IERC20 lpToken;            // Address of LP token contract.\n        uint256 allocPoint;        // How many allocation points assigned to this pool. Tokens to distribute per block.\n        uint256 lastRewardBlock;   // Last block number that reward distribution occurs.\n        uint256 accRewardPerShare; // Accumulated reward per share, times 1e12. See below.\n    }\n\n    // Reward token\n    IERC20Mintable public token;\n\n    // DAO address\n    address public daoAddress;\n\n    // DAO share\n    uint256 public daoShare;\n\n    // Block number when bonus period ends.\n    uint256 public bonusEndBlock;\n\n    // Token reward minted per block\n    uint256 public rewardPerBlock;\n\n    // Bonus muliplier for early farmers.\n    uint256 public constant BONUS_MULTIPLIER = 2;\n\n    // Info of each pool.\n    PoolInfo[] public poolInfo;\n\n    // Info of each user that stakes LP tokens.\n    mapping (uint256 => mapping (address => UserInfo)) public userInfo;\n\n    // Total allocation points. Must be the sum of all allocation points in all pools.\n    uint256 public totalAllocPoint = 0;\n\n    // The block number when mining starts.\n    uint256 public startBlock;\n\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\n\n    constructor(\n        address _daoAddress,\n        uint256 _daoShare,\n        address _tokenAddress,\n        uint256 _rewardPerBlock,\n        uint256 _startBlock,\n        uint256 _bonusEndBlock\n    ) {\n        daoAddress = _daoAddress;\n        daoShare = _daoShare;\n        token = IERC20Mintable(_tokenAddress);\n        rewardPerBlock = _rewardPerBlock;\n        startBlock = _startBlock;\n        bonusEndBlock = _bonusEndBlock;\n    }\n\n    function poolLength() external view returns (uint256) {\n        return poolInfo.length;\n    }\n\n    // Add a new lp to the pool. Can only be called by the owner.\n    function add(uint256 _allocPoint, IERC20 _lpToken, bool _withUpdate) public onlyOwner {\n        if (_withUpdate) {\n            massUpdatePools();\n        }\n        uint256 lastRewardBlock = block.number > startBlock ? block.number : startBlock;\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\n        poolInfo.push(PoolInfo({\n            lpToken: _lpToken,\n            allocPoint: _allocPoint,\n            lastRewardBlock: lastRewardBlock,\n            accRewardPerShare: 0\n        }));\n    }\n\n    // Update the given pool's ZFRM allocation point. Can only be called by the owner.\n    function set(uint256 _pid, uint256 _allocPoint, bool _withUpdate) public onlyOwner {\n        if (_withUpdate) {\n            massUpdatePools();\n        }\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);\n        poolInfo[_pid].allocPoint = _allocPoint;\n    }\n\n    // Return reward multiplier over the given _from to _to block.\n    function getMultiplier(uint256 _from, uint256 _to) public view returns (uint256) {\n        if (_to <= bonusEndBlock) {\n            return _to.sub(_from).mul(BONUS_MULTIPLIER);\n        } else if (_from >= bonusEndBlock) {\n            return _to.sub(_from);\n        } else {\n            return bonusEndBlock.sub(_from).mul(BONUS_MULTIPLIER).add(\n                _to.sub(bonusEndBlock)\n            );\n        }\n    }\n\n    // View function to see pending reward on frontend.\n    function pendingReward(uint256 _pid, address _user) external view returns (uint256) {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][_user];\n        uint256 accRewardPerShare = pool.accRewardPerShare;\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\n        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\n            uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\n            uint256 reward = multiplier.mul(rewardPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\n            accRewardPerShare = accRewardPerShare.add(reward.mul(1e12).div(lpSupply));\n        }\n        return user.amount.mul(accRewardPerShare).div(1e12).sub(user.rewardDebt);\n    }\n\n    // Update reward variables for all pools. Be careful of gas spending!\n    function massUpdatePools() public {\n        uint256 length = poolInfo.length;\n        for (uint256 pid = 0; pid < length; ++pid) {\n            updatePool(pid);\n        }\n    }\n\n    // Update reward variables of the given pool to be up-to-date.\n    function updatePool(uint256 _pid) public {\n        PoolInfo storage pool = poolInfo[_pid];\n        if (block.number <= pool.lastRewardBlock) {\n            return;\n        }\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\n        if (lpSupply == 0) {\n            pool.lastRewardBlock = block.number;\n            return;\n        }\n        uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\n        uint256 reward = multiplier.mul(rewardPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\n        token.mint(address(this), reward);\n        token.mint(daoAddress, reward.div(daoShare));\n        pool.accRewardPerShare = pool.accRewardPerShare.add(reward.mul(1e12).div(lpSupply));\n        pool.lastRewardBlock = block.number;\n    }\n\n    // Deposit LP tokens to Farm for Reward allocation.\n    function deposit(uint256 _pid, uint256 _amount) public {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n        updatePool(_pid);\n        if (user.amount > 0) {\n            uint256 pending = user.amount.mul(pool.accRewardPerShare).div(1e12).sub(user.rewardDebt);\n            if (pending > 0) {\n                safeTransfer(msg.sender, pending);\n            }\n        }\n        if (_amount > 0) {\n            pool.lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);\n            user.amount = user.amount.add(_amount);\n        }\n        user.rewardDebt = user.amount.mul(pool.accRewardPerShare).div(1e12);\n        emit Deposit(msg.sender, _pid, _amount);\n    }\n\n    // Withdraw LP tokens from Farm\n    function withdraw(uint256 _pid, uint256 _amount) public {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n        require(user.amount >= _amount, \"withdraw: invalid amount\");\n        updatePool(_pid);\n        uint256 pending = user.amount.mul(pool.accRewardPerShare).div(1e12).sub(user.rewardDebt);\n        if (pending > 0) {\n            safeTransfer(msg.sender, pending);\n        }\n        if (_amount > 0) {\n            user.amount = user.amount.sub(_amount);\n            pool.lpToken.safeTransfer(address(msg.sender), _amount);\n        }\n        user.rewardDebt = user.amount.mul(pool.accRewardPerShare).div(1e12);\n        emit Withdraw(msg.sender, _pid, _amount);\n    }\n\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\n    function emergencyWithdraw(uint256 _pid) public {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n        pool.lpToken.safeTransfer(address(msg.sender), user.amount);\n        emit EmergencyWithdraw(msg.sender, _pid, user.amount);\n        user.amount = 0;\n        user.rewardDebt = 0;\n    }\n\n    // Safe transfer function, just in case if rounding error causes pool to not have enough tokens.\n    function safeTransfer(address _to, uint256 _amount) internal {\n        uint256 bal = token.balanceOf(address(this));\n        if (_amount > bal) {\n            token.transfer(_to, bal);\n        } else {\n            token.transfer(_to, _amount);\n        }\n    }\n\n    // Update token used for rewards\n    function setToken(address _tokenAddress) public onlyOwner {\n        require(_tokenAddress != address(0), 'Token address cannot be zero address');\n        token = IERC20Mintable(_tokenAddress);\n    }\n}\n"
    },
    "src/Faucet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.4;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { SafeMath } from \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\ncontract Faucet is Ownable {\n    using SafeMath for uint256;\n\n    uint256 public rate = 10000;\n\n    IERC20 token;\n\n    event Fund(\n        address indexed _address,\n        uint256 indexed _amount\n    );\n\n    constructor(address zooAddress) {\n        token = IERC20(zooAddress);\n    }\n\n    function setTokenAddress(address _new) public onlyOwner {\n        token = IERC20(_new);\n    }\n\n    function setRate(uint256 _rate) public onlyOwner {\n        rate = _rate;\n    }\n\n    function fund(address to) public returns (uint256) {\n        // uint256 amount = rate.mul(10**18);\n        require(rate <= token.balanceOf(address(this)));\n        token.transfer(to, rate);\n        emit Fund(msg.sender, rate);\n        return rate;\n    }\n\n    function withdraw() public onlyOwner {\n        token.transfer(owner(), token.balanceOf(address(this)));\n    }\n\n    function balance() public view returns (uint256) {\n        return token.balanceOf(address(this));\n    }\n}\n"
    },
    "src/GoveranceToken.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.4;\npragma experimental ABIEncoderV2;\n\nimport { OwnableUpgradeable } from '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\nimport { UUPSUpgradeable } from '@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol';\n\ncontract GoveranceToken is UUPSUpgradeable, OwnableUpgradeable {\n  function _authorizeUpgrade(address newImplementation) internal override onlyOwner { }\n\n  function initialize() public initializer {\n    __Ownable_init_unchained();\n  }\n}\n"
    },
    "src/interfaces/I721Stake.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.4;\n\ninterface I721Stake {\n\n    struct StakingTime {\n        uint40 time;\n    }\n\n    struct Token {\n        bool staked;\n        StakingTime[] period;\n    }\n\n    struct Staker {\n        uint256 dividend_amount;\n        uint40 last_payout;\n        mapping(address => mapping(uint256 => Token)) tokens;\n    }\n    \n    event NewStake(address indexed addr, address NFTContract, uint256 tokenId);\n    event unStaked(address indexed addr, address NFTContract, uint256 tokenId);\n\n    function freezeNft(address NftContract, uint256 _tokenId,  bool freeze) external;\n    function isFrozenStaker(address _addr) external view returns (bool);\n    function isFrozenNft(address NftContract, uint256 _tokenId) external view returns (bool);\n    function stake(address NftContract, uint256 _tokenId) external;\n    function unstake(address NftContract, uint256 _tokenId) external;\n    function rewardAmount(address _addr, address NftContract, uint256 _tokenId) view external returns(uint256[] memory);\n    function updateRewardCoin(address _newRewardCoin) external; \n    function onERC1155Received(address operator, address from, uint256 id, uint256 value, bytes calldata data) external returns (bytes4);\n}"
    },
    "src/interfaces/IAuctionHouse.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n// Forked from https://github.com/ourzora/auction-house @ 54a12ec1a6cf562e49f0a4917990474b11350a2d\n\npragma solidity >=0.8.4;\npragma experimental ABIEncoderV2;\n\n/**\n * @title Interface for Auction Houses\n */\ninterface IAuctionHouse {\n\n    struct AuctionAddresses {\n        address tokenContract;\n        address auctionCurrency;\n        address tokenOwner;\n        address payable curator;\n        address payable bidder;\n    }\n\n    struct AuctionHistory{\n        uint256 amount;\n        uint40 time;\n        address bidder;\n        uint40 blockNumber;\n    }\n\n    struct Auction {\n        uint256 auctionId;\n        // ID for the ERC721 token\n        uint256 tokenID;\n        // Address for the ERC721 contract\n        // Whether or not the auction curator has approved the auction to start\n        bool approved;\n        // The current highest bid amount\n        uint256 amount;\n        // The length of time to run the auction for, after the first bid was made\n        uint256 duration;\n        // The time of the first bid\n        uint256 firstBidTime;\n        // The minimum price of the first bid\n        uint256 reservePrice;\n        // The sale percentage to send to the curator\n        uint8 curatorFeePercentage;\n        // The address that should receive the funds once the NFT is sold.\n        // The address of the current highest bid\n        AuctionAddresses addresses;\n\n        AuctionHistory[] auctionHistory;\n\n    }\n\n    event AuctionCreated(\n        uint256 indexed auctionID,\n        uint256 indexed tokenID,\n        address indexed tokenContract,\n        uint256 duration,\n        uint256 reservePrice,\n        address tokenOwner,\n        address curator,\n        uint8 curatorFeePercentage,\n        address auctionCurrency\n    );\n\n    event AuctionApprovalUpdated(\n        uint256 indexed auctionID,\n        uint256 indexed tokenID,\n        address indexed tokenContract,\n        bool approved\n    );\n\n    event AuctionReservePriceUpdated(\n        uint256 indexed auctionID,\n        uint256 indexed tokenID,\n        address indexed tokenContract,\n        uint256 reservePrice\n    );\n\n    event AuctionBid(\n        uint256 indexed auctionID,\n        uint256 indexed tokenID,\n        address indexed tokenContract,\n        address sender,\n        uint256 value,\n        bool firstBid,\n        bool extended\n    );\n\n    event AuctionDurationExtended(\n        uint256 indexed auctionID,\n        uint256 indexed tokenID,\n        address indexed tokenContract,\n        uint256 duration\n    );\n\n    event AuctionEnded(\n        uint256 indexed auctionID,\n        uint256 indexed tokenID,\n        address indexed tokenContract,\n        address tokenOwner,\n        address curator,\n        address winner,\n        uint256 amount,\n        uint256 curatorFee,\n        address auctionCurrency\n    );\n\n    event AuctionCanceled(\n        uint256 indexed auctionID,\n        uint256 indexed tokenID,\n        address indexed tokenContract,\n        address tokenOwner\n    );\n\n    function createAuction(\n        uint256 tokenID,\n        address tokenContract,\n        uint256 duration,\n        uint256 reservePrice,\n        address payable curator,\n        uint8 curatorFeePercentages,\n        address auctionCurrency\n    ) external returns (uint256);\n\n    function setAuctionApproval(uint256 auctionID, bool approved) external;\n\n    function setAuctionReservePrice(uint256 auctionID, uint256 reservePrice) external;\n\n    function createBid(uint256 auctionID, uint256 amount) external payable;\n\n    function endAuction(uint256 auctionID) external;\n\n    function cancelAuction(uint256 auctionID) external;\n}\n"
    },
    "src/interfaces/IDrop.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.4;\n\nimport { IZoo } from \"./IZoo.sol\";\nimport { IMedia } from \"./IMedia.sol\";\nimport { IMarket } from \"./IMarket.sol\";\n\ninterface IDrop {\n    struct Egg {\n        uint256 id;\n        bool exist;\n        IZoo.Type kind;\n        string  name;\n        uint256 supply;\n        uint256 price;\n        uint256 timestamp;    // time created\n        uint256 birthday;     // birth block\n        uint256 minted;       // amount minted\n        IMedia.MediaData data;\n        IMarket.BidShares bidShares;\n    }\n\n    struct Animal {\n        IZoo.Type kind;\n        IZoo.Rarity rarity;\n        IZoo.AdultHood stage;\n        string name;\n        IMedia.MediaData data;\n        IMarket.BidShares bidShares;\n\n    }\n\n    struct Hybrid {\n        IZoo.Type kind;\n        IZoo.Rarity rarity;\n        string name;\n        uint256 yields;\n        string parentA;\n        string parentB;\n        IMedia.MediaData data;\n        IMarket.BidShares bidShares;\n    }\n\n    function title() external view returns (string memory);\n    function eggPrice(uint256 id) external view returns (uint256);\n    function totalSupply() external view returns (uint256);\n    function eggSupply(uint256 id) external view returns (uint256);\n    function newEgg(uint256 id) external returns (IZoo.Token memory);\n    function newHybridEgg(IZoo.Parents memory) external returns (IZoo.Token memory);\n    function getRandomAnimal(uint256, uint256) external view returns (IZoo.Token memory);\n    function unsafeRandom() external view returns(uint256);\n    function changeRandomLimit(uint256 limit) external;\n    function EggDropAddress() external returns(address);\n    function getAdultHoodURIs(string memory name, IZoo.AdultHood stage) external returns (IMedia.MediaData memory);\n    function silverEgg() external view returns(uint256);\n    function getBredAnimal(string memory animal, IZoo.Parents memory) external view returns(IZoo.Token memory token);\n    function getEgg(uint256 id) external view returns (Egg memory);\n}\n"
    },
    "src/interfaces/IERC20Bridgable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.4;\n\nimport \"./IERC20Mintable.sol\";\nimport \"./IERC20Burnable.sol\";\n\ninterface IERC20Bridgable is IERC20Mintable, IERC20Burnable {\n    function bridgeBurn(address _to, uint256 _amount) external;\n    function bridgeMint(address _from, uint256 _amount) external;\n}\n"
    },
    "src/interfaces/IERC20Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.4;\n\nimport \"./IERC20Mintable.sol\";\n\ninterface IERC20Burnable is IERC20Mintable {\n    function burn(uint256 _amount) external;\n    function burnFrom(address _from, uint256 _amount) external;\n}\n"
    },
    "src/interfaces/IERC20Mintable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.4;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP with additional mint method\n */\ninterface IERC20Mintable {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Mints `amount` of tokens to `to`\n     */\n    function mint(address to, uint256 amount) external;\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "src/interfaces/IERC721Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.4;\n\nimport { IERC721 } from '@openzeppelin/contracts/token/ERC721/IERC721.sol';\n\ninterface IERC721Burnable is IERC721 {\n    function burn(uint256 _amount) external;\n}\n"
    },
    "src/interfaces/IKeeper.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.4;\n\ninterface IKeeper {\n\n    function dropEggs(uint256 eggId, uint256 dropID,address buyer) external;\n\n}\n"
    },
    "src/interfaces/IMarket.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n// Forked from https://github.com/ourzora/core @ 450cd154bfbb70f62e94050cc3f1560d58e0506a\n\npragma solidity >=0.8.4;\npragma experimental ABIEncoderV2;\n\nimport { Decimal } from '../Decimal.sol';\nimport { IDrop } from './IDrop.sol';\nimport { IZoo } from './IZoo.sol';\n\n/**\n * @title Interface for Zoo Protocol's Market\n */\ninterface IMarket {\n  struct Bid {\n    // Amount of the currency being bid\n    uint256 amount;\n    // Address to the ERC20 token being used to bid\n    address currency;\n    // Address of the bidder\n    address bidder;\n    // Address of the recipient\n    address recipient;\n    // % of the next sale to award the current owner\n    Decimal.D256 sellOnShare;\n    // Flag bid as offline for OTC sale\n    bool offline;\n  }\n\n  struct Ask {\n    // Amount of the currency being asked\n    uint256 amount;\n    // Address to the ERC20 token being asked\n    address currency;\n    // Flag ask as offline for OTC sale\n    bool offline;\n  }\n\n  struct BidShares {\n    // % of sale value that goes to the _previous_ owner of the nft\n    Decimal.D256 prevOwner;\n    // % of sale value that goes to the original creator of the nft\n    Decimal.D256 creator;\n    // % of sale value that goes to the seller (current owner) of the nft\n    Decimal.D256 owner;\n  }\n\n  event BidCreated(uint256 indexed tokenId, Bid bid);\n  event BidRemoved(uint256 indexed tokenId, Bid bid);\n  event BidFinalized(uint256 indexed tokenId, Bid bid);\n  event AskCreated(uint256 indexed tokenId, Ask ask);\n  event AskRemoved(uint256 indexed tokenId, Ask ask);\n  event BidShareUpdated(uint256 indexed tokenId, BidShares bidShares);\n  event LazyBidFinalized(uint256 dropId, string name, uint256 indexed tokenId, Bid bid);\n  event LazyBidCreated(uint256 dropId, string name, Bid bid);\n  event LazyBidRemoved(uint256 dropId, string name, Bid bid);\n\n  function bidForTokenBidder(uint256 tokenId, address bidder) external view returns (Bid memory);\n\n  function lazyBidForTokenBidder(uint256 dropId, string memory name, address bidder) external view returns (Bid memory);\n\n  function currentAskForToken(uint256 tokenId) external view returns (Ask memory);\n\n  function bidSharesForToken(uint256 tokenId) external view returns (BidShares memory);\n\n  function isValidBid(uint256 tokenId, uint256 bidAmount) external view returns (bool);\n\n  function isValidBidShares(BidShares calldata bidShares) external pure returns (bool);\n\n  function splitShare(Decimal.D256 calldata sharePercentage, uint256 amount) external pure returns (uint256);\n\n  function configure(address mediaContractAddress) external;\n\n  function setBidShares(uint256 tokenId, BidShares calldata bidShares) external;\n\n  function setAsk(uint256 tokenId, Ask calldata ask) external;\n\n  function removeAsk(uint256 tokenId) external;\n\n  function setBid(\n    uint256 tokenId,\n    Bid calldata bid,\n    address spender\n  ) external;\n\n  function setLazyBidFromApp(\n    uint256 dropId,\n    IDrop.Egg memory egg,\n    Bid memory bid,\n    address spender\n  ) external;\n\n  function removeBid(uint256 tokenId, address bidder) external;\n\n  function removeLazyBidFromApp(uint256 dropId, string memory name, address sender) external;\n\n  function acceptBid(uint256 tokenId, Bid calldata expectedBid) external;\n\n  function acceptLazyBidFromApp(uint256 dropId, IDrop.Egg memory egg, IZoo.Token memory token, Bid calldata expectedBid) external;\n\n  function isOfflineBidder(address bidder) external returns (bool);\n\n  function setOfflineBidder(address bidder, bool authorized) external;\n}\n"
    },
    "src/interfaces/IMedia.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n// Forked from https://github.com/ourzora/core @ 450cd154bfbb70f62e94050cc3f1560d58e0506a\n\npragma solidity >=0.8.4;\npragma experimental ABIEncoderV2;\n\nimport { IERC721 } from '@openzeppelin/contracts/token/ERC721/IERC721.sol';\nimport { IMarket } from './IMarket.sol';\nimport { IZoo } from './IZoo.sol';\nimport { IDrop } from './IDrop.sol';\n\n/**\n * @title Interface for Zoo Protocol's Media\n */\ninterface IMedia is IERC721 {\n  struct EIP712Signature {\n    uint256 deadline;\n    uint8 v;\n    bytes32 r;\n    bytes32 s;\n  }\n\n  struct MediaData {\n    // A valid URI of the content represented by this token\n    string tokenURI;\n    // A valid URI of the metadata associated with this token\n    string metadataURI;\n    // A SHA256 hash of the content pointed to by tokenURI\n    bytes32 contentHash;\n    // A SHA256 hash of the content pointed to by metadataURI\n    bytes32 metadataHash;\n  }\n\n  event TokenURIUpdated(uint256 indexed _tokenId, address owner, string _uri);\n  event TokenMetadataURIUpdated(uint256 indexed _tokenId, address owner, string _uri);\n\n  /**\n   * @notice Return the metadata URI for a piece of media given the token URI\n   */\n  function tokenMetadataURI(uint256 tokenId) external view returns (string memory);\n\n  /**\n   * @notice Mint new media for msg.sender.\n   */\n  function mint(MediaData calldata data, IMarket.BidShares calldata bidShares) external;\n\n  /**\n   * @notice EIP-712 mintWithSig method. Mints new media for a creator given a valid signature.\n   */\n  function mintWithSig(\n    address creator,\n    MediaData calldata data,\n    IMarket.BidShares calldata bidShares,\n    EIP712Signature calldata sig\n  ) external;\n\n  /**\n   * @notice Transfer the token with the given ID to a given address.\n   * Save the previous owner before the transfer, in case there is a sell-on fee.\n   * @dev This can only be called by the auction contract specified at deployment\n   */\n  function auctionTransfer(uint256 tokenId, address recipient) external;\n\n  /**\n   * @notice Set the ask on a piece of media\n   */\n  function setAsk(uint256 tokenId, IMarket.Ask calldata ask) external;\n\n  /**\n   * @notice Remove the ask on a piece of media\n   */\n  function removeAsk(uint256 tokenId) external;\n\n  /**\n   * @notice Set the bid on a piece of media\n   */\n  function setBid(uint256 tokenId, IMarket.Bid calldata bid) external;\n\n  /**\n   * @notice Remove the bid on a piece of media\n   */\n  function removeBid(uint256 tokenId) external;\n\n  function acceptBid(uint256 tokenId, IMarket.Bid calldata bid) external;\n\n  /**\n   * @notice Revoke approval for a piece of media\n   */\n  function revokeApproval(uint256 tokenId) external;\n\n  /**\n   * @notice Update the token URI\n   */\n  function updateTokenURI(uint256 tokenId, string calldata tokenURI) external;\n\n  /**\n   * @notice Update the token metadata uri\n   */\n  function updateTokenMetadataURI(uint256 tokenId, string calldata metadataURI) external;\n\n  /**\n   * @notice EIP-712 permit method. Sets an approved spender given a valid signature.\n   */\n  function permit(\n    address spender,\n    uint256 tokenId,\n    EIP712Signature calldata sig\n  ) external;\n\n  // Added for App\n\n  /**\n   * @notice Set the ask on a piece of media\n   */\n  function setAskFromApp(uint256 tokenId, IMarket.Ask calldata ask) external;\n\n  /**\n   * @notice Set the bid on a piece of media\n   */\n  function setBidFromApp(uint256 tokenId, IMarket.Bid memory bid, address sender) external;\n\n  /**\n   * @notice Remove the bid on a piece of media\n   */\n  function removeBidFromApp(uint256 tokenId, address sender) external;\n\n  function removeLazyBidFromApp(uint256 dropId, string memory name, address sender) external;\n\n  function acceptBidFromApp(uint256 tokenId, IMarket.Bid memory bid, address sender) external;\n\n  function acceptLazyBidFromApp(uint256 dropId, IDrop.Egg memory egg, IZoo.Token memory token, IMarket.Bid memory bid) external;\n\n  function mintToken(address owner, IZoo.Token memory tokenID) external returns (IZoo.Token memory);\n\n  function burnToken(address owner, uint256 tokenID) external;\n\n  function tokenExists(uint256 tokenID) external returns (bool);\n\n  function tokenCreator(uint256 tokenID) external returns (address);\n  \n  function previousTokenOwner(uint256 tokenID) external returns (address);\n\n  function setLazyBidFromApp(\n    uint256 dropId,\n    IDrop.Egg memory egg,\n    IMarket.Bid memory bid,\n    address spender\n  ) external;\n\n}\n"
    },
    "src/interfaces/IMigrator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport '@zoolabs/solidity/contracts/interfaces/IERC20.sol';\n\ninterface IMigrator {\n  // Take the current LP token address and return the new LP token address.\n  // Migrator should have full access to the caller's LP token.\n  function migrate(IERC20 token) external returns (IERC20);\n}\n"
    },
    "src/interfaces/IRewarder.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport '@zoolabs/solidity/contracts/interfaces/IERC20.sol';\n\ninterface IRewarder {\n  function onTokensReward(\n    uint256 pid,\n    address user,\n    address recipient,\n    uint256 tokenAmount,\n    uint256 newLpAmount\n  ) external;\n\n  function pendingTokens(\n    uint256 pid,\n    address user,\n    uint256 tokenAmount\n  ) external view returns (IERC20[] memory, uint256[] memory);\n}\n"
    },
    "src/interfaces/ISwap.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.4;\n\n// interface ISwap {\n//     function swap(uint chainId, address _to, uint256 _amount) external;\n// }\n"
    },
    "src/interfaces/IUniswapV2Pair.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.4;\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}"
    },
    "src/interfaces/IVoting.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.4;\n\ninterface IVoting {\n\n    struct Votes {\n        uint256 approvals;\n        uint256 disapprovals;\n    }\n\n    struct VotingAmount{\n        uint256 approvedTimes;\n        uint256 dissaprovedTimes;\n    }\n\n    struct Voter {\n        string proposal;\n        address voterAddress;\n        bool vote;\n        uint40 timestamp;\n    }\n    \n    enum Status {\n      Vote_now,\n      soon,\n      Closed\n    }\n\n    enum Type {\n        core,\n        community\n    }\n\n    struct Proposal {\n        string proposal;\n        bool exists;\n        uint256 voteCount;\n        Type proposalType;\n        Status proposalStatus;\n        uint40 startTime;\n        uint40 endTime;\n        Votes votes;\n    }\n\n    event addedProposal (string newProposals, uint40 timestamp);\n    event votedProposal(string proposal, bool choice);\n    function changeWithdrawAddress(address _newWithdrawAddress) external;\n    function voteProposal(string memory proposal, bool choice) external; \n    function isBlocked(address _addr) external view  returns (bool);\n    function blockAddress(address target, bool freeze) external;\n    \n}"
    },
    "src/interfaces/IZoo.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.4;\n\nimport { IMedia } from \"./IMedia.sol\";\nimport { IMarket } from \"./IMarket.sol\";\n\ninterface IZoo {\n\n\n  // Declare an Event\n  event AddDrop(address indexed dropAddress, string title, uint256 eggSupply);\n  event BreedAnimal(address indexed from, uint256 parentA, uint256 parentB, uint256 indexed eggID);\n  event Burn(address indexed from, uint256 indexed tokenID);\n  event BuyEgg(address indexed from, uint256 indexed eggID);\n  event Free(address indexed from, uint256 indexed tokenID, uint256 indexed yields);\n  event Hatch(address indexed from, uint256 eggID, uint256 indexed tokenID);\n  event Mint(address indexed from, uint256 indexed tokenID);\n  event Swap(address indexed owner, uint256 indexed tokenID, uint256 indexed chainId);\n\n    enum Type {\n        BASE_EGG,\n        BASE_ANIMAL,\n        HYBRID_EGG,\n        HYBRID_ANIMAL\n    }\n\n    enum AdultHood {\n        BABY,\n        TEEN,\n        ADULT\n    }\n\n    struct Rarity {\n        string  name;\n        uint256 probability;\n        uint256 yields;\n        uint256 boost;\n    }\n\n    struct Breed {\n        uint256 count;\n        uint256 timestamp;\n    }\n\n    struct Parents {\n        string  animalA;\n        string  animalB;\n        uint256 tokenA;\n        uint256 tokenB;\n    }\n\n    struct Meta {\n        uint256 eggID;       // originating egg\n        uint256 dropID;      // originating drop\n        bool burned;         // token has been burned\n        bool swapped;        // token has been swapped\n    }\n\n    struct Birth {\n        Parents parents;\n        uint40 timestamp;    // time created\n        uint40 birthday;     // birth block\n    }\n\n\n    struct URIs {\n        IMedia.MediaData dataBaby;\n        IMedia.MediaData dataTeen;\n        IMedia.MediaData dataAdult;\n    }\n\n    struct YieldsBoost{\n        uint256 yields;\n        uint256 boost;\n    }\n\n    struct StageYields{\n        YieldsBoost baby;\n        YieldsBoost teen;\n        YieldsBoost adult;\n    }\n\n    struct Token {\n        Rarity  rarity;\n        Type  kind;\n        string  name;\n        uint256 id;           // unique ID\n        string  customName;   // optional, paid feature\n        Breed   breed;\n        Meta meta;\n        IMedia.MediaData data;\n        Birth birthValues;\n        IMarket.BidShares bidShares;\n        uint256 dropEgg;\n        AdultHood stage;\n    }\n}\n"
    },
    "src/Market.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n// Forked from https://github.com/ourzora/core @ 450cd154bfbb70f62e94050cc3f1560d58e0506a\n\npragma solidity >=0.8.4;\npragma experimental ABIEncoderV2;\n\nimport { SafeMath } from '@openzeppelin/contracts/utils/math/SafeMath.sol';\nimport { IERC721 } from '@openzeppelin/contracts/token/ERC721/IERC721.sol';\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport { SafeERC20 } from '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\nimport { Ownable } from '@openzeppelin/contracts/access/Ownable.sol';\nimport { Decimal } from './Decimal.sol';\nimport { Media } from './Media.sol';\nimport { IMarket } from './interfaces/IMarket.sol';\nimport { IDrop } from './interfaces/IDrop.sol';\nimport { IZoo } from './interfaces/IZoo.sol';\n\nimport './console.sol';\n\n/**\n * @title A Market for pieces of media\n * @notice This contract contains all of the market logic for Media\n */\ncontract Market is IMarket, Ownable {\n  using SafeMath for uint256;\n  using SafeERC20 for IERC20;\n\n  /* *******\n   * Globals\n   * *******\n   */\n  // Address of the media contract that can call this market\n  address public mediaContract;\n\n  // Deployment Address\n  address private _owner;\n\n  // Mapping from token to mapping from bidder to bid\n  mapping(uint256 => mapping(address => Bid)) private _tokenBidders;\n\n  // Mapping from token type name to mapping from bidder to bid\n  mapping(string => mapping(address => Bid)) private _lazyTokenBidders;\n\n  // Mapping from token to the bid shares for the token\n  mapping(uint256 => BidShares) private _bidShares;\n\n  // Mapping from token to the current ask for the token\n  mapping(uint256 => Ask) private _tokenAsks;\n\n  // Mapping of bidders that are authorized to place offline bids\n  mapping(address => bool) private _offlineBidders;\n\n  /* *********\n   * Modifiers\n   * *********\n   */\n\n  /**\n   * @notice require that the msg.sender is the configured media contract\n   */\n  modifier onlyMediaCaller() {\n    require(mediaContract == msg.sender, 'Market: Only media contract');\n    _;\n  }\n\n  /* ****************\n   * View Functions\n   * ****************\n   */\n  function bidForTokenBidder(uint256 tokenId, address bidder) external view override returns (Bid memory) {\n    return _tokenBidders[tokenId][bidder];\n  }\n\n  function lazyBidForTokenBidder(uint256 dropId, string memory name, address bidder) external view override returns (Bid memory) {\n    string memory dropEggName = getDropEggName(dropId, name);\n    return _lazyTokenBidders[dropEggName][bidder];\n  }\n\n  function currentAskForToken(uint256 tokenId) external view override returns (Ask memory) {\n    return _tokenAsks[tokenId];\n  }\n\n  function bidSharesForToken(uint256 tokenId) public view override returns (BidShares memory) {\n    return _bidShares[tokenId];\n  }\n\n  function isOfflineBidder(address bidder) public view override returns (bool) {\n    return _offlineBidders[bidder];\n  }\n\n  function setOfflineBidder(address bidder, bool authorized) external override onlyOwner {\n    _offlineBidders[bidder] = authorized;\n  }\n\n  /**\n   * @notice Validates that the bid is valid by ensuring that the bid amount can be split perfectly into all the bid shares.\n   *  We do this by comparing the sum of the individual share values with the amount and ensuring they are equal. Because\n   *  the splitShare function uses integer division, any inconsistencies with the original and split sums would be due to\n   *  a bid splitting that does not perfectly divide the bid amount.\n   */\n  function isValidBid(uint256 tokenId, uint256 bidAmount) public view override returns (bool) {\n    BidShares memory bidShares = bidSharesForToken(tokenId);\n    require(isValidBidShares(bidShares), 'Market: Invalid bid shares for token');\n    return bidAmount != 0 && (bidAmount == splitShare(bidShares.creator, bidAmount).add(splitShare(bidShares.prevOwner, bidAmount)).add(splitShare(bidShares.owner, bidAmount)));\n  }\n\n  function isValidLazyBid(IDrop.Egg memory egg, uint256 bidAmount) public pure returns (bool) {\n    BidShares memory bidShares = egg.bidShares;\n    require(isValidBidShares(bidShares), 'Market: Invalid lazy bid shares for token');\n    return bidAmount != 0 && (bidAmount == splitShare(bidShares.creator, bidAmount).add(splitShare(bidShares.prevOwner, bidAmount)).add(splitShare(bidShares.owner, bidAmount)));\n  }\n\n  /**\n   * @notice Validates that the provided bid shares sum to 100\n   */\n  function isValidBidShares(BidShares memory bidShares) public pure override returns (bool) {\n    return bidShares.creator.value.add(bidShares.owner.value).add(bidShares.prevOwner.value) == uint256(100).mul(Decimal.BASE);\n  }\n\n  /**\n   * @notice return a % of the specified amount. This function is used to split a bid into shares\n   * for a media's shareholders.\n   */\n  function splitShare(Decimal.D256 memory sharePercentage, uint256 amount) public pure override returns (uint256) {\n    return Decimal.mul(amount, sharePercentage).div(100);\n  }\n\n  /**\n   * @notice Sets the media contract address. This address is the only permitted address that\n   * can call the mutable functions. This method can only be called once.\n   */\n  function configure(address mediaContractAddress) external override onlyOwner {\n    require(mediaContractAddress != address(0), 'Market: cannot set media contract as zero address');\n\n    mediaContract = mediaContractAddress;\n  }\n\n  /**\n   * @notice Sets bid shares for a particular tokenId. These bid shares must\n   * sum to 100.\n   */\n  function setBidShares(uint256 tokenId, BidShares memory bidShares) public override onlyMediaCaller {\n    require(isValidBidShares(bidShares), 'Market: Invalid bid shares, must sum to 100');\n    _bidShares[tokenId] = bidShares;\n    emit BidShareUpdated(tokenId, bidShares);\n  }\n\n  /**\n   * @notice Sets the ask on a particular media. If the ask cannot be evenly split into the media's\n   * bid shares, this reverts.\n   */\n  function setAsk(uint256 tokenId, Ask memory ask) public override onlyMediaCaller {\n    require(isValidBid(tokenId, ask.amount), 'Market: Ask invalid for share splitting');\n\n    _tokenAsks[tokenId] = ask;\n    emit AskCreated(tokenId, ask);\n  }\n\n  /**\n   * @notice removes an ask for a token and emits an AskRemoved event\n   */\n  function removeAsk(uint256 tokenId) external override onlyMediaCaller {\n    emit AskRemoved(tokenId, _tokenAsks[tokenId]);\n    delete _tokenAsks[tokenId];\n  }\n\n  /**\n   * @notice Removes the bid on a particular media for a bidder. The bid amount\n   * is transferred from this contract to the bidder, if they have a bid placed.\n   */\n  function removeBid(uint256 tokenId, address bidder) public override onlyMediaCaller {\n    Bid storage bid = _tokenBidders[tokenId][bidder];\n    address bidCurrency = bid.currency;\n    uint256 bidAmount = bid.amount;\n    bool bidOffline = bid.offline;\n\n    require(bid.amount > 0, 'Market: cannot remove bid amount of 0');\n\n    emit BidRemoved(tokenId, bid);\n    delete _tokenBidders[tokenId][bidder];\n\n    console.log('Market.removeBid', tokenId, bidCurrency, bidOffline);\n\n    if (bidCurrency != address(0) && !bidOffline) {\n      IERC20 token = IERC20(bidCurrency);\n      token.safeTransfer(bidder, bidAmount);\n    }\n  }\n\n  function setBid(\n    uint256 tokenId,\n    Bid memory bid,\n    address spender\n  ) public override onlyMediaCaller {\n    BidShares memory bidShares = _bidShares[tokenId];\n    require(bidShares.creator.value.add(bid.sellOnShare.value) <= uint256(100).mul(Decimal.BASE), 'Market: Sell on fee invalid for share splitting');\n    require(bid.bidder != address(0), 'Market: bidder cannot be 0 address');\n    require(!bid.offline || (bid.offline && isOfflineBidder(bid.bidder)), 'Market: Only whitelisted offline bidder');\n    require(bid.amount != 0, 'Market: cannot bid amount of 0');\n    require(bid.currency != address(0), 'Market: bid currency cannot be 0 address');\n    require(bid.recipient != address(0), 'Market: bid recipient cannot be 0 address');\n\n    Bid storage existingBid = _tokenBidders[tokenId][bid.bidder];\n\n    // If there is an existing bid, refund it before continuing\n    if (existingBid.amount > 0) {\n      removeBid(tokenId, bid.bidder);\n    }\n\n    uint256 bidAmount = bid.amount;\n\n    if (bid.currency != address(0) && !bid.offline) {\n      IERC20 token = IERC20(bid.currency);\n      // We must check the balance that was actually transferred to the market,\n      // as some tokens impose a transfer fee and would not actually transfer the\n      // full amount to the market, resulting in locked funds for refunds & bid acceptance\n      uint256 beforeBalance = token.balanceOf(address(this));\n      token.safeTransferFrom(spender, address(this), bid.amount);\n      uint256 afterBalance = token.balanceOf(address(this));\n      bidAmount = afterBalance.sub(beforeBalance);\n    }\n\n    _tokenBidders[tokenId][bid.bidder] = Bid(bidAmount, bid.currency, bid.bidder, bid.recipient, bid.sellOnShare, bid.offline);\n\n    emit BidCreated(tokenId, bid);\n\n    // DO NOT automatically accept bids\n    // if (_tokenAsks[tokenId].currency != address(0) && bid.currency == _tokenAsks[tokenId].currency && bid.amount >= _tokenAsks[tokenId].amount) {\n    //   // Finalize exchange\n    //   _finalizeNFTTransfer(tokenId, bid.bidder);\n    // }\n  }\n  \n  /**\n   * @notice Sets the bid on a particular media for a bidder. The token being used to bid\n   * is transferred from the spender to this contract to be held until removed or accepted.\n   * If another bid already exists for the bidder, it is refunded.\n   */\n  function setLazyBidFromApp(\n    uint256 dropId,\n    IDrop.Egg memory egg,\n    Bid memory bid,\n    address spender\n  ) external override onlyMediaCaller {\n    require(egg.bidShares.creator.value.add(bid.sellOnShare.value) <= uint256(100).mul(Decimal.BASE), 'Market: Sell on fee invalid for share splitting');\n    require(bid.bidder != address(0), 'Market: bidder cannot be 0 address');\n    require(!bid.offline || (bid.offline && isOfflineBidder(bid.bidder)), 'Market: Only whitelisted offline bidder');\n    require(bid.amount != 0, 'Market: cannot bid amount of 0');\n    // require(bid.currency != address(0), 'Market: bid currency cannot be 0 address');\n    require(bid.recipient != address(0), 'Market: bid recipient cannot be 0 address');\n\n    uint256 bidAmount = bid.amount;\n\n    if (bid.currency != address(0) && !bid.offline) {\n      IERC20 token = IERC20(bid.currency);\n      // We must check the balance that was actually transferred to the market,\n      // as some tokens impose a transfer fee and would not actually transfer the\n      // full amount to the market, resulting in locked funds for refunds & bid acceptance\n      uint256 beforeBalance = token.balanceOf(address(this));\n      token.safeTransferFrom(spender, address(this), bid.amount);\n      uint256 afterBalance = token.balanceOf(address(this));\n      bidAmount = afterBalance.sub(beforeBalance);\n    }\n\n    string memory dropEggName = getDropEggName(dropId, egg.name);\n\n    _lazyTokenBidders[dropEggName][bid.bidder] = Bid(bidAmount, bid.currency, bid.bidder, bid.recipient, bid.sellOnShare, bid.offline);\n\n    emit LazyBidCreated(dropId, egg.name, bid); \n  }\n\n  function getDropEggName(uint256 tokenId, string memory name) internal pure returns(string memory) {\n    return string(abi.encodePacked(tokenId, '-', name));\n  }\n\n  /**\n   * @notice Removes the bid on a particular media for a bidder. The bid amount\n   * is transferred from this contract to the bidder, if they have a bid placed.\n   */\n  function removeLazyBidFromApp(uint256 dropId, string memory name, address bidder) public override onlyMediaCaller {\n    string memory dropEggName = getDropEggName(dropId, name);\n    Bid storage bid = _lazyTokenBidders[dropEggName][bidder];\n    address bidCurrency = bid.currency;\n    uint256 bidAmount = bid.amount;\n    bool bidOffline = bid.offline;\n\n    require(bid.amount > 0, 'Market: cannot remove bid amount of 0');\n\n    emit LazyBidRemoved(dropId, name, bid);\n    delete _lazyTokenBidders[dropEggName][bidder];\n\n    console.log('Market.removeLazyBidFromApp', dropEggName, bidCurrency, bidOffline);\n\n    if (bidCurrency != address(0) && !bidOffline) {\n      IERC20 token = IERC20(bidCurrency);\n      token.safeTransfer(bidder, bidAmount);\n    }\n  }\n\n  function acceptLazyBidFromApp(uint256 dropId, IDrop.Egg memory egg, IZoo.Token memory token, Bid calldata expectedBid) external override onlyMediaCaller {\n    string memory dropEggName = getDropEggName(dropId, egg.name);\n    Bid memory bid = _lazyTokenBidders[dropEggName][expectedBid.bidder];\n    require(bid.amount > 0, 'Market: cannot accept bid of 0');\n    require(\n      bid.amount == expectedBid.amount && bid.currency == expectedBid.currency && bid.sellOnShare.value == expectedBid.sellOnShare.value && bid.recipient == expectedBid.recipient,\n      'Market: Unexpected bid found.'\n    );\n    require(isValidLazyBid(egg, bid.amount), 'Market: Bid invalid for share splitting');\n\n    _finalizeLazyMint(dropId, egg, token, bid.bidder);    \n  }\n\n  /**\n   * @notice Given a token ID and a bidder, this method transfers the value of\n   * the bid to the shareholders. It also transfers the ownership of the media\n   * to the bid recipient. Finally, it removes the accepted bid and the current ask.\n   */\n  function _finalizeNFTTransfer(uint256 tokenId, address bidder) private {\n    Bid memory bid = _tokenBidders[tokenId][bidder];\n    BidShares storage bidShares = _bidShares[tokenId];\n\n    if (bid.currency != address(0) && !bid.offline) {\n      IERC20 token = IERC20(bid.currency);\n\n      // Transfer bid share to owner of media\n      token.safeTransfer(IERC721(mediaContract).ownerOf(tokenId), splitShare(bidShares.owner, bid.amount));\n      // Transfer bid share to creator of media\n      token.safeTransfer(owner(), splitShare(bidShares.creator, bid.amount));\n      // Transfer bid share to previous owner of media (if applicable)\n      token.safeTransfer(Media(mediaContract).previousTokenOwners(tokenId), splitShare(bidShares.prevOwner, bid.amount));\n    }\n\n    // Transfer media to bid recipient\n    Media(mediaContract).auctionTransfer(tokenId, bid.recipient);\n\n    // Calculate the bid share for the new owner,\n    // equal to 100 - creatorShare - sellOnShare\n    bidShares.owner = Decimal.D256(uint256(100).mul(Decimal.BASE).sub(_bidShares[tokenId].creator.value).sub(bid.sellOnShare.value));\n    // Set the previous owner share to the accepted bid's sell-on fee\n    bidShares.prevOwner = bid.sellOnShare;\n\n    // Remove the accepted bid\n    delete _tokenBidders[tokenId][bidder];\n\n    emit BidShareUpdated(tokenId, bidShares);\n    emit BidFinalized(tokenId, bid);\n  }\n\n  /**\n   * @notice Given a token ID and a bidder, this method transfers the value of\n   * the bid to the shareholders. It also transfers the ownership of the media\n   * to the bid recipient. Finally, it removes the accepted bid and the current ask.\n   */\n  function _finalizeLazyMint(uint256 dropId, IDrop.Egg memory egg, IZoo.Token memory token, address bidder) private {\n\n    string memory dropEggName = getDropEggName(dropId, egg.name);\n\n    Bid memory bid = _lazyTokenBidders[dropEggName][bidder];\n\n    BidShares memory bidShares = egg.bidShares;\n\n    if (bid.currency != address(0) && !bid.offline) {\n      IERC20 erc20Token = IERC20(bid.currency);\n\n      erc20Token.safeTransfer(owner(), bid.amount); // Transfer 100%\n    }\n\n    // Transfer media to bid recipient\n    Media(mediaContract).mintToken(bid.recipient, token);\n\n    // Calculate the bid share for the new owner,\n    // equal to 100 - creatorShare - sellOnShare\n    bidShares.owner = Decimal.D256(uint256(100).mul(Decimal.BASE).sub(bidShares.creator.value).sub(bid.sellOnShare.value));\n    // Set the previous owner share to the accepted bid's sell-on fee\n    bidShares.prevOwner = bid.sellOnShare;\n\n    // Remove the accepted bid\n    delete _lazyTokenBidders[dropEggName][bidder];\n\n    emit BidShareUpdated(token.id, bidShares);\n    emit LazyBidFinalized(dropId, egg.name, token.id, bid);\n  }\n\n  /**\n   * @notice Accepts a bid from a particular bidder. Can only be called by the media contract.\n   * See {_finalizeNFTTransfer}\n   * Provided bid must match a bid in storage. This is to prevent a race condition\n   * where a bid may change while the acceptBid call is in transit.\n   * A bid cannot be accepted if it cannot be split equally into its shareholders.\n   * This should only revert in rare instances (example, a low bid with a zero-decimal token),\n   * but is necessary to ensure fairness to all shareholders.\n   */\n  function acceptBid(uint256 tokenId, Bid calldata expectedBid) external override onlyMediaCaller {\n    Bid memory bid = _tokenBidders[tokenId][expectedBid.bidder];\n    require(bid.amount > 0, 'Market: cannot accept bid of 0');\n    require(\n      bid.amount == expectedBid.amount && bid.currency == expectedBid.currency && bid.sellOnShare.value == expectedBid.sellOnShare.value && bid.recipient == expectedBid.recipient,\n      'Market: Unexpected bid found.'\n    );\n    require(isValidBid(tokenId, bid.amount), 'Market: Bid invalid for share splitting');\n\n    _finalizeNFTTransfer(tokenId, bid.bidder);\n  }\n\n}\n"
    },
    "src/Math.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\npragma solidity >=0.8.4;\npragma experimental ABIEncoderV2;\n\nimport { SafeMath } from \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\n/// @title Math\n/// Library for non-standard Math functions\n/// NOTE: This file is a clone of the dydx protocol's Decimal.sol contract.\n/// It was forked from https://github.com/dydxprotocol/solo at commit\n/// 2d8454e02702fe5bc455b848556660629c3cad36. It has not been modified other than to use a\n/// newer solidity in the pragma to match the rest of the contract suite of this project.\nlibrary Math {\n    using SafeMath for uint256;\n\n    // ============ Library Functions ============\n\n    /*\n     * Return target * (numerator / denominator).\n     */\n    function getPartial(\n        uint256 target,\n        uint256 numerator,\n        uint256 denominator\n    ) internal pure returns (uint256) {\n        return target.mul(numerator).div(denominator);\n    }\n\n    /*\n     * Return target * (numerator / denominator), but rounded up.\n     */\n    function getPartialRoundUp(\n        uint256 target,\n        uint256 numerator,\n        uint256 denominator\n    ) internal pure returns (uint256) {\n        if (target == 0 || numerator == 0) {\n            // SafeMath will check for zero denominator\n            return SafeMath.div(0, denominator);\n        }\n        return target.mul(numerator).sub(1).div(denominator).add(1);\n    }\n\n    function to128(uint256 number) internal pure returns (uint128) {\n        uint128 result = uint128(number);\n        require(result == number, \"Math: Unsafe cast to uint128\");\n        return result;\n    }\n\n    function to96(uint256 number) internal pure returns (uint96) {\n        uint96 result = uint96(number);\n        require(result == number, \"Math: Unsafe cast to uint96\");\n        return result;\n    }\n\n    function to32(uint256 number) internal pure returns (uint32) {\n        uint32 result = uint32(number);\n        require(result == number, \"Math: Unsafe cast to uint32\");\n        return result;\n    }\n\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n}\n"
    },
    "src/Media.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n// Forked from https://github.com/ourzora/core @ 450cd154bfbb70f62e94050cc3f1560d58e0506a\n\npragma solidity >=0.8.4;\npragma experimental ABIEncoderV2;\n\nimport { ERC721Burnable } from './ERC721Burnable.sol';\nimport { ERC721 } from './ERC721.sol';\nimport { EnumerableSet } from '@openzeppelin/contracts/utils/structs/EnumerableSet.sol';\nimport { Counters } from '@openzeppelin/contracts/utils/Counters.sol';\nimport { SafeMath } from '@openzeppelin/contracts/utils/math/SafeMath.sol';\nimport { Math } from '@openzeppelin/contracts/utils/math/Math.sol';\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport { ReentrancyGuard } from '@openzeppelin/contracts/security/ReentrancyGuard.sol';\nimport { Ownable } from '@openzeppelin/contracts/access/Ownable.sol';\nimport { Decimal } from './Decimal.sol';\nimport { IMarket } from './interfaces/IMarket.sol';\nimport './interfaces/IMedia.sol';\nimport './interfaces/IDrop.sol';\n\nimport './console.sol';\n\n/**\n * @title A media value system, with perpetual equity to creators\n * @notice This contract provides an interface to mint media with a market\n * owned by the creator.\n */\ncontract Media is IMedia, ERC721Burnable, ReentrancyGuard, Ownable {\n  using Counters for Counters.Counter;\n  using SafeMath for uint256;\n  using EnumerableSet for EnumerableSet.UintSet;\n\n  /* *******\n   * Globals\n   * *******\n   */\n\n  // Address for the market\n  address public marketContract;\n\n    // Address for the app\n  address public appContract;\n\n  // Mapping from token to previous owner of the token\n  mapping(uint256 => address) public previousTokenOwners;\n\n  // Mapping from token id to creator address\n  mapping(uint256 => address) public tokenCreators;\n\n  // Mapping from creator address to their (enumerable) set of created tokens\n  mapping(address => EnumerableSet.UintSet) private _creatorTokens;\n\n  // Mapping from token id to sha256 hash of content\n  mapping(uint256 => bytes32) public tokenContentHashes;\n\n  // Mapping from token id to sha256 hash of metadata\n  mapping(uint256 => bytes32) public tokenMetadataHashes;\n\n  // Mapping from token id to metadataURI\n  mapping(uint256 => string) private _tokenMetadataURIs;\n\n  // Mapping from contentHash to bool\n  mapping(bytes32 => bool) private _contentHashes;\n\n  //keccak256(\"Permit(address spender,uint256 tokenId,uint256 nonce,uint256 deadline)\");\n  bytes32 public constant PERMIT_TYPEHASH = 0x49ecf333e5b8c95c40fdafc95c1ad136e8914a8fb55e9dc8bb01eaa83a2df9ad;\n\n  //keccak256(\"MintWithSig(bytes32 contentHash,bytes32 metadataHash,uint256 creatorShare,uint256 nonce,uint256 deadline)\");\n  bytes32 public constant MINT_WITH_SIG_TYPEHASH = 0x2952e482b8e2b192305f87374d7af45dc2eafafe4f50d26a0c02e90f2fdbe14b;\n\n  // Mapping from address to token id to permit nonce\n  mapping(address => mapping(uint256 => uint256)) public permitNonces;\n\n  // Mapping from address to mint with sig nonce\n  mapping(address => uint256) public mintWithSigNonces;\n\n  /*\n   *     bytes4(keccak256('name()')) == 0x06fdde03\n   *     bytes4(keccak256('symbol()')) == 0x95d89b41\n   *     bytes4(keccak256('tokenURI(uint256)')) == 0xc87b56dd\n   *     bytes4(keccak256('tokenMetadataURI(uint256)')) == 0x157c3df9\n   *\n   *     => 0x06fdde03 ^ 0x95d89b41 ^ 0xc87b56dd ^ 0x157c3df9 == 0x4e222e66\n   */\n  bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x4e222e66;\n\n  Counters.Counter private _tokenIdTracker;\n\n  /* *********\n   * Modifiers\n   * *********\n   */\n\n  /**\n   * @notice Require that the token has not been burned and has been minted\n   */\n  modifier onlyExistingToken(uint256 tokenId) {\n    require(_exists(tokenId), 'Media: nonexistent token');\n    _;\n  }\n\n  /**\n   * @notice Require that the token has had a content hash set\n   */\n  modifier onlyTokenWithContentHash(uint256 tokenId) {\n    require(tokenContentHashes[tokenId] != 0, 'Media: token does not have hash of created content');\n    _;\n  }\n\n  /**\n   * @notice Require that the token has had a metadata hash set\n   */\n  modifier onlyTokenWithMetadataHash(uint256 tokenId) {\n    require(tokenMetadataHashes[tokenId] != 0, 'Media: token does not have hash of its metadata');\n    _;\n  }\n\n  /**\n   * @notice Ensure that the provided spender is the approved or the owner of\n   * the media for the specified tokenId\n   */\n  modifier onlyApprovedOrOwner(address spender, uint256 tokenId) {\n    require(_isApprovedOrOwner(spender, tokenId), 'Media: Only approved or owner');\n    _;\n  }\n\n  /**\n   * @notice Ensure the token has been created (even if it has been burned)\n   */\n  modifier onlyTokenCreated(uint256 tokenId) {\n    require(_tokenIdTracker.current() > tokenId, 'Media: token with that id does not exist');\n    _;\n  }\n\n  /**\n   * @notice Ensure that the provided URI is not empty\n   */\n  modifier onlyValidURI(string memory uri) {\n    require(bytes(uri).length != 0, 'Media: specified uri must be non-empty');\n    _;\n  }\n\n  /**\n   * @notice require that the msg.sender is the configured app, market or contract owner\n   */\n  modifier onlyAuthorizedCaller() {\n    require(appContract == msg.sender || marketContract == msg.sender || owner() == msg.sender, 'Media: Only app contract, market contract or owner');\n    _;\n  }\n\n  /**\n   * @notice On deployment, set the market contract address and register the\n   * ERC721 metadata interface\n   */\n  constructor(string memory name, string memory symbol) ERC721(name, symbol) {\n    _registerInterface(_INTERFACE_ID_ERC721_METADATA);\n  }\n\n  /**\n   * @notice Sets the market contract address. This address is the only permitted address that\n   * can call the mutable functions.\n   */\n  function configure(address appContractAddr, address marketContractAddr) external onlyOwner {\n    require(appContractAddr != address(0), 'Media: cannot set app contract as zero address');\n    appContract = appContractAddr;\n    require(marketContractAddr != address(0), 'Media: cannot set market contract as zero address');\n    marketContract = marketContractAddr;\n  }\n\n  /* **************\n   * View Functions\n   * **************\n   */\n\n  /**\n   * @notice return the URI for a particular piece of media with the specified tokenId\n   * @dev This function is an override of the base OZ implementation because we\n   * will return the tokenURI even if the media has been burned. In addition, this\n   * protocol does not support a base URI, so relevant conditionals are removed.\n   * @return the URI for a token\n   */\n  function tokenURI(uint256 tokenId) public view override onlyTokenCreated(tokenId) returns (string memory) {\n    string memory _tokenURI = _tokenURIs[tokenId];\n\n    return _tokenURI;\n  }\n\n  /**\n   * @notice Return the metadata URI for a piece of media given the token URI\n   * @return the metadata URI for the token\n   */\n  function tokenMetadataURI(uint256 tokenId) external view override onlyTokenCreated(tokenId) returns (string memory) {\n    return _tokenMetadataURIs[tokenId];\n  }\n\n  /* ****************\n   * Public Functions\n   * ****************\n   */\n\n  /**\n   * @notice see IMedia\n   */\n  function mint(MediaData memory data, IMarket.BidShares memory bidShares) public override nonReentrant {\n    _mintForCreator(msg.sender, data, bidShares);\n  }\n\n  /**\n   * @notice see IMedia\n   */\n  function mintWithSig(\n    address creator,\n    MediaData memory data,\n    IMarket.BidShares memory bidShares,\n    EIP712Signature memory sig\n  ) public override nonReentrant {\n    require(sig.deadline == 0 || sig.deadline >= block.timestamp, 'Media: mintWithSig expired');\n\n    bytes32 domainSeparator = _calculateDomainSeparator();\n\n    bytes32 digest = keccak256(\n      abi.encodePacked(\n        '\\x19\\x01',\n        domainSeparator,\n        keccak256(abi.encode(MINT_WITH_SIG_TYPEHASH, data.contentHash, data.metadataHash, bidShares.creator.value, mintWithSigNonces[creator]++, sig.deadline))\n      )\n    );\n\n    address recoveredAddress = ecrecover(digest, sig.v, sig.r, sig.s);\n\n    require(recoveredAddress != address(0) && creator == recoveredAddress, 'Media: Signature invalid');\n\n    _mintForCreator(recoveredAddress, data, bidShares);\n  }\n\n  /**\n   * @notice see IMedia\n   */\n  function getRecentToken(address creator) public view returns (uint256) {\n    uint256 length = EnumerableSet.length(_creatorTokens[creator]) - 1;\n\n    return EnumerableSet.at(_creatorTokens[creator], length);\n  }\n\n  /**\n   * @notice see IMedia\n   */\n  function auctionTransfer(uint256 tokenId, address recipient) external override {\n    require(msg.sender == marketContract, 'Media: only market contract');\n    previousTokenOwners[tokenId] = ownerOf(tokenId);\n    _safeTransfer(ownerOf(tokenId), recipient, tokenId, '');\n  }\n\n  /**\n   * @notice see IMedia\n   */\n  function setAsk(uint256 tokenId, IMarket.Ask memory ask) public override nonReentrant onlyApprovedOrOwner(msg.sender, tokenId) {\n    IMarket(marketContract).setAsk(tokenId, ask);\n  }\n\n  /**\n   * @notice see IMedia\n   */\n  function removeAsk(uint256 tokenId) external override nonReentrant onlyApprovedOrOwner(msg.sender, tokenId) {\n    IMarket(marketContract).removeAsk(tokenId);\n  }\n\n  /**\n   * @notice see IMedia\n   */\n  function setBid(uint256 tokenId, IMarket.Bid memory bid) public override nonReentrant onlyExistingToken(tokenId) {\n    require(msg.sender == bid.bidder, 'Market: Bidder must be msg sender');\n    IMarket(marketContract).setBid(tokenId, bid, msg.sender);\n  }\n\n  /**\n   * @notice see IMedia\n   */\n  function removeBid(uint256 tokenId) external override nonReentrant onlyTokenCreated(tokenId) {\n    IMarket(marketContract).removeBid(tokenId, msg.sender);\n  }\n   \n  /**\n   * @notice see IMedia\n   */\n  function removeBidFromApp(uint256 tokenId, address sender) external override nonReentrant onlyTokenCreated(tokenId) onlyAuthorizedCaller {\n    IMarket(marketContract).removeBid(tokenId, sender);\n  }\n\n  function setAskFromApp(uint256 tokenId, IMarket.Ask memory ask) public override nonReentrant onlyExistingToken(tokenId) onlyAuthorizedCaller {\n    IMarket(marketContract).setAsk(tokenId, ask);\n  }\n\n  function setBidFromApp(uint256 tokenId, IMarket.Bid memory bid, address sender) external override nonReentrant onlyExistingToken(tokenId) onlyAuthorizedCaller {\n    require(sender == bid.bidder, 'Market: Bidder must be msg sender');\n    IMarket(marketContract).setBid(tokenId, bid, sender);\n  }\n\n  function setLazyBidFromApp(uint256 dropId, IDrop.Egg memory egg, IMarket.Bid memory bid, address sender) external override nonReentrant onlyAuthorizedCaller {\n    require(sender == bid.bidder, 'Market: Bidder must be msg sender');\n    IMarket(marketContract).setLazyBidFromApp(dropId, egg, bid, sender);\n  }\n\n  function removeLazyBidFromApp(uint256 dropId, string memory name, address sender) external override nonReentrant onlyAuthorizedCaller {\n    IMarket(marketContract).removeLazyBidFromApp(dropId, name, sender);\n  }\n\n  function acceptLazyBidFromApp(uint256 dropId, IDrop.Egg memory egg, IZoo.Token memory token, IMarket.Bid memory bid) external override nonReentrant onlyAuthorizedCaller {\n    IMarket(marketContract).acceptLazyBidFromApp(dropId, egg, token, bid);\n  }\n  \n  /**\n   * @notice see IMedia\n   */\n  function acceptBid(uint256 tokenId, IMarket.Bid memory bid) public override nonReentrant onlyApprovedOrOwner(msg.sender, tokenId) {\n    IMarket(marketContract).acceptBid(tokenId, bid);\n  }\n\n  /**\n   * @notice see IMedia\n   */\n  function acceptBidFromApp(uint256 tokenId, IMarket.Bid memory bid, address sender) external override nonReentrant onlyApprovedOrOwner(sender, tokenId) onlyAuthorizedCaller {\n    IMarket(marketContract).acceptBid(tokenId, bid);\n  }\n\n  /**\n   * @notice Burn a token.\n   * @dev Only callable if the media owner is also the creator.\n   */\n  function burn(uint256 tokenId) public override nonReentrant onlyExistingToken(tokenId) onlyApprovedOrOwner(msg.sender, tokenId) {\n    address owner = ownerOf(tokenId);\n\n    require(tokenCreators[tokenId] == owner, 'Media: owner is not creator of media');\n\n    _burn(tokenId);\n  }\n\n  /**\n   * @notice Revoke the approvals for a token. The provided `approve` function is not sufficient\n   * for this protocol, as it does not allow an approved address to revoke it's own approval.\n   * In instances where a 3rd party is interacting on a user's behalf via `permit`, they should\n   * revoke their approval once their task is complete as a best practice.\n   */\n  function revokeApproval(uint256 tokenId) external override nonReentrant {\n    require(msg.sender == getApproved(tokenId), 'Media: caller not approved address');\n    _approve(address(0), tokenId);\n  }\n\n  /**\n   * @notice see IMedia\n   * @dev only callable by approved or owner\n   */\n  function updateTokenURI(uint256 tokenId, string calldata _tokenURI)\n    external\n    override\n    nonReentrant\n    onlyApprovedOrOwner(msg.sender, tokenId)\n    onlyTokenWithContentHash(tokenId)\n    onlyValidURI(_tokenURI)\n  {\n    _setTokenURI(tokenId, _tokenURI);\n    emit TokenURIUpdated(tokenId, msg.sender, _tokenURI);\n  }\n\n  /**\n   * @notice see IMedia\n   * @dev only callable by approved or owner\n   */\n  function updateTokenMetadataURI(uint256 tokenId, string calldata metadataURI)\n    external\n    override\n    nonReentrant\n    onlyApprovedOrOwner(msg.sender, tokenId)\n    onlyTokenWithMetadataHash(tokenId)\n    onlyValidURI(metadataURI)\n  {\n    _setTokenMetadataURI(tokenId, metadataURI);\n    emit TokenMetadataURIUpdated(tokenId, msg.sender, metadataURI);\n  }\n\n  /**\n   * @notice See IMedia\n   * @dev This method is loosely based on the permit for ERC-20 tokens in  EIP-2612, but modified\n   * for ERC-721.\n   */\n  function permit(\n    address spender,\n    uint256 tokenId,\n    EIP712Signature memory sig\n  ) public override nonReentrant onlyExistingToken(tokenId) {\n    require(sig.deadline == 0 || sig.deadline >= block.timestamp, 'Media: Permit expired');\n    require(spender != address(0), 'Media: spender cannot be 0x0');\n    bytes32 domainSeparator = _calculateDomainSeparator();\n\n    bytes32 digest = keccak256(\n      abi.encodePacked('\\x19\\x01', domainSeparator, keccak256(abi.encode(PERMIT_TYPEHASH, spender, tokenId, permitNonces[ownerOf(tokenId)][tokenId]++, sig.deadline)))\n    );\n\n    address recoveredAddress = ecrecover(digest, sig.v, sig.r, sig.s);\n\n    require(recoveredAddress != address(0) && ownerOf(tokenId) == recoveredAddress, 'Media: Signature invalid');\n\n    _approve(spender, tokenId);\n  }\n\n  /* *****************\n   * Private Functions\n   * *****************\n   */\n\n  /**\n   * @notice Creates a new token for `creator`. Its token ID will be automatically\n   * assigned (and available on the emitted {IERC721-Transfer} event), and the token\n   * URI autogenerated based on the base URI passed at construction.\n   *\n   * See {ERC721-_safeMint}.\n   *\n   * On mint, also set the sha256 hashes of the content and its metadata for integrity\n   * checks, along with the initial URIs to point to the content and metadata. Attribute\n   * the token ID to the creator, mark the content hash as used, and set the bid shares for\n   * the media's market.\n   *\n   * Note that although the content hash must be unique for future mints to prevent duplicate media,\n   * metadata has no such requirement.\n   */\n  function _mintForCreator(\n    address creator,\n    MediaData memory data,\n    IMarket.BidShares memory bidShares\n  ) internal onlyValidURI(data.tokenURI) onlyValidURI(data.metadataURI) {\n    require(data.contentHash != 0, 'Media: content hash must be non-zero');\n    // require(_contentHashes[data.contentHash] == false, 'Media: a token has already been created with this content hash');\n    require(data.metadataHash != 0, 'Media: metadata hash must be non-zero');\n\n    uint256 tokenId = _tokenIdTracker.current();\n\n    _safeMint(creator, tokenId);\n    _tokenIdTracker.increment();\n    _setTokenContentHash(tokenId, data.contentHash);\n    _setTokenMetadataHash(tokenId, data.metadataHash);\n    _setTokenMetadataURI(tokenId, data.metadataURI);\n    _setTokenURI(tokenId, data.tokenURI);\n    _creatorTokens[creator].add(tokenId);\n    _contentHashes[data.contentHash] = true;\n\n    tokenCreators[tokenId] = creator;\n    previousTokenOwners[tokenId] = creator;\n    IMarket(marketContract).setBidShares(tokenId, bidShares);\n  }\n\n  function _setTokenContentHash(uint256 tokenId, bytes32 contentHash) internal virtual onlyExistingToken(tokenId) {\n    tokenContentHashes[tokenId] = contentHash;\n  }\n\n  function _setTokenMetadataHash(uint256 tokenId, bytes32 metadataHash) internal virtual onlyExistingToken(tokenId) {\n    tokenMetadataHashes[tokenId] = metadataHash;\n  }\n\n  function _setTokenMetadataURI(uint256 tokenId, string memory metadataURI) internal virtual onlyExistingToken(tokenId) {\n    _tokenMetadataURIs[tokenId] = metadataURI;\n  }\n\n  /**\n   * @notice Destroys `tokenId`.\n   * @dev We modify the OZ _burn implementation to\n   * maintain metadata and to remove the\n   * previous token owner from the piece\n   */\n  function _burn(uint256 tokenId) internal override {\n    string memory _tokenURI = _tokenURIs[tokenId];\n\n    super._burn(tokenId);\n\n    if (bytes(_tokenURI).length != 0) {\n      _tokenURIs[tokenId] = _tokenURI;\n    }\n\n    delete previousTokenOwners[tokenId];\n  }\n\n  /**\n   * @notice transfer a token and remove the ask for it.\n   */\n  function _transfer(\n    address from,\n    address to,\n    uint256 tokenId\n  ) internal override {\n    IMarket(marketContract).removeAsk(tokenId);\n\n    super._transfer(from, to, tokenId);\n  }\n\n  /**\n   * @dev Calculates EIP712 DOMAIN_SEPARATOR based on the current contract and chain ID.\n   */\n  function _calculateDomainSeparator() internal view returns (bytes32) {\n    uint256 chainId;\n    /* solium-disable-next-line */\n    assembly {\n      chainId := chainid()\n    }\n\n    return\n      keccak256(\n        abi.encode(\n          keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'),\n          keccak256(bytes('ZOO')),\n          keccak256(bytes('1')),\n          chainId,\n          address(this)\n        )\n      );\n  }\n\n  function _hashToken(address owner, IZoo.Token memory token) private view returns (IZoo.Token memory) {\n    console.log('_hashToken', token.data.tokenURI, token.data.metadataURI);\n    token.data.contentHash = keccak256(abi.encodePacked(token.data.tokenURI, block.number, owner));\n    token.data.metadataHash = keccak256(abi.encodePacked(token.data.metadataURI, block.number, owner));\n    return token;\n  }\n\n  function mintToken(address owner, IZoo.Token memory token) external override onlyAuthorizedCaller returns (IZoo.Token memory) {\n    console.log('mintToken', owner, token.name, token.data.tokenURI);\n    token = _hashToken(owner, token);\n    _mintForCreator(owner, token.data, token.bidShares);\n    uint256 id = getRecentToken(owner);\n    token.id = id;\n    return token;\n  }\n\n  function burnToken(address owner, uint256 tokenID) external override nonReentrant onlyExistingToken(tokenID) onlyApprovedOrOwner(owner, tokenID) {\n    _burn(tokenID);\n  }\n\n  /**\n   * @notice Helper to check that token has not been burned or minted\n   */\n  function tokenExists(uint256 tokenID) public view override returns (bool) {\n    return _exists(tokenID);\n  }\n\n  function tokenCreator(uint256 tokenID) public view override returns (address) {\n    return tokenCreators[tokenID];\n  }\n\n  function previousTokenOwner(uint256 tokenID) public view override returns (address) {\n    return previousTokenOwners[tokenID];\n  }\n\n}"
    },
    "src/NFTStaking.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"./interfaces/I721Stake.sol\";\nimport \"./Owned.sol\";\n\ncontract ZooNFTStaker is owned, I721Stake {\n    using SafeMath for uint256;\n\tusing SafeMath for uint40;\n    bool stakeLive;\n    uint256 public totalStakers;\n\n    uint40 public minumTime;\n    uint40 public mediumTime;\n    uint40 public maximumTime;\n    uint40 public timestampSeconds;\n\n    struct Percentage {\n        bool valid;\n        uint256 amount;\n    }\n\n    mapping(uint256 => Percentage) public percentage;\n\n    IERC20 public RewardCoin;\n\n    mapping(address => Staker) public stakers;\n    mapping (address => bool) public frozenStaker;\n    mapping(address => mapping (uint => bool)) public frozenNft;\n\n    function updateMinumTime(uint40 _new) public onlyOwner{\n        minumTime = _new;\n    }\n\n    function updateMediumTime(uint40 _new) public onlyOwner{\n        mediumTime = _new;\n    }\n\n    function updateTimeStampSeconds(uint40 _new) public onlyOwner{\n        timestampSeconds = _new;\n    }\n\n    function updatemMaximumTime(uint40 _new) public onlyOwner{\n        maximumTime = _new;\n    }\n\n    function updatePercentage(uint256 percentageLevel, uint256 amount) public onlyOwner{\n        require(percentage[percentageLevel].valid, \"percentage not active\");\n        percentage[percentageLevel].amount = amount;\n    }\n\n    function freezeStaker(address target, bool freeze) onlyOwner public {\n        frozenStaker[target] = freeze;\n    }\n\n     function toggleStakeStatus() onlyOwner public {\n        stakeLive = !stakeLive;\n    }\n\n    function freezeNft(address NftContract, uint256 _tokenId,  bool freeze) onlyOwner override public {\n        frozenNft[NftContract][_tokenId] = freeze;\n    }\n\n    function isFrozenStaker(address _addr) public view  override returns (bool) {\n        return frozenStaker[_addr];\n    }\n\n    function isFrozenNft(address NftContract, uint256 _tokenId) public override view returns (bool) {\n        return frozenNft[NftContract][_tokenId];\n    }\n\n\n    constructor(address _rewardCoin) {\n        require(isContract(_rewardCoin), \"Reward coin not contract\");\n        RewardCoin = IERC20(_rewardCoin);\n        minumTime = 30;\n        mediumTime = 90;\n        maximumTime = 180;\n        timestampSeconds = 86400;\n        percentage[1].valid = true;\n        percentage[1].amount = 100;\n        percentage[2].valid = true;\n        percentage[2].amount = 200;\n        percentage[3].valid = true;\n        percentage[3].amount = 300;\n    }\n\n    modifier stakingModifier (address NftContract, uint256 _tokenId){\n        require(!isFrozenStaker(msg.sender), \"Caller Not allowed to stake\");\n        require(!isFrozenNft(NftContract, _tokenId), \"NFT Not allowed to be staked\");\n        require(IERC721(NftContract).balanceOf(msg.sender) > 0, \"Caller does't own the token\");\n        _;\n    }\n\n    function stake(address NftContract, uint256 _tokenId) stakingModifier(NftContract, _tokenId) override external {\n        require(stakeLive, \"Staking is not live\");\n        _stake(NftContract, _tokenId);\n        emit NewStake(msg.sender, NftContract, _tokenId);\n    }\n\n    function _stake(address NftContract, uint256 _tokenId) internal {\n        Staker storage staker = stakers[msg.sender];\n\n        staker.tokens[NftContract][_tokenId].staked = true;\n\n        staker.tokens[NftContract][_tokenId].period.push(StakingTime({\n            time: uint40(block.timestamp)\n        }));\n\n        IERC721(NftContract).safeTransferFrom(msg.sender, address(this), _tokenId);\n\n        emit NewStake(msg.sender, NftContract, _tokenId);\n    }\n\n    function unstake(address NftContract, uint256 _tokenId)  stakingModifier(NftContract, _tokenId) override public {\n       _unstake(NftContract, _tokenId);\n       emit unStaked(msg.sender, NftContract, _tokenId);\n    } \n\n    function rewardAmount(address _addr, address NftContract, uint256 _tokenId) view external override returns(uint256[] memory) {\n        Staker storage staker = stakers[_addr];\n\n        uint256[] memory rewardValues = new uint256[](2);\n\n        uint256 value = 0;\n        uint256 totalDaysStaked = 0;\n        \n        for(uint256 i = 0; i < staker.tokens[NftContract][_tokenId].period.length; i++) {\n            StakingTime storage StakingTimeInstance = staker.tokens[NftContract][_tokenId].period[i];\n            uint daysStaked = (uint40(block.timestamp) - StakingTimeInstance.time) / timestampSeconds;\n            if((daysStaked >= minumTime && daysStaked < mediumTime)){\n                value += percentage[1].amount;\n            }\n            else if(daysStaked >= mediumTime && daysStaked < maximumTime){\n                value += percentage[2].amount;\n            }\n            else if(daysStaked >= maximumTime){\n                value += percentage[3].amount;\n            }\n            else{\n                value += 0;\n            }\n            \n            totalDaysStaked += daysStaked;\n\n        }\n\n        rewardValues[0] = value;\n        rewardValues[1] = totalDaysStaked;\n\n        return (rewardValues);\n    }\n\n    function _unstake(address NftContract, uint256 _tokenId) public {\n       uint256[] memory rewardValues = this.rewardAmount(msg.sender, NftContract, _tokenId);\n       require(rewardValues[1] > minumTime, \"Not yet allowed to withdraw\");\n       IERC721(NftContract).safeTransferFrom(address(this), msg.sender, _tokenId);\n       RewardCoin.transferFrom(owner, msg.sender, rewardValues[0]);\n    }\n\n\n    function updateRewardCoin(address _newRewardCoin) public override onlyOwner {\n        RewardCoin = IERC20(_newRewardCoin);\n    }    \n\n    function isContract(address addr) internal view returns (bool) {\n        uint size;\n        assembly { size := extcodesize(addr) }\n        return size > 0;\n    }\n\n     function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external override returns (bytes4) {\n        return bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"));\n    }\n\n}"
    },
    "src/Owned.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n\ncontract owned {\n    address public owner;\n\n    constructor() {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner, \"Caller should be Owner\");\n        _;\n    }\n\n    function transferOwnership(address newOwner) onlyOwner public {\n        owner = newOwner;\n    }\n}\n"
    },
    "src/Random.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.4;\n\ncontract Random {\n    uint8 public max = 100;\n\n    constructor() {}\n\n    struct Commit {\n        bytes32 commit;\n        uint64 block;\n        bool revealed;\n    }\n\n    mapping(address => Commit) public commits;\n\n    function commit(bytes32 dataHash) public {\n        commits[msg.sender].commit = dataHash;\n        commits[msg.sender].block = uint64(block.number);\n        commits[msg.sender].revealed = false;\n        emit CommitHash(\n            msg.sender,\n            commits[msg.sender].commit,\n            commits[msg.sender].block\n        );\n    }\n\n    event CommitHash(address sender, bytes32 dataHash, uint64 block);\n\n    function reveal(bytes32 revealHash) public {\n        //make sure it hasn't been revealed yet and set it to revealed\n        require(\n            commits[msg.sender].revealed == false,\n            \"CommitReveal::reveal: Already revealed\"\n        );\n        commits[msg.sender].revealed = true;\n        //require that they can produce the committed hash\n        require(\n            getHash(revealHash) == commits[msg.sender].commit,\n            \"CommitReveal::reveal: Revealed hash does not match commit\"\n        );\n        //require that the block number is greater than the original block\n        require(\n            uint64(block.number) > commits[msg.sender].block,\n            \"CommitReveal::reveal: Reveal and commit happened on the same block\"\n        );\n        //require that no more than 250 blocks have passed\n        require(\n            uint64(block.number) <= commits[msg.sender].block + 250,\n            \"CommitReveal::reveal: Revealed too late\"\n        );\n        //get the hash of the block that happened after they committed\n        bytes32 blockHash = blockhash(commits[msg.sender].block);\n        //hash that with their reveal that so miner shouldn't know and mod it with some max number you want\n        // uint256 random = uint256(\n        //     keccak256(abi.encodePacked(blockHash, revealHash))\n        // ) % max;\n\n        bytes32 bytesHash = keccak256(abi.encodePacked(blockHash, revealHash));\n\n        uint256 bytesHashToUint = uint256(bytesHash);\n\n        uint256 random = bytesHashToUint % max;\n\n        emit RevealHash(msg.sender, revealHash, uint8(random));\n    }\n\n    event RevealHash(address sender, bytes32 revealHash, uint8 random);\n\n    function getHash(bytes32 data) public view returns (bytes32) {\n        return keccak256(abi.encodePacked(address(this), data));\n    }\n\n    function revealAnswer(bytes32 answer, bytes32 salt) public {\n        //make sure it hasn't been revealed yet and set it to revealed\n        require(\n            commits[msg.sender].revealed == false,\n            \"CommitReveal::revealAnswer: Already revealed\"\n        );\n        commits[msg.sender].revealed = true;\n        //require that they can produce the committed hash\n        require(\n            getSaltedHash(answer, salt) == commits[msg.sender].commit,\n            \"CommitReveal::revealAnswer: Revealed hash does not match commit\"\n        );\n        emit RevealAnswer(msg.sender, answer, salt);\n    }\n\n    event RevealAnswer(address sender, bytes32 answer, bytes32 salt);\n\n    function getSaltedHash(bytes32 data, bytes32 salt)\n        public\n        view\n        returns (bytes32)\n    {\n        return keccak256(abi.encodePacked(address(this), data, salt));\n    }\n}\n"
    },
    "src/test/BadBidder.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n// FOR TEST PURPOSES ONLY. NOT PRODUCTION SAFE\n\npragma solidity >=0.8.4;\n\nimport { IAuctionHouse } from \"../interfaces/IAuctionHouse.sol\";\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n// This contract is meant to mimic a bidding contract that does not implement on IERC721 Received,\n// and thus should cause a revert when an auction is finalized with this as the winning bidder.\ncontract BadBidder {\n    address auction;\n    address zoo;\n\n    constructor(address _auction, address _zoo) {\n        auction = _auction;\n        zoo = _zoo;\n    }\n\n    function placeBid(uint256 auctionID, uint256 amount) external payable {\n        IAuctionHouse(auction).createBid(auctionID, amount);\n    }\n\n    function approve(address spender, uint256 amount) external payable {\n        IERC20(zoo).approve(spender, amount);\n    }\n\n    receive() external payable {}\n    fallback() external payable {}\n}\n"
    },
    "src/test/BadERC721.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n// FOR TEST PURPOSES ONLY. NOT PRODUCTION SAFE\n\npragma solidity >=0.8.4;\n\ncontract BadERC721 {\n    function supportsInterface(bytes4 _interface) public pure returns (bool){\n\tif (_interface == bytes4(0)) {\n\t\treturn false;\n\t}\n        return false;\n    }\n}\n"
    },
    "src/test/BNB.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.4;\n\nimport { ERC20 } from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract BNB is ERC20 {\n    constructor () ERC20(\"BNB\", \"BNB\") {}\n\n    function mint(address to, uint256 value) public {\n        super._mint(to, value);\n    }\n}\n"
    },
    "src/test/TestERC721.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n// FOR TEST PURPOSES ONLY. NOT PRODUCTION SAFE\n\npragma solidity >=0.8.4;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\n\ncontract TestERC721 is ERC721 {\n    constructor() ERC721(\"TestERC721\", \"TEST\") {}\n\n    function mint(address to, uint256 tokenID) public {\n        _safeMint(to, tokenID);\n    }\n}\n"
    },
    "src/test/Z1.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.4;\n\nimport { ERC20 } from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract Z1 is ERC20 {\n    constructor () ERC20(\"Z1\", \"Z1\") {}\n\n    function mint(address to, uint256 value) public {\n        super._mint(to, value);\n    }\n}\n"
    },
    "src/uniswapv2/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity >=0.5.0;\n\ninterface IERC20 {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n}\n"
    },
    "src/uniswapv2/interfaces/IUniswapV2Callee.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity >=0.5.0;\n\ninterface IUniswapV2Callee {\n    function uniswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) external;\n}\n"
    },
    "src/uniswapv2/interfaces/IUniswapV2ERC20.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity >=0.5.0;\n\ninterface IUniswapV2ERC20 {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n}"
    },
    "src/uniswapv2/interfaces/IUniswapV2Factory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity >=0.5.0;\n\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n    function migrator() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n    function setMigrator(address) external;\n}\n"
    },
    "src/uniswapv2/interfaces/IUniswapV2Pair.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity >=0.5.0;\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}"
    },
    "src/uniswapv2/interfaces/IUniswapV2Router01.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity >=0.6.2;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}"
    },
    "src/uniswapv2/interfaces/IUniswapV2Router02.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity >=0.6.2;\n\nimport './IUniswapV2Router01.sol';\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}"
    },
    "src/uniswapv2/interfaces/IWETH.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity >=0.5.0;\n\ninterface IWETH {\n    function deposit() external payable;\n    function transfer(address to, uint value) external returns (bool);\n    function withdraw(uint) external;\n}"
    },
    "src/uniswapv2/libraries/TransferHelper.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity >=0.6.0;\n\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\nlibrary TransferHelper {\n    function safeApprove(address token, address to, uint value) internal {\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\n    }\n\n    function safeTransfer(address token, address to, uint value) internal {\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\n    }\n\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\n    }\n\n    function safeTransferETH(address to, uint value) internal {\n        (bool success,) = to.call{value:value}(new bytes(0));\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\n    }\n}\n"
    },
    "src/ZOO.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.4;\n\nimport { AccessControl } from \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport { ERC20 } from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport { ERC20Burnable  } from \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\";\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { Pausable } from \"@openzeppelin/contracts/security/Pausable.sol\";\nimport { SafeERC20 } from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\n\ncontract ZOO is ERC20, ERC20Burnable, Pausable, Ownable, AccessControl {\n    using SafeERC20 for IERC20;\n\n    bytes32 public constant BLACKLIST = keccak256(\"BLACKLIST\");\n    address public bridge;\n    uint256 airdropEnd;\n\n    constructor () ERC20(\"ZOO\", \"ZOO\") {\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        // _pause(); // mainnet launch in paused state\n    }\n\n    function configure(address _bridge) public onlyOwner {\n        bridge = _bridge;\n    }\n\n    function blacklistAddress(address _addr) public onlyOwner {\n        grantRole(BLACKLIST, _addr);\n    }\n\n    function isBlacklisted(address _addr) public view returns (bool) {\n        return hasRole(BLACKLIST, _addr);\n    }\n\n    function _transferAllowed(address _addr) internal view {\n        require(hasRole(BLACKLIST, _addr) == false, \"Address is on blacklist\");\n    }\n\n    function transfer(address _to, uint256 _value) public whenNotPaused override returns (bool) {\n        _transferAllowed(_to);\n        _transferAllowed(msg.sender);\n        return super.transfer(_to, _value);\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public  override whenNotPaused returns (bool) {\n        _transferAllowed(_to);\n        _transferAllowed(_from);\n        _transferAllowed(msg.sender);\n        return super.transferFrom(_from, _to, _value);\n    }\n\n    modifier onlyBridge {\n        require(msg.sender == address(bridge), \"Caller is not the bridge\");\n        _;\n    }\n\n    function bridgeMint(address to, uint256 value) external whenNotPaused onlyBridge {\n        super._mint(to, value);\n    }\n\n    function bridgeBurn(address account, uint256 amount) external whenNotPaused onlyBridge {\n        super._approve(account, msg.sender, amount);\n        super._burn(account, amount);\n    }\n\n    function pause() public onlyOwner whenNotPaused {\n        _pause();\n    }\n\n    function unpause() public onlyOwner whenPaused {\n        _unpause();\n    }\n\n    function mint(address to, uint256 value) public onlyOwner {\n        require(airdropEnd == 0, \"Airdrop cannot be run again after being completed\");\n        super._mint(to, value);\n    }\n\n    function airdrop(address[] memory addresses, uint256[] memory amounts) public onlyOwner returns (uint256) {\n        require(airdropEnd == 0, \"Airdrop cannot be run again after being completed\");\n        require(addresses.length > 0 && addresses.length == amounts.length, \"addresses and amounts must be equal in length\");\n\n        uint256 i;\n        for (i = 0; i < addresses.length; i++) {\n            require(addresses[i] != address(0), \"An address is equal to 0x0\"); // ensure no zero address\n            require(amounts[i] > 0, \"A zero amount is being transfered\");             // cannot assign zero amount\n        }\n\n        // Token distribution\n        for (i = 0; i < addresses.length; i++) {\n            super._mint(addresses[i], amounts[i]);\n        }\n\n        return addresses.length;\n    }\n\n    // Disable after airdrop completed\n    function airdropDone() public onlyOwner {\n        airdropEnd = block.timestamp;\n    }\n}\n"
    },
    "src/ZooDao.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.7.0 <0.9.0;\nimport \"./interfaces/IVoting.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./Owned.sol\";\n\n\ncontract ZOOVoting is IVoting, Ownable {\n\n    IERC20 public ZOO;\n\n    mapping(address => bool) public coreMember;\n    mapping(address => bool) public blocked;\n    mapping(string => Proposal) public proposals;\n    mapping(string => Voter) public voters;\n    mapping(address => mapping(string => VotingAmount)) public votingAmount;\n    uint8 public decimals = 18;\n\n    address public withdrawAddress;\n    uint256 public proposalFee;\n\n    bool proposingLive;\n\n    constructor(IERC20 coinAddress) {\n        ZOO = coinAddress;\n        withdrawAddress = msg.sender;\n        proposalFee = 100;\n    }\n\n    function changeWithdrawAddress(address _newWithdrawAddress) public onlyOwner override {\n        withdrawAddress = _newWithdrawAddress;\n    }\n\n    function changeCoinAddress(address _newCoinAddress) public onlyOwner  {\n        ZOO = IERC20(_newCoinAddress);\n    }\n\n    function proposalFeeAmount(uint256 _newAmount) public onlyOwner {\n        proposalFee = _newAmount;\n    }\n\n    function blockAddress(address target, bool freeze) public onlyOwner override {\n        blocked[target] = freeze;\n    }\n\n    function whitelist_as_core(address target, bool state) public onlyOwner {\n        coreMember[target] = state;\n    }\n    \n    function isBlocked(address _addr) public view  override returns (bool) {\n        return blocked[_addr];\n    }\n\n     function toggleproposingStatus() public onlyOwner {\n        proposingLive = !proposingLive;\n    }\n\n    string[] allProposals;\n    Voter[] allVoters;\n\n\n    function getAllProposals () public view returns(Proposal[] memory) {\n        Proposal[] memory availableProposals = new Proposal[](allProposals.length);\n        \n        for (uint256 i = 0; i < allProposals.length; i++) {\n                availableProposals[i] = proposals[allProposals[i]];\n        }\n\n        return availableProposals;\n    }\n\n    function getAllVoters () public view returns(Voter[] memory) {\n        Voter[] memory availableVoters = new Voter[](allVoters.length);\n        \n        for (uint256 i = 0; i < allVoters.length; i++) {\n                availableVoters[i] = allVoters[i];\n        }\n\n        return availableVoters;\n    }\n\n\n    function addProposals (string memory newProposal, uint40 startTime, uint40 endTime) public {\n        require(proposingLive, \"Not allowed to make a proposal yet\");\n        require(!isBlocked(msg.sender), \"Sender is blocked\");\n        require(!proposals[newProposal].exists, \"proposal already exists\");\n        require(endTime > startTime, \"proposal timeline invalid\");\n\n        if(coreMember[msg.sender] || msg.sender == owner()){\n            proposals[newProposal].proposalType = Type(0);\n        }\n        else{\n            proposals[newProposal].proposalType = Type(1);\n        }\n        proposals[newProposal].proposal = newProposal;\n        proposals[newProposal].exists = true;\n        proposals[newProposal].voteCount = 0;\n        proposals[newProposal].startTime = startTime;\n        proposals[newProposal].endTime = endTime;\n\n        if(startTime <= uint40(block.timestamp)){\n        proposals[newProposal].proposalStatus = Status(0);\n        }\n        else{\n        proposals[newProposal].proposalStatus = Status(1);\n        }\n\n        proposals[newProposal].votes = Votes({approvals: 0, disapprovals: 0});\n\n        allProposals.push(newProposal);\n        IERC20(ZOO).transferFrom(msg.sender, address(this), (proposalFee * 10 ** uint256(decimals)));\n        emit addedProposal(newProposal, startTime);\n\n    }\n\n    function updateProposalStatus (string memory proposal, uint8 _status) public onlyOwner{\n        require(proposals[proposal].exists, \"proposal does not exist\");\n        proposals[proposal].proposalStatus = Status(_status);\n    }\n\n    function voteProposal(string memory proposal, bool choice) public override {\n        require(!isBlocked(msg.sender), \"Sender is blocked\");\n        require(proposals[proposal].exists, \"proposal does not exist\");\n        require(proposals[proposal].proposalStatus != Status.Closed, \"proposal has been closed\");\n        require(proposals[proposal].startTime <= uint40(block.timestamp), \"Not allowed to Vote yet\");\n        require(proposals[proposal].endTime > uint40(block.timestamp), \"Voting has ended\");\n\n        uint256 amount;\n\n        proposals[proposal].voteCount += 1;\n        if(choice == true){\n            votingAmount[msg.sender][proposal].approvedTimes += 1;\n            proposals[proposal].votes.approvals += 1;\n            amount = votingAmount[msg.sender][proposal].approvedTimes * votingAmount[msg.sender][proposal].approvedTimes;\n        }\n        else{\n            votingAmount[msg.sender][proposal].dissaprovedTimes += 1;\n            proposals[proposal].votes.disapprovals += 1;\n            amount = votingAmount[msg.sender][proposal].dissaprovedTimes * votingAmount[msg.sender][proposal].dissaprovedTimes;\n        }\n        voters[proposal].proposal = proposal;\n        voters[proposal].voterAddress = msg.sender;\n        voters[proposal].vote = choice;\n        voters[proposal].timestamp = uint40(block.timestamp);\n\n        allVoters.push(voters[proposal]);\n        IERC20(ZOO).transferFrom(msg.sender, address(this), (amount * 10 ** uint256(decimals)));\n        emit votedProposal(proposal, choice);\n    }\n\n    function withdraw() public onlyOwner {\n      require(IERC20(ZOO).balanceOf(address(this)) > 0, \"Balance is 0\");\n      require(withdrawAddress != address(0), \"the withdraw address is invalid\");\n        (bool os, ) = payable(withdrawAddress).call{\n            value: address(this).balance\n        }(\"\");\n        IERC20(ZOO).transfer(withdrawAddress, IERC20(ZOO).balanceOf(address(this)));\n        require(os);\n   }\n\n}\n"
    },
    "src/ZooKeeper.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\npragma experimental ABIEncoderV2;\n\nimport { Counters } from \"@openzeppelin/contracts/utils/Counters.sol\";\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { SafeMath } from \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport { IDrop } from \"./interfaces/IDrop.sol\";\nimport { IMedia } from \"./interfaces/IMedia.sol\";\nimport { IZoo } from \"./interfaces/IZoo.sol\";\nimport { IERC721Burnable } from \"./interfaces/IERC721Burnable.sol\";\nimport { IUniswapV2Pair } from \"./interfaces/IUniswapV2Pair.sol\";\nimport { IKeeper } from \"./interfaces/IKeeper.sol\";\n\ninterface ICustomDrop{\n    function animalStageYields(string memory name) external returns (IZoo.StageYields memory);\n}\n\ncontract ZooKeeper is Ownable, IZoo, IKeeper {\n  using SafeMath for uint256;\n  using Counters for Counters.Counter;\n\n  Counters.Counter public dropIDs;\n  Counters.Counter private whitelistedCount;\n\n  struct Feeding{\n    uint256 count;\n    uint40 lastTimeFed;\n  }\n    bool public allowHatching;\n    bool public allowFeeding;\n    bool public allowBreeding;\n\n  mapping(uint256 => address) public drops;\n\n  mapping(address => uint256) public dropAddresses;\n\n  mapping(uint256 => IZoo.Token) public tokens;\n\n  mapping(uint256 => uint256) public EggDrop;\n\n  mapping(uint256 => Feeding) public feededTimes;\n\n  uint256 public namePrice;\n  uint256 public BNBPrice;\n  address public BNB;\n\n  IMedia public media;\n  IERC20 public zoo;\n  IUniswapV2Pair public pair;\n  address public bridge;\n  bool public unlocked;\n\n  modifier onlyBridge() {\n    require(msg.sender == bridge);\n    _;\n  }\n\n  function configure(\n    address _media,\n    address _zoo,\n    address _pair,\n    address _bridge,\n    bool _unlocked\n  ) public onlyOwner {\n    media = IMedia(_media);\n    zoo = IERC20(_zoo);\n    pair = IUniswapV2Pair(_pair);\n    bridge = _bridge;\n    unlocked = _unlocked;\n  }\n\n  function addDrop(address dropAddress) public onlyOwner returns (uint256) {\n    require(dropAddresses[dropAddress] == 0, \"Drop already added\");\n    IDrop drop = IDrop(dropAddress);\n    dropIDs.increment();\n    uint256 dropID = dropIDs.current();\n    drops[dropID] = dropAddress;\n    dropAddresses[dropAddress] = dropID;\n    emit AddDrop(dropAddress, drop.title(), drop.totalSupply());\n    return dropID;\n  }\n\n  function setNamePrice(uint256 price) public onlyOwner {\n    namePrice = price.mul(10**18);\n  }\n\n\n  function setBNBPrice(uint256 price) public onlyOwner {\n    BNBPrice = price;\n  }\n\n  function changeAllowance(bool _allowHatching, bool _allowFeeding, bool _allowBreeding) public onlyOwner {\n      allowHatching = _allowHatching;\n      allowFeeding = _allowFeeding;\n      allowBreeding = _allowBreeding;\n  }\n\n  function setBNB(address _bnb) public onlyOwner {\n    BNB = _bnb;\n  }\n\n  function mint(address owner, IZoo.Token memory token) private returns (IZoo.Token memory) {\n    token = media.mintToken(owner, token);\n    tokens[token.id] = token;\n    EggDrop[token.id] = token.dropEgg;\n    emit Mint(owner, token.id);\n    return token;\n  }\n\n  function burn(address owner, uint256 tokenID) private {\n  \n    media.burnToken(owner, tokenID);\n    tokens[tokenID].meta.burned = true;\n    emit Burn(owner, tokenID);\n  }\n\n  function swap(\n    address owner,\n    uint256 tokenID,\n    uint256 chainId\n  ) external onlyBridge {\n\n    burn(owner, tokenID);\n    tokens[tokenID].meta.swapped = true;\n    emit Swap(owner, tokenID, chainId);\n  }\n\n  function remint(\n    address owner,\n    IZoo.Token calldata token\n  ) external onlyBridge {\n    mint(owner, token);\n  }\n\n  function updateTokenUris(uint256 tokenId, uint256 dropId) public {\n    IDrop drop = IDrop(drops[dropId]);\n    media.updateTokenURI(tokens[tokenId].dropEgg, drop.getEgg(tokens[tokenId].dropEgg).data.tokenURI);\n    media.updateTokenMetadataURI(tokens[tokenId].dropEgg, drop.getEgg(tokens[tokenId].dropEgg).data.metadataURI);\n  }\n\n  function mintEgg(uint256 eggId, uint256 dropID, address owner) internal returns (IZoo.Token memory) {\n    IDrop drop = IDrop(drops[dropID]);\n    IZoo.Token memory egg = drop.newEgg(eggId);\n\n    egg = mint(owner, egg);\n    EggDrop[egg.id] = eggId;\n\n    emit BuyEgg(owner, egg.id);\n    return egg;\n  }\n\n   function buyEggsWithBNB(uint256 eggId, uint256 dropID, uint256 quantity) public {\n\n    // Ensure enough BNB was sent\n    require(IERC20(BNB).balanceOf(msg.sender) >= (BNBPrice * quantity), \"Not enough BNB\");\n\n    for (uint8 i = 0; i < quantity; i++) {\n      mintEgg(eggId, dropID, msg.sender);\n    }\n\n    IERC20(BNB).transferFrom(msg.sender, address(this), BNBPrice);\n  }\n\n   function buyEggsBNB(uint256 eggId, uint256 dropID, uint256 quantity) public payable {\n\n    // Ensure enough BNB was sent\n    IDrop drop = IDrop(drops[dropID]);\n    uint256 bnbPrice = (drop.eggPrice(eggId) + (18000 * (10 ** 18))) / zooPriceBNB(); // 420k ZOO in BNB\n    require(msg.value >= bnbPrice * quantity, \"Not enough BNB\");\n\n    for (uint8 i = 0; i < quantity; i++) {\n      mintEgg(eggId, dropID, msg.sender);\n    }\n  }\n\n\n  function buyEgg(uint256 eggId,uint256 dropID, address buyer) private returns (IZoo.Token memory) {\n\n    IDrop drop = IDrop(drops[dropID]);\n    uint256 price = drop.eggPrice(eggId);\n\n    zoo.transferFrom(buyer, address(this), price);\n\n    return mintEgg(eggId, dropID, buyer);\n  }\n\n  function buyEggs(uint256 eggId, uint256 dropID, uint256 quantity) public {\n    IDrop drop = IDrop(drops[dropID]);\n    uint256 price = drop.eggPrice(eggId);\n    require(zoo.balanceOf(msg.sender) >= price * quantity, \"Not enough ZOO\");\n    for (uint8 i = 0; i < quantity; i++) {\n      buyEgg(eggId, dropID, msg.sender);\n    }\n  }\n\n  function dropEggs(uint256 eggId, uint256 dropID,address buyer) override public {\n    IDrop drop = IDrop(drops[dropID]);\n    require(msg.sender == drop.EggDropAddress(), \"wrong egg dropper\");\n    mintEgg(eggId, dropID, buyer);\n  }\n\n  function hatchEgg(uint256 dropID, uint256 eggID) public returns (IZoo.Token memory) {\n    require(allowHatching, \"Not allowed to Hatch\");\n    IDrop drop = IDrop(drops[dropID]);\n    uint256 price = drop.eggPrice(EggDrop[eggID]);\n    require(zoo.balanceOf(msg.sender) >= price, \"Not enough ZOO\");\n    require(unlocked, \"Game is not unlocked yet\");\n    require(media.tokenExists(eggID), \"Egg is burned or does not exist\");\n    require(media.ownerOf(eggID) == msg.sender, \"Not owner of EGG\");\n\n    IZoo.Token memory animal = getAnimal(dropID, eggID);\n    animal.meta.eggID = eggID;\n    animal.meta.dropID = dropID;\n    animal.dropEgg = EggDrop[eggID];\n\n    animal = mint(msg.sender, animal);\n\n    zoo.transferFrom(msg.sender, address(this), price);\n\n    burn(msg.sender, eggID);\n\n    emit Hatch(msg.sender, eggID, animal.id);\n    return animal;\n  }\n\n\n  function feedAnimal (uint256 animal, uint256 dropID) public {\n    require(allowFeeding, \"Not allowed to Feed\");\n    require(tokens[animal].kind != IZoo.Type.BASE_EGG || tokens[animal].kind != IZoo.Type.HYBRID_EGG, \"token not animal\");\n    IDrop drop = IDrop(drops[dropID]);\n    uint256 price = drop.eggPrice(tokens[animal].dropEgg);\n    require(zoo.balanceOf(msg.sender) >= price, \"Not enough ZOO\");\n    IZoo.Token storage token = tokens[animal];\n\n    if(tokens[animal].stage == IZoo.AdultHood.BABY){\n      token.stage = IZoo.AdultHood.TEEN;\n    }\n    else if(tokens[animal].stage == IZoo.AdultHood.TEEN){\n      token.stage = IZoo.AdultHood.ADULT;\n    }\n    feededTimes[tokens[animal].id].count += 1;\n    feededTimes[tokens[animal].id].lastTimeFed = uint40(block.timestamp);\n    IMedia.MediaData memory newData = drop.getAdultHoodURIs(token.name, token.stage);\n    token.data = newData;\n    media.updateTokenURI(token.id, newData.tokenURI);\n    media.updateTokenMetadataURI(token.id, newData.metadataURI);\n    zoo.transferFrom(msg.sender, address(this), price);\n    tokens[animal] = token;\n  }\n\n  modifier canBreed(uint256 parentA, uint256 parentB) {\n\n    require(media.tokenExists(parentA) && media.tokenExists(parentB), \"Non-existent token\");\n    require((media.ownerOf(parentA) == msg.sender && media.ownerOf(parentB) == msg.sender), \"Not owner of Animals\");\n    require(keccak256(abi.encode(parentA)) != keccak256(abi.encode(parentB)), \"Not able to breed with self\");\n    require(breedReady(parentA) && breedReady(parentB), \"Wait for cooldown to finish.\");\n    require(tokens[parentA].breed.count <= 6 || tokens[parentA].breed.count <= 6, \"reached max breed\");\n    require(isAnimalAdult(parentA) && isAnimalAdult(parentB), \"Only Adult animals can breed.\");\n    require(keccak256(abi.encodePacked(tokens[parentA].name)) == keccak256(abi.encodePacked(tokens[parentB].name)), \"Only same breed can be bred\");\n    _;\n  }\n\n  function breedAnimals(\n    uint256 dropID,\n    uint256 tokenA,\n    uint256 tokenB\n  ) public canBreed(tokenA, tokenB) returns (IZoo.Token memory) {\n    require(allowBreeding, \"Not allowed to Breed\");\n    IDrop drop = IDrop(drops[dropID]);\n\n    if(tokens[tokenA].dropEgg == drop.silverEgg() || tokens[tokenB].dropEgg == drop.silverEgg()){\n      drop.changeRandomLimit(4);\n    }\n\n    IZoo.Token memory egg = IDrop(drops[dropID]).newHybridEgg(IZoo.Parents({ animalA: tokens[tokenA].name, animalB: tokens[tokenB].name, tokenA: tokenA, tokenB: tokenB }));\n\n    uint256 price;\n\n    if(drop.eggPrice(tokens[tokenA].dropEgg) > drop.eggPrice(tokens[tokenB].dropEgg)){\n      price = drop.eggPrice(tokens[tokenA].dropEgg);\n    }\n    else{\n      price = drop.eggPrice(tokens[tokenB].dropEgg);\n    }\n\n    require(zoo.balanceOf(msg.sender) >= price, \"Not enough ZOO\");\n\n    zoo.transferFrom(msg.sender, address(this), price);\n\n    updateBreedDelays(tokenA, tokenB);\n\n    egg = mint(msg.sender, egg);\n    emit BreedAnimal(msg.sender, tokenA, tokenB, egg.id);\n    drop.changeRandomLimit(3);\n    return egg;\n  }\n\n  function freeAnimal(uint256 dropID, uint256 tokenID) public returns (uint256 yields) {\n\n    IZoo.Token storage token = tokens[tokenID];\n\n    burn(msg.sender, tokenID);\n\n    uint256 blockAge = block.timestamp - token.birthValues.timestamp;\n    uint256 daysOld = blockAge.div(86000);\n\n    if(token.stage == IZoo.AdultHood.BABY){\n      yields = daysOld.mul(ICustomDrop(drops[dropID]).animalStageYields(token.name).baby.yields.mul(10**18));\n    }\n    else if(token.stage == IZoo.AdultHood.TEEN){\n      daysOld.mul(ICustomDrop(drops[dropID]).animalStageYields(token.name).teen.yields.mul(10**18));\n    } else{\n      daysOld.mul(ICustomDrop(drops[dropID]).animalStageYields(token.name).adult.yields.mul(10**18));\n    }\n\n    zoo.transfer(msg.sender, yields);\n\n    emit Free(msg.sender, tokenID, yields);\n\n    return yields;\n  }\n\n  function buyName(uint256 tokenID, string memory customName) public {\n    require(zoo.balanceOf(msg.sender) >= namePrice, \"ZK: Not enough ZOO to purchase Name\");\n\n    zoo.transferFrom(msg.sender, address(this), namePrice);\n\n    IZoo.Token storage token = tokens[tokenID];\n    token.customName = customName;\n    tokens[tokenID] = token;\n  }\n\n   function isAnimalAdult(uint256 tokenID) private view returns (bool) {\n    return tokens[tokenID].stage == IZoo.AdultHood.ADULT;\n  }\n\n  function getAnimal(uint256 dropID, uint256 eggID) private view returns (IZoo.Token memory) {\n\n    IZoo.Token storage egg = tokens[eggID];\n    IDrop drop = IDrop(drops[dropID]);\n\n    if (egg.kind == IZoo.Type.BASE_EGG) {\n      return drop.getRandomAnimal(drop.unsafeRandom(), egg.dropEgg);\n    } else {\n      return drop.getBredAnimal(tokens[egg.birthValues.parents.tokenA].name, egg.birthValues.parents);\n    }\n  }\n\n  function updateBreedDelays(uint256 parentA, uint256 parentB) private {\n\n    tokens[parentA].breed.count++;\n    tokens[parentB].breed.count++;\n    tokens[parentA].breed.timestamp = block.timestamp;\n    tokens[parentB].breed.timestamp = block.timestamp;\n  }\n\n  function breedNext(uint256 tokenID) public view returns (uint256) {\n    IZoo.Token storage token = tokens[tokenID];\n    return token.breed.timestamp + (token.breed.count * 1 days);\n  }\n\n  function breedReady(uint256 tokenID) public view returns (bool) {\n    if (tokens[tokenID].breed.count == 0) {\n      return true;\n    }\n    if (block.timestamp > breedNext(tokenID)) {\n      return true;\n    }\n\n    return false;\n  }\n\n\n  function zooPriceBNB() public view returns (uint256) {\n    (uint zooAmount, uint bnbAmount,) = pair.getReserves();\n    return zooAmount / bnbAmount;\n  }\n\n  function supplyBNB() public view returns (uint256) {\n    return zoo.balanceOf(address(this));\n  }\n\n  function supplyZOO() public view returns (uint256) {\n    return zoo.balanceOf(address(this));\n  }\n\n  function withdrawBNB(address payable receiver, uint256 amount) public onlyOwner {\n    require(receiver.send(amount));\n  }\n\n  function withdrawZOO(address receiver, uint256 amount) public onlyOwner {\n    require(zoo.transfer(receiver, amount));\n  }\n\n  function mul(uint x, uint y) internal pure returns (uint z) {\n    require(y == 0 || (z = x * y) / y == x, \"Math overflow\");\n  }\n\n  // Payable fallback functions\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}