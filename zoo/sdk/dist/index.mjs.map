{"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AGAA;ACAA;ACAA;AAWO,eAAe,0CACpB,OAA2B,EAC3B,UAAkC,EAClC,kBAA0B,EAAE,EAC5B,eAAuB,CAAC,EACxB;IACA,IAAI,gBAAgB,iBAClB,MAAM,CAAC,yBAAyB,EAAE,aAAa,qBAAqB,CAAC,CAAA;IAEvE,eAAe,UAAU;QACvB,IAAI,MAAM,MAAM,CAAA,GAAA,YAAI,EAAE,OAAO,CAAC;QAE9B,OAAO,IAAI,IAAI;IACjB;IAEA,MAAM,OAAO,MAAM;IAEnB,2BAA2B;IAC3B,MAAM,aAAa,WAAW;IAC9B,IAAI,YAAY,OAAO;IAEvB,+DAA+D;IAC/D,MAAM,IAAI,QAAQ,CAAC,UAAY,WAAW,SAAS;IACnD;IACA,MAAM,0CAAiB,SAAS,YAAY,iBAAiB;AAC/D;AAUO,eAAe,0CACpB,OAA2B,EAC3B,QAA0C,EAC1C,kBAA0B,EAAE,EAC5B,eAAuB,CAAC,EACxB;IACA,IAAI,gBAAgB,iBAClB,MAAM,CAAC,mCAAmC,EAAE,aAAa,qBAAqB,CAAC,CAAA;IAEjF,MAAM,MAAM,MAAM,CAAA,GAAA,YAAI,EAAE,OAAO,CAAC;IAEhC,IAAI,CAAC,UACH,WAAW,CAAC,MAAQ,IAAI,MAAM,KAAK;IAGrC,mDAAmD;IACnD,IAAI,CAAC,SAAS,MAAM;QAClB,+DAA+D;QAC/D,MAAM,IAAI,QAAQ,CAAC,UAAY,WAAW,SAAS;QACnD;QACA,MAAM,0CAAY,SAAS,UAAU,iBAAiB;IACxD,CAAC;IAED,OAAO,IAAI;AACb;;;;;ACtEA;;;;;;;;;;;;;;;;;;;;;;CAsBC,GAED,AAAO,SAAS,0CAAU,GAAQ,EAAE,KAA2B,EAAE;IAC/D,OAAO,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC,MAAQ;QAC9B,IAAI,QAAQ,KAAK,CAAC,IAAI;QACtB,IAAI,UAAU;YACZ,IAAI,MAAM,OAAO,CAAC,QAChB,MAAM,OAAO,CAAC,CAAC,OAAS;gBACtB,IAAI,YAAY,CAAC,MAAM,CAAC,KAAK;YAC/B;iBAEA,IAAI,YAAY,CAAC,MAAM,CAAC,KAAK,KAAK,CAAC,IAAI,EAAE;SAE5C;QACD,OAAO;IACT;AACF;;;AFTO,eAAe,yCACpB,OAA2B,EAC3B,MAAc,EACd,QAA0C,EAC1C,OAAiB,EACjB,aAAsB,EACtB;IACA,IAAI;QACF,IAAI,OAAO;QAEX,IAAI,CAAC,QAAQ,OAAO,EAClB,QAAQ,OAAO,GAAG;YAChB,gBAAgB;YAChB,aAAkB;YAClB,iBAAkB;YAClB,kBAAkB;QACpB;QAGF,MAAM,SAAS,CAAA,GAAA,yCAAS,AAAD;QACvB,MAAM,eAAe,QAAQ;QAC7B,IAAI,cAAc,YAChB,QAAQ,OAAO,GAAG,aAAa,UAAU;QAE3C,IAAI,cAAc,QAChB,QAAQ,OAAO,CAAC,YAAY,GAAG,aAAa,MAAM;QAGpD,IAAI,CAAC,MAAM;YACT,MAAM,MAAM,MAAM,CAAA,GAAA,YAAI,EAAE,OAAO,CAAC;YAChC,OAAO,IAAI,IAAI;YACf,IAAI,IAAI,MAAM,KAAK,KAAK,MAAM,KAAI;QACpC,CAAC;QAED,gBAAgB;QAChB,IAAI,KAAK,KAAK,IAAI,CAAC,KAAK,KAAK,EAAE,MAAM,KAAI;QAEzC,MAAM,QAAQ,QAAQ,GAAG,EAAE,SAAS;QACpC,MAAM,SAAS,QAAQ,GAAG,EAAE,SAAS;QAErC,yDAAyD;QACzD,+DAA+D;QAC/D,IAAI,KAAK,IAAI,IAAI,eAAe;YAC9B,MAAM,QAAQ,KAAK,IAAI,CAAC,MAAM,CAAC,CAAC,OAAO,OAAS;gBAC9C,SAAS,KAAK,KAAK,IAAI;gBACvB,OAAO;YACT,GAAG;YAEH,+BAA+B;YAC/B,IAAI,QAA0D,IAAI;YAClE,IAAI,UAAU,QAAQ,gBAAgB,UACpC,QAAQ;gBACN,MAAM;gBACN,SAAS,CAAC,gDAAgD,EAAE,MAAM,CAAC;YACrE;YAGF,8BAA8B;YAC9B,IAAI,SAAS,QAAQ,gBAAgB,SACnC,QAAQ;gBACN,MAAM;gBACN,SAAS,CAAC,0CAA0C,EAAE,MAAM,CAAC;YAC/D;YAGF,IAAI,OAAO;gBACT,KAAK,KAAK,CAAC,EAAE,CAAC,KAAK,GAAG,MAAM,OAAO;gBACnC,KAAK,KAAK,CAAC,EAAE,CAAC,SAAS,GAAG,KAAK,IAAI;gBACnC,SAAS;uBAAI,MAAM;iBAAM;gBACzB,MAAM,MAAK;YACb,CAAC;QACH,CAAC;QAED,0CAA0C;QAC1C,SAAS;eAAI,MAAM;SAAM;QAEzB,IAAI,sBAAsB;QAC1B,IAAI,0BAA0B;QAC9B,KAAK,KAAK,CAAC,IAAI,CAAC,CAAC,MAAM,IAAM;YAC3B,IAAI,CAAC,KAAK,KAAK,EACb,OAAO,KAAK;YAGd,0BAA0B,KAAK,KAAK,CAAC,SAAS,CAC5C,CAAC,OAAS,KAAK,MAAM,IAAI;YAE3B,IAAI,4BAA4B,IAAI;gBAClC,sBAAsB;gBACtB,OAAO,IAAI;YACb,OACE,OAAO,KAAK;QAEhB;QAEA,qCAAqC;QACrC,IAAI,wBAAwB,IAAI;QAEhC,MAAM,OAAO,KAAK,KAAK,CAAC,oBAAoB;QAC5C,MAAM,YAAY,KAAK,KAAK,CAAC,oBAAoB,CAAC,KAAK;QAEvD,IAAI,CAAC,WAAW;QAEhB,IAAI,QAAE,KAAI,EAAE,GAAG;QACf,IAAI,WAAW,SAAS,CAAC,wBAAwB;QAEjD,uDAAuD;QACvD,IAAI,CAAC,SAAS,IAAI,EAAE;YAClB,OAAQ,MAAM,CAAA,GAAA,yCAAgB,AAAD,EAAE,SAAS,CAAC,OAAS;gBAChD,MAAM,OAAO;gBACb,OAAO,MAAM,OAAO,CAAC,oBAAoB,CAAC,KAAK,EAAE,CAC/C,wBACD,CAAC,IAAI,GACF,IAAI,GACJ,KAAK;YACX;YACA,IAAI,CAAC,KAAK,KAAK,IAAI,CAAC,KAAK,KAAK,CAAC,oBAAoB,CAAC,KAAK,EAAE,MAAM,KAAI;YACrE,MAAM,QAAQ,KAAK,KAAK,CAAC,oBAAoB,CAAC,KAAK;YACnD,IACE,CAAC,SACD,CAAC,KAAK,CAAC,wBAAwB,IAC/B,CAAC,KAAK,CAAC,wBAAwB,CAAC,IAAI,EAEpC,MAAM,KAAI;YACZ,WAAW,KAAK,CAAC,wBAAwB;QAC3C,CAAC;QAED,MAAM,WAAW,SAAS,IAAI;QAC9B,sCAAsC;QACtC,OAAQ;YACN,+BAA+B;YAC/B,KAAK;gBAAe;oBAClB,MAAM,KAAK,MAAM,OAAO,eAAe,CAAC;oBAExC,IAAI,KAAK,KAAK,CAAC,oBAAoB,CAAC,KAAK,EAAE,CAAC,wBAAwB,EAClE,SAAS,MAAM,GAAG,GAAG,IAAI;oBAE3B,SAAS;2BAAI,MAAM;qBAAM;oBAEzB,MAAM,GAAG,IAAI;oBAEb,8EAA8E;oBAC9E,MAAM,kBAAkB,IAAI,IAC1B,CAAC,EAAE,QAAQ,OAAO,CAAC,cAAc,EAAE,GAAG,IAAI,CAAC,UAAU,CAAC;oBAExD,MAAM,UAAmB;wBACvB,gBAAgB;wBAChB,aAAa;wBACb,iBAAiB;wBACjB,kBAAkB;oBACpB;oBAEA,IAAI,QAAQ,OAAO,IAAI,QAAQ,OAAO,CAAC,YAAY,EACjD,OAAO,CAAC,YAAY,GAAG,QAAQ,OAAO,CAAC,YAAY;oBAGjD,QAAQ;oBAEZ,MAAM,CAAA,GAAA,yCAAU,EACd;wBACE,KAAK,gBAAgB,IAAI;wBACzB,QAAQ;wBACR,SAAS;oBACX,GACA,CAAC,MAAQ,OAAO,IAAI,IAAI,CAAC,MAAM;oBAGjC,IACE,KAAK,KAAK,CACP,KAAK,CAAC,sBAAsB,GAC5B,SAAS,CAAC,CAAC,OAAS,KAAK,IAAI,KAAK,mBAAmB,IAExD,qFAAqF;oBACrF;wBAAA,IAAI,SAAS,MAAM,IAAK,CAAA,UAAU,KAAI,GAAI;4BACxC,MAAM,yBAAyB,IAAI,IACjC,CAAC,EAAE,QAAQ,OAAO,CAAC,SAAS,CAAC;4BAE/B,MAAM,cACJ;gCACE,QAAQ,SAAS,MAAM;4BACzB;4BACF,CAAA,GAAA,yCAAS,AAAD,EAAE,wBAAwB;4BAClC,MAAM,CAAA,GAAA,yCAAU,EACd;gCACE,KAAK,uBAAuB,IAAI;gCAChC,QAAQ;gCACR,SAAS;4BACX,GACA,CAAC,MAAQ;gCACP,IAAI,IAAI,MAAM,KAAK,KAAK;oCACtB,MAAM,OACJ,IAAI,IAAI;oCACV,OAAO,KAAK,KAAK,IAAI,KAAK,KAAK,CAAC,MAAM,GAAG,IAAI,IAAI,GAAG,KAAK;gCAC3D,CAAC;gCACD,OAAO,KAAK;4BACd;wBAEJ,CAAC;oBAAD,CACD;oBAED,KAAK;gBACP;YAEA,iBAAiB;YACjB,KAAK;gBAAa;oBAChB,IAAI;oBACJ,MAAM,WAAW,QAAQ,CAAC,OAAO;oBACjC,MAAM,WAAW,QAAQ,CAAC,OAAO;oBAEjC,IAAI,UAAU;wBACZ,yBAAyB;wBACzB,IAAI,SAAS,aAAa,KAAK;4BAC7B,IAAI,SAAS,OAAO,CAAC,KAAK,CAAC,sBACzB,6EAA6E;4BAC7E,YAAY,MAAM,OAAO,WAAW,CAAC,CAAA,GAAA,eAAQ,AAAD,EAAE,SAAS,OAAO;iCAE9D,YAAY,MAAM,OAAO,WAAW,CAAC,SAAS,OAAO;+BAElD,IAAI,SAAS,aAAa,KAAK,UACpC,YAAY,MAAM,AAChB,OACA,cAAc,CAAC,SAAS,MAAM,EAAE,SAAS,KAAK,EAAE,SAAS,KAAK;wBAGlE,IAAI,WACF,QAAQ,MAAM,GAAG;4BACf,GAAG,QAAQ,MAAM;uCACjB;wBACF;oBAEJ,CAAC;oBAED,IAAI,UAAU;wBACZ,MAAM,eAAe,IAAI,IAAI,CAAC,EAAE,QAAQ,OAAO,CAAC,EAAE,SAAS,QAAQ,CAAC,CAAC;wBAErE,IAAI;4BACF,MAAM,UAAU,iBAAkB;gCAChC,MAAM,UAAmB;oCACvB,gBAAgB;oCAChB,aAAkB;oCAClB,iBAAkB;oCAClB,kBAAkB;gCACpB;gCACA,IAAI,QAAQ,OAAO,IAAI,QAAQ,OAAO,CAAC,YAAY,EACjD,OAAO,CAAC,YAAY,GAAG,QAAQ,OAAO,CAAC,YAAY;gCAGrD,IAAI,WAAW,MAAM,CAAA,GAAA,YAAI,EAAE,IAAI,CAC7B,aAAa,IAAI,EACjB,KAAK,SAAS,CAAC,SAAS,IAAI,GAC5B;oCACE,QAAQ,SAAS,MAAM;oCACvB,SAAU;oCACV,QAAQ,QAAQ,MAAM;gCACxB;gCAGF,OAAO;4BACT;4BAEA,MAAM,MAAM,MAAM;4BAElB,IAAI,IAAI,MAAM,GAAG,OAAO,IAAI,MAAM,GAAG,KAAK,MAAM,IAAI,IAAI,CAAA;4BAExD,SAAS,OAAO,GAAG,IAAI,IAAI,CAAC,OAAO;4BACnC,SAAS;mCAAI,MAAM;6BAAM;wBAC3B,EAAE,OAAO,KAAK;4BACZ,KAAK,KAAK,CAAC,oBAAoB,CAAC,KAAK,GACnC;4BACF,SAAS;mCAAI,MAAM;6BAAM;4BACzB,MAAM,IAAG;wBACX;oBACF,CAAC;oBAED,KAAK;gBACP;YAEA;gBACE,KAAK;QACT;QAEA,OAAO,KAAK,OAAO;QACnB,SAAS,MAAM,GAAG;QAElB,kCAAkC;QAClC,MAAM,yCAAa,SAAS,QAAQ,UAAU;IAChD,EAAE,OAAO,KAAU;QACjB,MAAM,QAAQ,IAAI,MAAM,KAAK;QAC7B,QAAQ,KAAK,CAAC;QACd,MAAM,IAAG;IACX;AACF;;AG/TA;;AAIO,SAAS,0CAAQ,SAA6B,CAAC,CAAC,EAAE;IACvD,MAAM,SAAS,CAAA,GAAA,yCAAS,AAAD;IACvB,MAAM,eAAe,OAAO,YAAY;IACxC,MAAM,UAAe;QACnB,gBAAgB;QAChB,iBAAiB;IACnB;IACA,IAAI,cAAc,QAChB,OAAO,CAAC,YAAY,GAAG,aAAa,MAAM;IAE5C,OAAO,CAAA,GAAA,YAAK,AAAD,EAAE,OAAO,CAAC;QAAE,SAAS;QAAS,GAAG,MAAM;IAAC;AACrD;;;AJsBO,eAAe,0CAAY,IAAU,EAAE;IAC5C,MAAM,SAAE,MAAK,iBAAE,cAAa,UAAE,OAAM,cAAE,WAAU,EAAE,GAAG;IACrD,MAAM,QAAQ,MAAM,OAAO,UAAU;IACrC,MAAM,SAAS,CAAA,GAAA,yCAAS,AAAD;IACvB,MAAM,UAAU,KAAK,OAAO,IAAI,CAAC;IACjC,MAAM,aAAa,OAAO,YAAY,IAAI;IAE1C,IAAI,CAAC,OAAO,YAAY,IACtB,MAAM,IAAI,eAAe,yCAAwC;IAGnE,IAAI;QACF,MAAM,SAAoC;YACxC,OAAO;YACP,OAAO,CAAC,EAAE,MAAM,QAAQ,CAAC,CAAC,EAAE,MAAM,OAAO,CAAC,CAAC;YAC3C,QAAQ,OAAO,MAAM,IAAI;YACzB,GAAG,OAAO;QACZ;QAEA,IACE,OAAO,kBAAkB,KAAK,aAC9B,OAAO,kBAAkB,KAAK,WAE9B,OAAO,kBAAkB,GAAG,OAAO,kBAAkB;QAGvD,MAAM,CAAA,GAAA,wCAAW,EACf;YACE,KAAK,CAAC,EAAE,WAAW,gBAAgB,CAAC;YACpC,QAAQ;YACR,MAAM;QACR,GACA,QACA,YACA,WACA;QAEF,OAAO,IAAI;IACb,EAAE,OAAO,KAAU;QACjB,MAAM,OACJ;YACE,OAAO,CAAC,EAAE,MAAM,QAAQ,CAAC,CAAC,EAAE,MAAM,OAAO,CAAC,CAAC;QAC7C;QACF,CAAA,GAAA,yCAAO,AAAD,EAAE;YACN,QAAQ;YACR,KAAK,CAAC,EAAE,WAAW,kBAAkB,CAAC;YACtC,MAAM,KAAK,SAAS,CAAC;QACvB;QACA,MAAM,IAAG;IACX;AACF;;ADvFA;AMAA;;AA4CO,eAAe,0CAAS,IAAU,EAAE;IACzC,MAAM,UAAE,OAAM,YAAE,SAAQ,aAAE,UAAS,iBAAE,cAAa,UAAE,OAAM,cAAE,WAAU,EAAE,GACtE;IACF,MAAM,QAAQ,MAAM,OAAO,UAAU;IACrC,MAAM,SAAS,CAAA,GAAA,yCAAS,AAAD;IACvB,MAAM,UAAU,KAAK,OAAO,IAAI,CAAC;IACjC,MAAM,aAAa,OAAO,YAAY,IAAI;IAE1C,IAAI,CAAC,YACH,MAAM,IAAI,eAAe,yCAAwC;IAGnE,IACE,AAAC,CAAA,CAAC,UAAU,CAAC,OAAO,MAAM,AAAD,KACxB,CAAA,CAAC,KAAK,QAAQ,IAAI,CAAC,KAAK,QAAQ,CAAC,MAAM,AAAD,KACvC,CAAC,KAAK,SAAS,EACf;QACA,QAAQ,KAAK,CAAC;QACd,MAAM,IAAI,eACR,oGACD;IACH,CAAC;IAED,IACE,AAAC,UAAW,CAAA,YAAY,SAAQ,KAC/B,YAAa,CAAA,UAAU,SAAQ,KAC/B,aAAc,CAAA,YAAY,MAAK,GAChC;QACA,QAAQ,KAAK,CAAC;QACd,MAAM,IAAI,eACR,qFACD;IACH,CAAC;IAED,IAAI;QACF,MAAM,SAAiC;YACrC,OAAO;YACP,QAAQ,OAAO,MAAM,IAAI;YACzB,GAAG,OAAO;QACZ;QAEA,IAAI,QACF,OAAO,MAAM,GAAG,QAAQ,IACtB,CAAC,QAAU,CAAC,EAAE,MAAM,QAAQ,CAAC,CAAC,EAAE,MAAM,OAAO,CAAC,CAAC;aAE5C,IAAI,UACT,OAAO,QAAQ,GAAG;aACb,IAAI,WACT,OAAO,SAAS,GAAG;QAGrB,IACE,OAAO,kBAAkB,KAAK,aAC9B,OAAO,kBAAkB,KAAK,WAE9B,OAAO,kBAAkB,GAAG,OAAO,kBAAkB;QAGvD,MAAM,CAAA,GAAA,wCAAW,EACf;YACE,KAAK,CAAC,EAAE,WAAW,eAAe,CAAC;YACnC,QAAQ;YACR,MAAM;QACR,GACA,QACA,YACA,WACA;QAEF,OAAO,IAAI;IACb,EAAE,OAAO,KAAU;QACjB,IAAI,QACF,OAAO,OAAO,CAAC,CAAC,QAAU;YACxB,MAAM,OACJ;gBACE,OAAO,CAAC,EAAE,MAAM,QAAQ,CAAC,CAAC,EAAE,MAAM,OAAO,CAAC,CAAC;YAC7C;YACF,CAAA,GAAA,yCAAO,AAAD,EAAE;gBACN,QAAQ;gBACR,KAAK,CAAC,EAAE,WAAW,kBAAkB,CAAC;gBACtC,MAAM,KAAK,SAAS,CAAC;YACvB;QACF;QAEF,MAAM,IAAG;IACX;AACF;;;AClIA;;AAwBO,eAAe,0CAAY,IAAU,EAAE;IAC5C,MAAM,MAAE,GAAE,UAAE,OAAM,cAAE,WAAU,EAAE,GAAG;IACnC,MAAM,SAAS,CAAA,GAAA,yCAAS,AAAD;IACvB,MAAM,UAAU,KAAK,OAAO,IAAI,CAAC;IACjC,MAAM,aAAa,OAAO,YAAY,IAAI;IAE1C,IAAI,CAAC,YACH,MAAM,IAAI,eAAe,yCAAwC;IAGnE,IAAI;QACF,MAAM,SAAoC;gBAAE;YAAI,GAAG,OAAO;QAAC;QAE3D,MAAM,CAAA,GAAA,wCAAW,EACf;YACE,KAAK,CAAC,EAAE,WAAW,kBAAkB,CAAC;YACtC,QAAQ;QACV,GACA,QACA;QAEF,OAAO,IAAI;IACb,EAAE,OAAO,KAAU;QACjB,QAAQ,KAAK,CAAC;QACd,MAAM,IAAG;IACX;AACF;;;AClDA;;;AAyBO,eAAe,0CACpB,IAAU,EAC2B;IACrC,MAAM,YAAE,SAAQ,UAAE,OAAM,cAAE,aAAa,IAAM,CAAC,cAAG,SAAQ,EAAE,GAAG;IAC9D,MAAM,SAAS,CAAA,GAAA,yCAAS,AAAD;IACvB,MAAM,QAAQ,MAAM,OAAO,UAAU;IACrC,MAAM,aAAa,OAAO,YAAY,IAAI;IAE1C,IAAI,CAAC,YACH,MAAM,IAAI,eAAe,yCAAwC;IAGnE,IAAI;QACF,MAAM,OAAsB;mBAC1B;YACA,QAAQ,OAAO,MAAM,IAAI;QAC3B;QAEA,SAAS,OAAO,CAAC,CAAC,UAAY;YAC5B,IACE,AAAC,CAAA,CAAC,QAAQ,SAAS,IAAI,QAAQ,SAAS,KAAK,WAAU,KACvD,OAAO,cAAc,IACrB,OAAO,uBAAuB,IAC9B,CAAE,CAAA,UAAU,OAAM,GAElB,QAAQ,IAAI,GAAG;gBACb,CAAC,EAAE,OAAO,uBAAuB,CAAC,CAAC,EAAE,OAAO,cAAc,CAAC,CAAC;aAC7D;YAGH,IACE,CAAE,CAAA,wBAAwB,OAAM,KAChC,wBAAwB,QAExB,QAAQ,kBAAkB,GAAG,OAAO,kBAAkB;QAE1D;QAEA,KAAK,MAAM,GAAG;QAEd,MAAM,UAA8B;YAClC,KAAK,CAAC,EAAE,WAAW,gBAAgB,CAAC;YACpC,QAAQ;kBACR;YACA,SAAS;gBACP,iBAAiB;YACnB;QACF;QAEA,IAAI,UAAU;YACZ,MAAM,SAAS,OAAO,YAAY,IAAI;YACtC,IAAI,UAAU,QAAQ,OAAO,EAC3B,QAAQ,OAAO,CAAC,YAAY,GAAG;YAEjC,IAAI,QAAQ,aAAa,QAAQ,OAAO,EACtC,QAAQ,OAAO,CAAC,iBAAiB,GAAG,OAAO,SAAS;YAGtD,MAAM,MAAM,MAAM,CAAA,GAAA,YAAI,EAAE,OAAO,CAAC;YAChC,IAAI,IAAI,MAAM,KAAK,KAAK,MAAM,IAAI,IAAI,CAAA;YACtC,MAAM,OAAO,IAAI,IAAI;YACrB,WAAW,IAAI,CAAC,QAAQ;YACxB,OAAO,IAAI,CAAC,QAAQ;QACtB,OACE,MAAM,CAAA,GAAA,wCAAY,AAAD,EAAE,SAAS,QAAQ;QAGtC,OAAO,IAAI;IACb,EAAE,OAAO,KAAU;QACjB,QAAQ,KAAK,CAAC;QACd,MAAM,IAAG;IACX;AACF;;;ACjGA;;AAqBO,eAAe,0CAAS,QAAE,KAAI,UAAE,OAAM,cAAE,WAAU,EAAQ,EAAE;IACjE,MAAM,SAAS,CAAA,GAAA,yCAAS,AAAD;IACvB,MAAM,QAAQ,MAAM,OAAO,UAAU;IACrC,MAAM,aAAa,OAAO,YAAY,IAAI;IAE1C,IAAI,CAAC,YACH,MAAM,IAAI,eAAe,mCAAkC;IAG7D,IAAI;QACF,MAAM,OAAqB;mBACzB;YACA,QAAQ,OAAO,MAAM,IAAI;QAC3B;QAEA,KAAK,OAAO,CAAC,CAAC,MAAQ;YACpB,IACE,CAAC,IAAI,KAAK,IACV,CAAC,IAAI,UAAU,IACf,CAAC,IAAI,UAAU,IACd,CAAA,CAAC,IAAI,YAAY,IAAI,CAAC,IAAI,cAAc,AAAD,GAExC,MAAM;gBACJ,SAAS;gBACT,MAAM;YACR,EAAC;YAEH,IACE,AAAC,CAAA,CAAC,IAAI,SAAS,IAAI,IAAI,SAAS,KAAK,WAAU,KAC/C,OAAO,cAAc,IACrB,OAAO,uBAAuB,IAC9B,CAAE,CAAA,UAAU,GAAE,GAEd,IAAI,IAAI,GAAG;gBACT,CAAC,EAAE,OAAO,uBAAuB,CAAC,CAAC,EAAE,OAAO,cAAc,CAAC,CAAC;aAC7D;YAGH,IAAI,CAAE,CAAA,wBAAwB,GAAE,KAAM,wBAAwB,QAC5D,IAAI,kBAAkB,GAAG,OAAO,kBAAkB;QAEtD;QAEA,KAAK,MAAM,GAAG;QAEd,MAAM,CAAA,GAAA,wCAAW,EACf;YAAE,KAAK,CAAC,EAAE,WAAW,eAAe,CAAC;YAAE,QAAQ;kBAAQ;QAAK,GAC5D,QACA;QAEF,OAAO,IAAI;IACb,EAAE,OAAO,KAAU;QACjB,QAAQ,KAAK,CAAC;QACd,MAAM,IAAG;IACX;AACF;;;ATtEA,MAAM,gCAAU;iBACd;cACA;iBACA;eACA;cACA;AACF;IAEA,2CAAe;;ADdf;;;;;;;;;AWAA;;;ACAA;;AASO,eAAe,0CAAgB,GAAa,EAAE;IACnD,IAAI,MAAM;IACV,IAAI,OAAO,CAAC,CAAC,IAAI,IAAM;QACrB,MAAM,CAAC,UAAU,QAAQ,GAAG,GAAG,KAAK,CAAC;QACrC,MAAM,SAAS,MAAM,IAAI,MAAM,GAAG;QAClC,MAAM,CAAC,EAAE,IAAI,EAAE,OAAO,UAAU,EAAE,QAAQ,0BAA0B,EAAE,SAAS,CAAC;IAClF;IAEA,MAAM,MAAM,MAAM,CAAA,GAAA,YAAI,EAAE,GAAG,CAAC;IAC5B,MAAM,OAAO,IAAI,IAAI;IACrB,MAAM,SAAS,CAAA,GAAA,yCAAS,AAAD;IACvB,MAAM,eAAe,QAAQ;IAC7B,MAAM,aAAa,cAAc;IACjC,MAAM,WAAoC,KAAK,MAAM,CAAC,MAAM,CAC1D,CAAC,UAAmC,QAAe;QACjD,QAAQ,CAAC,CAAC,EAAE,MAAM,cAAc,CAAC,OAAO,CAAC,CAAC,EAAE,MAAM,QAAQ,CAAC,CAAC,CAAC,GAC3D,CAAC,MAAM,eAAe;QACxB,OAAO;IACT,GACA,CAAC;IAEH,IAAI,IAAI,MAAM,KAAK,OAAO,YAAY;QACpC,MAAM,SAAS,aAAa,MAAM;QAClC,MAAM,UAAe;YACnB,gBAAgB;YAChB,iBAAiB;QACnB;QACA,OAAO,IAAI,CAAC,UAAU,OAAO,CAAC,CAAC,QAAU;YACvC,MAAM,SAAS,QAAQ,CAAC,MAAM;YAC9B,MAAM,OAAO;uBACX;gBACA,MAAM,SAAS,IAAI,CAAC;YACtB;YAEA,IAAI,QACF,OAAO,CAAC,YAAY,GAAG;YAEzB,IAAI,QAAQ,WACV,OAAO,CAAC,iBAAiB,GAAG,OAAO,SAAS;YAE9C,CAAA,GAAA,YAAI,EACD,IAAI,CAAC,CAAC,EAAE,WAAW,eAAe,CAAC,EAAE,KAAK,SAAS,CAAC,OAAO;yBAC1D;YACF,GACC,KAAK,CAAC,IAAM,CAAC;QAClB;IACF,CAAC;IAED,OAAO;AACT;;;;;;AZ1BA,IAAI;AAEG,MAAM;IAUF,QAAQ;QAAE,GAAG,yBAAK;IAAC,EAAC;IACpB,WAA4B,GAAA,wCAAO,EAAA;IAE5C,YAAY,OAAyB,CAAE;QACrC,IAAI,CAAC,OAAO,GAAG,QAAQ,wBAAwB;;QAC/C,IAAI,CAAC,MAAM,GAAG,QAAQ,MAAM;QAC5B,IAAI,CAAC,SAAS,GAAG,QAAQ,SAAS;QAClC,IAAI,CAAC,kBAAkB,GAAG,QAAQ,kBAAkB;QACpD,IAAI,CAAC,cAAc,GAAG,QAAQ,cAAc;QAC5C,IAAI,CAAC,uBAAuB,GAAG,QAAQ,uBAAuB;QAC9D,IAAI,CAAC,kBAAkB,GAAG,QAAQ,kBAAkB;QAEpD,IAAI,CAAC,QAAQ,MAAM,EACjB;YAAA,IAAI,OAAO,WAAW,aAAa;gBACjC,IAAI,OAAO,SAAS,QAAQ;gBAC5B,IAAI,KAAK,OAAO,CAAC,YAAY,GAC3B,OAAO,KAAK,OAAO,CAAC,QAAQ;gBAE9B,IAAI,CAAC,MAAM,GAAG;gBACd,QAAQ,IAAI,CACV;YAEJ,CAAC;QAAD,OAEA,IAAI,CAAC,MAAM,GAAG,QAAQ,MAAM;IAEhC;IAEA,UAAU,OAAyB,EAAE;QACnC,IAAI,CAAC,MAAM,GAAG,QAAQ,MAAM,GAAG,QAAQ,MAAM,GAAG,IAAI,CAAC,MAAM;QAC3D,IAAI,CAAC,SAAS,GAAG,QAAQ,SAAS,GAAG,QAAQ,SAAS,GAAG,IAAI,CAAC,SAAS;QACvE,IAAI,CAAC,MAAM,GAAG,QAAQ,MAAM,GAAG,QAAQ,MAAM,GAAG,IAAI,CAAC,MAAM;QAC3D,IAAI,CAAC,cAAc,GAAG,QAAQ,cAAc,GACxC,QAAQ,cAAc,GACtB,IAAI,CAAC,cAAc;QACvB,IAAI,CAAC,uBAAuB,GAAG,QAAQ,uBAAuB,GAC1D,QAAQ,uBAAuB,GAC/B,IAAI,CAAC,uBAAuB;QAChC,IAAI,CAAC,kBAAkB,GAAG,QAAQ,kBAAkB;QACpD,IAAI,CAAC,kBAAkB,GACrB,QAAQ,kBAAkB,KAAK,YAC3B,QAAQ,kBAAkB,GAC1B,IAAI,CAAC,kBAAkB;IAC/B;IAEA,eAAe;QACb,IAAI,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,GAAG;YACzC,MAAM,eAAe,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,QAAU,MAAM,OAAO;YAC9D,IAAI,cACF,OAAO;YAET,OAAO,IAAI,CAAC,MAAM,CAAC,EAAE;QACvB,CAAC;QACD,OAAO,IAAI;IACb;AACF;AAEO,SAAS,4CAAY;IAC1B,gBAAgB;IAChB,OAAO;AACT;AAEO,SAAS,0CAAa,OAAyB,EAAE;IACtD,IAAI,CAAC,+BACH,gCAAU,IAAI,0CAAU;SAExB,8BAAQ,SAAS,CAAC;IAGpB,OAAO;AACT;;ADlHA;;;;AeAA;;;CAGC,GAED;ADLA;;;","sources":["sdk/src/index.ts","sdk/src/actions/index.ts","sdk/src/actions/actions.ts","sdk/src/actions/acceptOffer.ts","sdk/src/utils/executeSteps.ts","sdk/src/utils/pollApi.ts","sdk/src/utils/params.ts","sdk/src/utils/request.ts","sdk/src/actions/buyToken.ts","sdk/src/actions/cancelOrder.ts","sdk/src/actions/listToken.ts","sdk/src/actions/placeBid.ts","sdk/src/utils/index.ts","sdk/src/utils/isOpenSeaBanned.ts","sdk/src/types/index.ts","sdk/src/types/api.ts"],"sourcesContent":["export * from './actions'\nexport * from './utils'\nexport * from './types'\n","import actions from './actions'\nimport * as utils from '../utils'\n// import { version } from '../../package.json'\n\nexport type ZooChain = {\n  id: number\n  baseApiUrl: string\n  default: boolean\n  apiKey?: string\n}\n\n/**\n * ZooClient Configuration Options\n * @param chains List of chain objects with configuration (id, baseApiUrl, apiKey and if it's the default)\n * @param source Used to manually override the source domain used to attribute local orders\n * @param automatedRoyalties If true, royalties will be automatically included, defaults to true. Only relevant for creating orders.\n * @param marketplaceFee Fee in bps included when creating an order (listing & bidding)\n * @param marketplaceFeeRecipient Marketplace fee recipient\n * @param normalizeRoyalties Normalize orders that don't have royalties by apply royalties on top of them\n */\nexport type ZooClientOptions = {\n  chains: ZooChain[]\n  uiVersion?: string\n  source?: string\n  automatedRoyalties?: boolean\n  marketplaceFee?: number\n  marketplaceFeeRecipient?: string\n  normalizeRoyalties?: boolean\n}\n\nexport type ZooClientActions = typeof actions\n\nlet _client: ZooClient\n\nexport class ZooClient {\n  version: string\n  chains: ZooChain[]\n  source?: string\n  uiVersion?: string\n  marketplaceFee?: number\n  marketplaceFeeRecipient?: string\n  automatedRoyalties?: boolean\n  normalizeRoyalties?: boolean\n\n  readonly utils = { ...utils }\n  readonly actions: ZooClientActions = actions\n\n  constructor(options: ZooClientOptions) {\n    this.version = '0.4.0' // hardcode this for now\n    this.chains = options.chains\n    this.uiVersion = options.uiVersion\n    this.automatedRoyalties = options.automatedRoyalties\n    this.marketplaceFee = options.marketplaceFee\n    this.marketplaceFeeRecipient = options.marketplaceFeeRecipient\n    this.normalizeRoyalties = options.normalizeRoyalties\n\n    if (!options.source) {\n      if (typeof window !== 'undefined') {\n        let host = location.hostname\n        if (host.indexOf('www.') === 0) {\n          host = host.replace('www.', '')\n        }\n        this.source = host\n        console.warn(\n          'ZDK automatically generated a source based on the url, we recommend providing a source when initializing ZDK. Refer to our docs for steps on how to do this: http://docs.reservoir.tools'\n        )\n      }\n    } else {\n      this.source = options.source\n    }\n  }\n\n  configure(options: ZooClientOptions) {\n    this.source = options.source ? options.source : this.source\n    this.uiVersion = options.uiVersion ? options.uiVersion : this.uiVersion\n    this.chains = options.chains ? options.chains : this.chains\n    this.marketplaceFee = options.marketplaceFee\n      ? options.marketplaceFee\n      : this.marketplaceFee\n    this.marketplaceFeeRecipient = options.marketplaceFeeRecipient\n      ? options.marketplaceFeeRecipient\n      : this.marketplaceFeeRecipient\n    this.automatedRoyalties = options.automatedRoyalties\n    this.normalizeRoyalties =\n      options.normalizeRoyalties !== undefined\n        ? options.normalizeRoyalties\n        : this.normalizeRoyalties\n  }\n\n  currentChain() {\n    if (this.chains && this.chains.length > 0) {\n      const defaultChain = this.chains.find((chain) => chain.default)\n      if (defaultChain) {\n        return defaultChain\n      }\n      return this.chains[0]\n    }\n    return null\n  }\n}\n\nexport function getClient() {\n  //throw an error\n  return _client\n}\n\nexport function createClient(options: ZooClientOptions) {\n  if (!_client) {\n    _client = new ZooClient(options)\n  } else {\n    _client.configure(options)\n  }\n\n  return _client\n}\n","import { acceptOffer } from './acceptOffer'\nimport { buyToken } from './buyToken'\nimport { cancelOrder } from './cancelOrder'\nimport { listToken } from './listToken'\nimport { placeBid } from './placeBid'\n\nconst actions = {\n  acceptOffer,\n  buyToken,\n  cancelOrder,\n  listToken,\n  placeBid,\n}\n\nexport default actions\n","import { Signer } from 'ethers'\nimport { getClient } from '.'\nimport { Execute, paths } from '../types'\nimport { executeSteps, request } from '../utils'\n\nexport type Token = Pick<\n  NonNullable<\n    NonNullable<\n      paths['/tokens/v5']['get']['responses']['200']['schema']['tokens']\n    >[0]['token']\n  >,\n  'tokenId' | 'contract'\n>\n\ntype AcceptOfferBodyParameters =\n  paths['/execute/sell/v6']['post']['parameters']['body']['body']\n\nexport type AcceptOfferOptions = Partial<\n  Omit<AcceptOfferBodyParameters, 'token'>\n>\n\ntype Data = {\n  token: Token\n  options?: AcceptOfferOptions\n  expectedPrice?: number\n  signer: Signer\n  onProgress: (steps: Execute['steps']) => any\n}\n\n/**\n * Accept an offer to buy your token\n * @param data.token Token being accepted\n * @param data.expectedPrice Token price used to prevent to protect buyer from price moves. Pass the number with unit 'ether'. Example: `1.543` means 1.543 ETH\n * @param data.signer Ethereum signer object provided by the browser\n * @param data.options Additional options to pass into the accept request\n * @param data.onProgress Callback to update UI state as execution progresses\n */\nexport async function acceptOffer(data: Data) {\n  const { token, expectedPrice, signer, onProgress } = data\n  const taker = await signer.getAddress()\n  const client = getClient()\n  const options = data.options || {}\n  const baseApiUrl = client.currentChain()?.baseApiUrl\n\n  if (!client.currentChain()) {\n    throw new ReferenceError('ZooClient missing chain configuration')\n  }\n\n  try {\n    const params: AcceptOfferBodyParameters = {\n      taker: taker,\n      token: `${token.contract}:${token.tokenId}`,\n      source: client.source || '',\n      ...options,\n    }\n\n    if (\n      client.normalizeRoyalties !== undefined &&\n      params.normalizeRoyalties === undefined\n    ) {\n      params.normalizeRoyalties = client.normalizeRoyalties\n    }\n\n    await executeSteps(\n      {\n        url: `${baseApiUrl}/execute/sell/v6`,\n        method: 'post',\n        data: params,\n      },\n      signer,\n      onProgress,\n      undefined,\n      expectedPrice\n    )\n    return true\n  } catch (err: any) {\n    const data: paths['/tokens/refresh/v1']['post']['parameters']['body']['body'] =\n      {\n        token: `${token.contract}:${token.tokenId}`,\n      }\n    request({\n      method: 'POST',\n      url: `${baseApiUrl}/tokens/refresh/v1`,\n      data: JSON.stringify(data),\n    })\n    throw err\n  }\n}\n","import { arrayify } from 'ethers/lib/utils'\nimport { Execute, paths } from '../types'\nimport { pollUntilHasData, pollUntilOk } from './pollApi'\nimport { Signer } from 'ethers'\nimport { TypedDataSigner } from '@ethersproject/abstract-signer'\nimport axios, { AxiosRequestConfig } from 'axios'\nimport { getClient } from '../actions/index'\nimport { setParams } from './params'\n\ninterface Headers {\n  'Content-Type': string\n  'x-api-key': string\n  'x-rkc-version': string\n  'x-rkui-version': string\n}\n\n/**\n * When attempting to perform actions, such as, selling a token or\n * buying a token, the user's account needs to meet certain requirements. For\n * example, if the user attempts to buy a token the Zoo API checks if the\n * user has enough balance, before providing the transaction to be signed by\n * the user. This function executes all transactions, in order, to complete the\n * action.\n * @param request AxiosRequestConfig object with at least a url set\n * @param signer Ethereum signer object provided by the browser\n * @param setState Callback to update UI state has execution progresses\n * @returns The data field of the last element in the steps array\n */\n\nexport async function executeSteps(\n  request: AxiosRequestConfig,\n  signer: Signer,\n  setState: (steps: Execute['steps']) => any,\n  newJson?: Execute,\n  expectedPrice?: number\n) {\n  try {\n    let json = newJson\n\n    if (!request.headers) {\n      request.headers = {\n        'Content-Type': 'application/json',\n        'x-api-key':      '',\n        'x-rkc-version':  '0.4.0',\n        'x-rkui-version': '0.9.0',\n      }\n    }\n\n    const client = getClient()\n    const currentChain = client?.currentChain()\n    if (currentChain?.baseApiUrl) {\n      request.baseURL = currentChain.baseApiUrl\n    }\n    if (currentChain?.apiKey) {\n      request.headers['x-api-key'] = currentChain.apiKey\n    }\n\n    if (!json) {\n      const res = await axios.request(request)\n      json = res.data as Execute\n      if (res.status !== 200) throw json\n    }\n\n    // Handle errors\n    if (json.error || !json.steps) throw json\n\n    const isBuy = request.url?.includes('/execute/buy')\n    const isSell = request.url?.includes('/execute/sell')\n\n    // Handle price changes to protect users from paying more\n    // than expected when buying and selling for less than expected\n    if (json.path && expectedPrice) {\n      const quote = json.path.reduce((total, path) => {\n        total += path.quote || 0\n        return total\n      }, 0)\n\n      // Check if the user is selling\n      let error: null | Error | { type: string; message: string } = null\n      if (isSell && quote - expectedPrice < -0.00001) {\n        error = {\n          type: 'price mismatch',\n          message: `Attention: the offer price of this token is now ${quote}`,\n        }\n      }\n\n      // Check if the user is buying\n      if (isBuy && quote - expectedPrice > 0.00001) {\n        error = {\n          type: 'price mismatch',\n          message: `Attention: the price of this token is now ${quote}`,\n        }\n      }\n\n      if (error) {\n        json.steps[0].error = error.message\n        json.steps[0].errorData = json.path\n        setState([...json?.steps])\n        throw error\n      }\n    }\n\n    // Update state on first call or recursion\n    setState([...json?.steps])\n\n    let incompleteStepIndex = -1\n    let incompleteStepItemIndex = -1\n    json.steps.find((step, i) => {\n      if (!step.items) {\n        return false\n      }\n\n      incompleteStepItemIndex = step.items.findIndex(\n        (item) => item.status == 'incomplete'\n      )\n      if (incompleteStepItemIndex !== -1) {\n        incompleteStepIndex = i\n        return true\n      } else {\n        return false\n      }\n    })\n\n    // There are no more incomplete steps\n    if (incompleteStepIndex === -1) return\n\n    const step = json.steps[incompleteStepIndex]\n    const stepItems = json.steps[incompleteStepIndex].items\n\n    if (!stepItems) return\n\n    let { kind } = step\n    let stepItem = stepItems[incompleteStepItemIndex]\n\n    // If step item is missing data, poll until it is ready\n    if (!stepItem.data) {\n      json = (await pollUntilHasData(request, (json) => {\n        const data = json as Execute\n        return data?.steps?.[incompleteStepIndex].items?.[\n          incompleteStepItemIndex\n        ].data\n          ? true\n          : false\n      })) as Execute\n      if (!json.steps || !json.steps[incompleteStepIndex].items) throw json\n      const items = json.steps[incompleteStepIndex].items\n      if (\n        !items ||\n        !items[incompleteStepItemIndex] ||\n        !items[incompleteStepItemIndex].data\n      )\n        throw json\n      stepItem = items[incompleteStepItemIndex]\n    }\n\n    const stepData = stepItem.data\n    // Handle each step based on it's kind\n    switch (kind) {\n      // Make an on-chain transaction\n      case 'transaction': {\n        const tx = await signer.sendTransaction(stepData)\n\n        if (json.steps[incompleteStepIndex].items?.[incompleteStepItemIndex]) {\n          stepItem.txHash = tx.hash\n        }\n        setState([...json?.steps])\n\n        await tx.wait()\n\n        //Implicitly poll the confirmation url to confirm the transaction went through\n        const confirmationUrl = new URL(\n          `${request.baseURL}/transactions/${tx.hash}/synced/v1`\n        )\n        const headers: Headers = {\n          'Content-Type': 'application/json',\n          'x-api-key': '0.0.0',\n          'x-rkc-version': '0.4.0',\n          'x-rkui-version': '0.9.0'\n        }\n\n        if (request.headers && request.headers['x-api-key']) {\n          headers['x-api-key'] = request.headers['x-api-key']\n        }\n\n        if (client?.uiVersion) {\n        }\n        await pollUntilOk(\n          {\n            url: confirmationUrl.href,\n            method: 'get',\n            headers: headers as any,\n          },\n          (res) => res && res.data.synced\n        )\n\n        if (\n          json.steps\n            .slice(incompleteStepIndex + 1)\n            .findIndex((step) => step.kind === 'transaction') === -1\n        ) {\n          //Confirm that on-chain tx has been picked up by the indexer for the last transaction\n          if (stepItem.txHash && (isSell || isBuy)) {\n            const indexerConfirmationUrl = new URL(\n              `${request.baseURL}/sales/v3`\n            )\n            const queryParams: paths['/sales/v3']['get']['parameters']['query'] =\n              {\n                txHash: stepItem.txHash,\n              }\n            setParams(indexerConfirmationUrl, queryParams)\n            await pollUntilOk(\n              {\n                url: indexerConfirmationUrl.href,\n                method: 'get',\n                headers: headers as any,\n              },\n              (res) => {\n                if (res.status === 200) {\n                  const data =\n                    res.data as paths['/sales/v3']['get']['responses']['200']['schema']\n                  return data.sales && data.sales.length > 0 ? true : false\n                }\n                return false\n              }\n            )\n          }\n        }\n\n        break\n      }\n\n      // Sign a message\n      case 'signature': {\n        let signature: string | undefined\n        const signData = stepData['sign']\n        const postData = stepData['post']\n\n        if (signData) {\n          // Request user signature\n          if (signData.signatureKind === 'eip191') {\n            if (signData.message.match(/0x[0-9a-fA-F]{64}/)) {\n              // If the message represents a hash, we need to convert it to raw bytes first\n              signature = await signer.signMessage(arrayify(signData.message))\n            } else {\n              signature = await signer.signMessage(signData.message)\n            }\n          } else if (signData.signatureKind === 'eip712') {\n            signature = await (\n              signer as unknown as TypedDataSigner\n            )._signTypedData(signData.domain, signData.types, signData.value)\n          }\n\n          if (signature) {\n            request.params = {\n              ...request.params,\n              signature,\n            }\n          }\n        }\n\n        if (postData) {\n          const postOrderUrl = new URL(`${request.baseURL}${postData.endpoint}`)\n\n          try {\n            const getData = async function () {\n              const headers: Headers = {\n                'Content-Type': 'application/json',\n                'x-api-key':      '',\n                'x-rkc-version':  '0.4.0',\n                'x-rkui-version': '0.9.0',\n              }\n              if (request.headers && request.headers['x-api-key']) {\n                headers['x-api-key'] = request.headers['x-api-key']\n              }\n\n              let response = await axios.post(\n                postOrderUrl.href,\n                JSON.stringify(postData.body),\n                {\n                  method: postData.method,\n                  headers: (headers as any),\n                  params: request.params,\n                }\n              )\n\n              return response\n            }\n\n            const res = await getData()\n\n            if (res.status > 299 || res.status < 200) throw res.data\n\n            stepItem.orderId = res.data.orderId\n            setState([...json?.steps])\n          } catch (err) {\n            json.steps[incompleteStepIndex].error =\n              'Your order could not be posted.'\n            setState([...json?.steps])\n            throw err\n          }\n        }\n\n        break\n      }\n\n      default:\n        break\n    }\n\n    delete step.message\n    stepItem.status = 'complete'\n\n    // Recursively call executeSteps()\n    await executeSteps(request, signer, setState, json)\n  } catch (err: any) {\n    const error = new Error(err?.message)\n    console.error(error)\n    throw err\n  }\n}\n","import axios, { AxiosRequestConfig, AxiosResponse } from 'axios'\n\n/**\n * Poll the URL with a 5 second interval until the step has data\n * available\n * @param url an URL object\n * @param index The index of the step to be polled for\n * @param maximumAttempts The maximum amount of tries for this poll\n * @param attemptCount The amount of attempts already done by the poll, should be left blank\n * @returns The updated JSON response\n */\nexport async function pollUntilHasData(\n  request: AxiosRequestConfig,\n  dataParser: (json: any) => boolean,\n  maximumAttempts: number = 15,\n  attemptCount: number = 0\n) {\n  if (attemptCount >= maximumAttempts) {\n    throw `Failed to get data after ${attemptCount} attempt(s), aborting`\n  }\n  async function getData() {\n    let res = await axios.request(request)\n\n    return res.data\n  }\n\n  const json = await getData()\n\n  // Check if the data exists\n  const dataExists = dataParser(json)\n  if (dataExists) return json\n\n  // The response is still unchanged. Check again in five seconds\n  await new Promise((resolve) => setTimeout(resolve, 5000))\n  attemptCount++\n  await pollUntilHasData(request, dataParser, maximumAttempts, attemptCount)\n}\n\n/**\n * Poll the URL with a 5 second interval until it responds with success\n * @param url An URL object\n * @param validate A function that checks if the request is \"ok\" or valid\n * @param maximumAttempts The maximum amount of tries for this poll\n * @param attemptCount The amount of attempts already done by the poll, should be left blank\n * @returns When it has finished polling\n */\nexport async function pollUntilOk(\n  request: AxiosRequestConfig,\n  validate?: (res: AxiosResponse) => boolean,\n  maximumAttempts: number = 15,\n  attemptCount: number = 0\n) {\n  if (attemptCount >= maximumAttempts) {\n    throw `Failed to get an ok response after ${attemptCount} attempt(s), aborting`\n  }\n  const res = await axios.request(request)\n\n  if (!validate) {\n    validate = (res) => res.status === 200\n  }\n\n  // Check that the response from an endpoint updated\n  if (!validate(res)) {\n    // The response is still unchanged. Check again in five seconds\n    await new Promise((resolve) => setTimeout(resolve, 5000))\n    attemptCount++\n    await pollUntilOk(request, validate, maximumAttempts, attemptCount)\n  }\n\n  return true\n}\n","/**\n *  Set URL query params using a typed objects\n *\n * This will convert an object\n *\n * ```js\n *  {\n *    foo: 'bar',\n *    age: 50,\n *  }\n * ```\n *\n * into a query string\n *\n * `?foo=bar&age=50`\n *\n * and append it to URL provided\n *\n * `https://api.example.com/tokens?foo=bar&age=50`\n *\n * @param url An URL instance\n * @param query An object containing all needed query params.\n */\n\nexport function setParams(url: URL, query: { [x: string]: any }) {\n  Object.keys(query).map((key) => {\n    let value = query[key]\n    if (value !== undefined) {\n      if (Array.isArray(value)) {\n        value.forEach((item) => {\n          url.searchParams.append(key, item)\n        })\n      } else {\n        url.searchParams.append(key, query[key]?.toString())\n      }\n    }\n    return url\n  })\n}\n","import axios, { AxiosRequestConfig } from 'axios'\n// import { version } from '../../package.json'\nimport { getClient } from '../'\n\nexport function request(config: AxiosRequestConfig = {}) {\n  const client = getClient()\n  const currentChain = client.currentChain()\n  const headers: any = {\n    'Content-Type': 'application/json',\n    'x-rkc-version': '0.4.0',\n  }\n  if (currentChain?.apiKey) {\n    headers['x-api-key'] = currentChain.apiKey\n  }\n  return axios.request({ headers: headers, ...config })\n}\n","import { Execute, paths } from '../types'\nimport { Signer } from 'ethers'\nimport { getClient } from '.'\nimport { executeSteps, request } from '../utils'\n\nexport type Token = Pick<\n  NonNullable<\n    NonNullable<\n      paths['/tokens/v5']['get']['responses']['200']['schema']['tokens']\n    >[0]['token']\n  >,\n  'tokenId' | 'contract'\n>\n\ntype BuyTokenBodyParameters = NonNullable<\n  paths['/execute/buy/v6']['post']['parameters']['body']['body']\n>\n\nexport type BuyTokenOptions = Partial<\n  Omit<BuyTokenBodyParameters, 'source' | 'tokens' | 'orderIds' | 'rawOrders'>\n>\nexport type BuyTokenRequiredOptions = Pick<\n  BuyTokenBodyParameters,\n  'orderIds' | 'rawOrders'\n>\n\ntype Data = BuyTokenRequiredOptions & {\n  tokens?: Token[]\n  expectedPrice?: number\n  options?: BuyTokenOptions\n  signer: Signer\n  onProgress: (steps: Execute['steps']) => any\n}\n\n/**\n * Instantly buy a token\n * @param data.tokens Tokens to be purchased (mutually exclusive with rawOrders and orderIds)\n * @param data.orderIds OrderIds to be purchased (mutually exclusive with tokens and rawOrders)\n * @param data.rawOrders RawOrders to be purchased (mutually exclusive with tokens and orderIds)\n * @param data.expectedPrice Token price used to prevent to protect buyer from price moves. Pass the number with unit 'ether'. Example: `1.543` means 1.543 ETH\n * @param data.options Additional options to pass into the buy request\n * @param data.signer Ethereum signer object provided by the browser\n * @param data.onProgress Callback to update UI state as execution progresses\n */\nexport async function buyToken(data: Data) {\n  const { tokens, orderIds, rawOrders, expectedPrice, signer, onProgress } =\n    data\n  const taker = await signer.getAddress()\n  const client = getClient()\n  const options = data.options || {}\n  const baseApiUrl = client.currentChain()?.baseApiUrl\n\n  if (!baseApiUrl) {\n    throw new ReferenceError('ZooClient missing chain configuration')\n  }\n\n  if (\n    (!tokens || !tokens.length) &&\n    (!data.orderIds || !data.orderIds.length) &&\n    !data.rawOrders\n  ) {\n    console.debug(data)\n    throw new ReferenceError(\n      'ZooClient missing data: At least one of the following is required, tokens, orderIds or rawOrders'\n    )\n  }\n\n  if (\n    (tokens && (orderIds || rawOrders)) ||\n    (orderIds && (tokens || rawOrders)) ||\n    (rawOrders && (orderIds || tokens))\n  ) {\n    console.debug(data)\n    throw new ReferenceError(\n      'ZooClient conflicting data: tokens, orderIds and rawOrders are mutually exclusive'\n    )\n  }\n\n  try {\n    const params: BuyTokenBodyParameters = {\n      taker: taker,\n      source: client.source || '',\n      ...options,\n    }\n\n    if (tokens) {\n      params.tokens = tokens?.map(\n        (token) => `${token.contract}:${token.tokenId}`\n      )\n    } else if (orderIds) {\n      params.orderIds = orderIds\n    } else if (rawOrders) {\n      params.rawOrders = rawOrders\n    }\n\n    if (\n      client.normalizeRoyalties !== undefined &&\n      params.normalizeRoyalties === undefined\n    ) {\n      params.normalizeRoyalties = client.normalizeRoyalties\n    }\n\n    await executeSteps(\n      {\n        url: `${baseApiUrl}/execute/buy/v6`,\n        method: 'post',\n        data: params,\n      },\n      signer,\n      onProgress,\n      undefined,\n      expectedPrice\n    )\n    return true\n  } catch (err: any) {\n    if (tokens) {\n      tokens.forEach((token) => {\n        const data: paths['/tokens/refresh/v1']['post']['parameters']['body']['body'] =\n          {\n            token: `${token.contract}:${token.tokenId}`,\n          }\n        request({\n          method: 'POST',\n          url: `${baseApiUrl}/tokens/refresh/v1`,\n          data: JSON.stringify(data),\n        })\n      })\n    }\n    throw err\n  }\n}\n","import { Execute, paths } from '../types'\nimport { Signer } from 'ethers'\nimport { executeSteps } from '../utils'\nimport { getClient } from '.'\n\ntype CancelOrderPathParameters =\n  paths['/execute/cancel/v2']['get']['parameters']['query']\n\nexport type CancelOrderOptions = Omit<CancelOrderPathParameters, 'maker' | 'id'>\n\ntype Data = {\n  id: CancelOrderPathParameters['id']\n  signer: Signer\n  options?: CancelOrderOptions\n  onProgress: (steps: Execute['steps']) => any\n}\n\n/**\n * Cancel an offer or listing\n * @param data.id Id of the order to cancel\n * @param data.signer Ethereum signer object provided by the browser\n * @param data.options Additional options to pass into the cancel request\n * @param data.onProgress Callback to update UI state has execution progresses\n */\nexport async function cancelOrder(data: Data) {\n  const { id, signer, onProgress } = data\n  const client = getClient()\n  const options = data.options || {}\n  const baseApiUrl = client.currentChain()?.baseApiUrl\n\n  if (!baseApiUrl) {\n    throw new ReferenceError('ZooClient missing chain configuration')\n  }\n\n  try {\n    const params: CancelOrderPathParameters = { id, ...options }\n\n    await executeSteps(\n      {\n        url: `${baseApiUrl}/execute/cancel/v2`,\n        params: params,\n      },\n      signer,\n      onProgress\n    )\n    return true\n  } catch (err: any) {\n    console.error(err)\n    throw err\n  }\n}\n","import { Execute, paths } from '../types'\nimport { Signer } from 'ethers'\nimport { getClient } from '.'\nimport { executeSteps } from '../utils/executeSteps'\nimport axios, { AxiosRequestConfig } from 'axios'\n\ntype ListTokenBody = NonNullable<\n  paths['/execute/list/v4']['post']['parameters']['body']['body']\n>\n\ntype Data = {\n  listings: Required<ListTokenBody>['params']\n  signer: Signer\n  onProgress?: (steps: Execute['steps']) => any\n  precheck?: boolean\n}\n\n/**\n * List a token for sale\n * @param data.listings Listings data to be processed\n * @param data.signer Ethereum signer object provided by the browser\n * @param data.onProgress Callback to update UI state as execution progresses\n * @param data.precheck Set to true to skip executing steps and just to get the initial steps required\n */\n\nexport async function listToken(\n  data: Data\n): Promise<Execute['steps'] | boolean> {\n  const { listings, signer, onProgress = () => {}, precheck } = data\n  const client = getClient()\n  const maker = await signer.getAddress()\n  const baseApiUrl = client.currentChain()?.baseApiUrl\n\n  if (!baseApiUrl) {\n    throw new ReferenceError('ZooClient missing chain configuration')\n  }\n\n  try {\n    const data: ListTokenBody = {\n      maker,\n      source: client.source || '',\n    }\n\n    listings.forEach((listing) => {\n      if (\n        (!listing.orderbook || listing.orderbook === 'reservoir') &&\n        client.marketplaceFee &&\n        client.marketplaceFeeRecipient &&\n        !('fees' in listing)\n      ) {\n        listing.fees = [\n          `${client.marketplaceFeeRecipient}:${client.marketplaceFee}`,\n        ]\n      }\n\n      if (\n        !('automatedRoyalties' in listing) &&\n        'automatedRoyalties' in client\n      ) {\n        listing.automatedRoyalties = client.automatedRoyalties\n      }\n    })\n\n    data.params = listings\n\n    const request: AxiosRequestConfig = {\n      url: `${baseApiUrl}/execute/list/v4`,\n      method: 'post',\n      data,\n      headers: {\n        'x-rkc-version': '0.4.0',\n      },\n    }\n\n    if (precheck) {\n      const apiKey = client.currentChain()?.apiKey\n      if (apiKey && request.headers) {\n        request.headers['x-api-key'] = apiKey\n      }\n      if (client?.uiVersion && request.headers) {\n        request.headers['x-rkui-version'] = client.uiVersion\n      }\n\n      const res = await axios.request(request)\n      if (res.status !== 200) throw res.data\n      const data = res.data as Execute\n      onProgress(data['steps'])\n      return data['steps']\n    } else {\n      await executeSteps(request, signer, onProgress)\n    }\n\n    return true\n  } catch (err: any) {\n    console.error(err)\n    throw err\n  }\n}\n","import { Execute, paths } from '../types'\nimport { Signer } from 'ethers'\nimport { executeSteps } from '../utils'\nimport { getClient } from '.'\n\ntype PlaceBidBody = NonNullable<\n  paths['/execute/bid/v4']['post']['parameters']['body']['body']\n>\n\ntype Data = {\n  bids: Required<PlaceBidBody>['params']\n  signer: Signer\n  onProgress: (steps: Execute['steps']) => any\n}\n\n/**\n * Place a bid on a token\n * @param data.bids Bidding data to be processed\n * @param data.signer Ethereum signer object provided by the browser\n * @param data.onProgress Callback to update UI state as execution progresses\n */\nexport async function placeBid({ bids, signer, onProgress }: Data) {\n  const client = getClient()\n  const maker = await signer.getAddress()\n  const baseApiUrl = client.currentChain()?.baseApiUrl\n\n  if (!baseApiUrl) {\n    throw new ReferenceError('ZooClient missing configuration')\n  }\n\n  try {\n    const data: PlaceBidBody = {\n      maker,\n      source: client.source || '',\n    }\n\n    bids.forEach((bid) => {\n      if (\n        !bid.token &&\n        !bid.collection &&\n        !bid.tokenSetId &&\n        (!bid.attributeKey || !bid.attributeValue)\n      ) {\n        throw {\n          message: 'Some bid data is missing',\n          data: bid,\n        }\n      }\n      if (\n        (!bid.orderbook || bid.orderbook === 'reservoir') &&\n        client.marketplaceFee &&\n        client.marketplaceFeeRecipient &&\n        !('fees' in bid)\n      ) {\n        bid.fees = [\n          `${client.marketplaceFeeRecipient}:${client.marketplaceFee}`,\n        ]\n      }\n\n      if (!('automatedRoyalties' in bid) && 'automatedRoyalties' in client) {\n        bid.automatedRoyalties = client.automatedRoyalties\n      }\n    })\n\n    data.params = bids\n\n    await executeSteps(\n      { url: `${baseApiUrl}/execute/bid/v4`, method: 'post', data },\n      signer,\n      onProgress\n    )\n    return true\n  } catch (err: any) {\n    console.error(err)\n    throw err\n  }\n}\n","export { executeSteps } from './executeSteps'\nexport { setParams } from './params'\nexport { pollUntilOk, pollUntilHasData } from './pollApi'\nexport { isOpenSeaBanned } from './isOpenSeaBanned'\nexport { request } from './request'\n","import axios from 'axios'\nimport { getClient } from '../actions'\n// import { version } from '../../package.json'\n\n/**\n * Check if tokens are banned on OpenSea\n * @param tokens An array of token ids (e.g. [\"123:0xabc123\"])\n * @returns `{tokenId: true}` A dictionary of token banned status from OpenSea.\n */\nexport async function isOpenSeaBanned(ids: string[]) {\n  let url = 'https://api.opensea.io/api/v1/assets'\n  ids.forEach((id, i) => {\n    const [contract, tokenId] = id.split(':')\n    const prefix = i === 0 ? '?' : '&'\n    url = `${url}${prefix}token_ids=${tokenId}&asset_contract_addresses=${contract}`\n  })\n\n  const res = await axios.get(url)\n  const json = res.data\n  const client = getClient()\n  const currentChain = client?.currentChain()\n  const baseApiUrl = currentChain?.apiKey\n  const statuses: Record<string, boolean> = json.assets.reduce(\n    (statuses: Record<string, boolean>, asset: any) => {\n      statuses[`${asset.asset_contract.address}:${asset.token_id}`] =\n        !asset.supports_wyvern\n      return statuses\n    },\n    {} as Record<string, boolean>\n  )\n  if (res.status === 200 && baseApiUrl) {\n    const apiKey = currentChain.apiKey\n    const headers: any = {\n      'Content-Type': 'application/json',\n      'x-rkc-version': '0.4.0',\n    }\n    Object.keys(statuses).forEach((token) => {\n      const status = statuses[token]\n      const body = {\n        token,\n        flag: status ? 1 : 0,\n      }\n\n      if (apiKey) {\n        headers['x-api-key'] = apiKey\n      }\n      if (client?.uiVersion) {\n        headers['x-rkui-version'] = client.uiVersion\n      }\n      axios\n        .post(`${baseApiUrl}/tokens/flag/v1`, JSON.stringify(body), {\n          headers,\n        })\n        .catch(() => {})\n    })\n  }\n\n  return statuses\n}\n","import { paths } from './api'\nexport * from './api'\n\nexport type Execute = {\n  error?: string\n  path:\n    | paths['/execute/buy/v3']['get']['responses']['200']['schema']['path']\n    | paths['/execute/sell/v3']['get']['responses']['200']['schema']['path']\n  steps: {\n    message?: string\n    error?: string\n    errorData?: any\n    action: string\n    description: string\n    kind: 'transaction' | 'signature'\n    items?: {\n      status: 'complete' | 'incomplete'\n      data?: any\n      txHash?: string\n      orderId?: string\n      orderIndex?: number\n    }[]\n  }[]\n}\n","/**\n * This file was auto-generated by openapi-typescript.\n * Do not make direct changes to the file.\n */\n\nexport interface paths {\n  \"/activity/v1\": {\n    /** This API can be used to scrape all of the activities */\n    get: operations[\"getActivityV1\"];\n  };\n  \"/activity/v2\": {\n    /** This API can be used to scrape all of the activities */\n    get: operations[\"getActivityV2\"];\n  };\n  \"/activity/v3\": {\n    /** This API can be used to scrape all of the activities */\n    get: operations[\"getActivityV3\"];\n  };\n  \"/activity/v4\": {\n    /** This API can be used to scrape all of the activities */\n    get: operations[\"getActivityV4\"];\n  };\n  \"/admin/get-marketplaces\": {\n    get: operations[\"getAdminGetmarketplaces\"];\n  };\n  \"/admin/open-api\": {\n    get: operations[\"getAdminOpenapi\"];\n  };\n  \"/admin/rate-limit-rules\": {\n    get: operations[\"getAdminRatelimitrules\"];\n  };\n  \"/assets/v1\": {\n    get: operations[\"getAssetsV1\"];\n  };\n  \"/attributes/v1\": {\n    get: operations[\"getAttributesV1\"];\n  };\n  \"/collection/v1\": {\n    /** Get detailed information about a single collection, including real-time stats. */\n    get: operations[\"getCollectionV1\"];\n  };\n  \"/collection/v2\": {\n    /** Get detailed information about a single collection, including real-time stats. */\n    get: operations[\"getCollectionV2\"];\n  };\n  \"/collection/v3\": {\n    /** Get detailed information about a single collection, including real-time stats. */\n    get: operations[\"getCollectionV3\"];\n  };\n  \"/collections/v1\": {\n    /** Useful for getting multiple collections to show in a marketplace, or search for particular collections. */\n    get: operations[\"getCollectionsV1\"];\n  };\n  \"/collections/v2\": {\n    /** Useful for getting multiple collections to show in a marketplace, or search for particular collections. */\n    get: operations[\"getCollectionsV2\"];\n  };\n  \"/collections/v3\": {\n    /** Useful for getting multiple collections to show in a marketplace, or search for particular collections. */\n    get: operations[\"getCollectionsV3\"];\n  };\n  \"/collections/v4\": {\n    /** Useful for getting multiple collections to show in a marketplace, or search for particular collections. */\n    get: operations[\"getCollectionsV4\"];\n  };\n  \"/collections/v5\": {\n    /** Useful for getting multiple collections to show in a marketplace, or search for particular collections. */\n    get: operations[\"getCollectionsV5\"];\n  };\n  \"/orders/v1\": {\n    /** Access orders with various filters applied. If you need orders created by a single user, use the positions API instead. */\n    get: operations[\"getOrdersV1\"];\n    post: operations[\"postOrdersV1\"];\n  };\n  \"/orders/v2\": {\n    /** Access orders with various filters applied. If you need orders created by a single user, use the positions API instead. */\n    get: operations[\"getOrdersV2\"];\n  };\n  \"/owners/v1\": {\n    /** Get owners with various filters applied, and a summary of their ownership. Useful for exploring top owners in a collection or attribute. */\n    get: operations[\"getOwnersV1\"];\n  };\n  \"/sales/v1\": {\n    /** Get recent sales for a contract or token. */\n    get: operations[\"getSalesV1\"];\n  };\n  \"/sales/v2\": {\n    /** Get recent sales for a contract or token. */\n    get: operations[\"getSalesV2\"];\n  };\n  \"/sales/v3\": {\n    /** Get recent sales for a contract or token. Note: this API is returns rich metadata, and has advanced filters, so is only designed for small amounts of recent sales. If you want access to sales in bulk, use the `Aggregator > Bulk Sales` API. */\n    get: operations[\"getSalesV3\"];\n  };\n  \"/sales/v4\": {\n    /** Get recent sales for a contract or token. */\n    get: operations[\"getSalesV4\"];\n  };\n  \"/sources/v1\": {\n    /** This API returns a list of sources */\n    get: operations[\"getSourcesV1\"];\n  };\n  \"/stats/v1\": {\n    /** Get aggregate stats for a particular set (collection, attribute or single token) */\n    get: operations[\"getStatsV1\"];\n  };\n  \"/stats/v2\": {\n    /** Get aggregate stats for a particular set (collection, attribute or single token) */\n    get: operations[\"getStatsV2\"];\n  };\n  \"/tokens/v1\": {\n    /** This API is optimized for quickly fetching a list of tokens in a collection, sorted by price, with only the most important information returned. If you need more metadata, use the `tokens/details` API */\n    get: operations[\"getTokensV1\"];\n  };\n  \"/tokens/v2\": {\n    /** This API is optimized for quickly fetching a list of tokens in a collection, sorted by price, with only the most important information returned. If you need more metadata, use the `tokens/details` API */\n    get: operations[\"getTokensV2\"];\n  };\n  \"/tokens/v3\": {\n    /** This API is optimized for quickly fetching a list of tokens in a collection, sorted by price, with only the most important information returned. If you need more metadata, use the `tokens/details` API */\n    get: operations[\"getTokensV3\"];\n  };\n  \"/tokens/v4\": {\n    /** This API is optimized for quickly fetching a list of tokens in a collection, sorted by price, with only the most important information returned. If you need more metadata, use the tokens/details API */\n    get: operations[\"getTokensV4\"];\n  };\n  \"/tokens/v5\": {\n    /** Get a list of tokens with full metadata. This is useful for showing a single token page, or scenarios that require more metadata. */\n    get: operations[\"getTokensV5\"];\n  };\n  \"/transfers/v2\": {\n    /** Get recent transfers for a contract or token. */\n    get: operations[\"getTransfersV2\"];\n  };\n  \"/admin/get-api-key/{key}\": {\n    get: operations[\"getAdminGetapikeyKey\"];\n  };\n  \"/api-keys/{key}/rate-limits\": {\n    /** Get the rate limits for the given API key */\n    get: operations[\"getApikeysKeyRatelimits\"];\n  };\n  \"/collections/activity/v4\": {\n    /** This API can be used to build a feed for a collection */\n    get: operations[\"getCollectionsActivityV4\"];\n  };\n  \"/collections/activity/v5\": {\n    /** This API can be used to build a feed for a collection */\n    get: operations[\"getCollectionsActivityV5\"];\n  };\n  \"/collections/daily-volumes/v1\": {\n    /** Get date, volume, rank and sales count for each collection */\n    get: operations[\"getCollectionsDailyvolumesV1\"];\n  };\n  \"/collections/sources/v1\": {\n    /** This API returns aggregated listings info for the given collection per source */\n    get: operations[\"getCollectionsSourcesV1\"];\n  };\n  \"/collections/{collectionOrSlug}/v1\": {\n    /** Get detailed information about a single collection, including real-time stats. */\n    get: operations[\"getCollectionsCollectionorslugV1\"];\n  };\n  \"/events/asks/v2\": {\n    /** Get updates any time an asks status changes */\n    get: operations[\"getEventsAsksV2\"];\n  };\n  \"/events/asks/v3\": {\n    /** Get updates any time an asks status changes */\n    get: operations[\"getEventsAsksV3\"];\n  };\n  \"/events/bids/v1\": {\n    /** Get updates any time a bid status changes */\n    get: operations[\"getEventsBidsV1\"];\n  };\n  \"/events/bids/v2\": {\n    /** Get updates any time a bid status changes */\n    get: operations[\"getEventsBidsV2\"];\n  };\n  \"/events/bids/v3\": {\n    /** Get updates any time a bid status changes */\n    get: operations[\"getEventsBidsV3\"];\n  };\n  \"/events/orders/v1\": {\n    /** Get updates any time an order status changes */\n    get: operations[\"getEventsOrdersV1\"];\n  };\n  \"/execute/bid/v2\": {\n    /** Generate a bid and submit it to multiple marketplaces */\n    get: operations[\"getExecuteBidV2\"];\n  };\n  \"/execute/buy/v2\": {\n    get: operations[\"getExecuteBuyV2\"];\n  };\n  \"/execute/buy/v3\": {\n    get: operations[\"getExecuteBuyV3\"];\n  };\n  \"/execute/cancel/v1\": {\n    /** Cancel an existing order on any marketplace */\n    get: operations[\"getExecuteCancelV1\"];\n  };\n  \"/execute/cancel/v2\": {\n    /** Cancel an existing order on any marketplace */\n    get: operations[\"getExecuteCancelV2\"];\n  };\n  \"/execute/list/v2\": {\n    /** Generate a listing and submit it to multiple marketplaces */\n    get: operations[\"getExecuteListV2\"];\n  };\n  \"/execute/sell/v3\": {\n    get: operations[\"getExecuteSellV3\"];\n  };\n  \"/liquidity/users/v1\": {\n    /** This API calculates the total liquidity created by users, based on the number of tokens they are top bidder for. */\n    get: operations[\"getLiquidityUsersV1\"];\n  };\n  \"/liquidity/users/v2\": {\n    /** This API calculates the total liquidity created by users, based on the number of tokens they are top bidder for. */\n    get: operations[\"getLiquidityUsersV2\"];\n  };\n  \"/orders/all/v1\": {\n    /** This API is designed for efficiently ingesting large volumes of orders, for external processing */\n    get: operations[\"getOrdersAllV1\"];\n  };\n  \"/orders/all/v2\": {\n    /** This API is designed for efficiently ingesting large volumes of orders, for external processing */\n    get: operations[\"getOrdersAllV2\"];\n  };\n  \"/orders/asks/v1\": {\n    /** This API is designed for efficiently ingesting large volumes of orders, for external processing */\n    get: operations[\"getOrdersAsksV1\"];\n  };\n  \"/orders/asks/v2\": {\n    /** Get a list of asks (listings), filtered by token, collection or maker. This API is designed for efficiently ingesting large volumes of orders, for external processing */\n    get: operations[\"getOrdersAsksV2\"];\n  };\n  \"/orders/asks/v3\": {\n    /** Get a list of asks (listings), filtered by token, collection or maker. This API is designed for efficiently ingesting large volumes of orders, for external processing */\n    get: operations[\"getOrdersAsksV3\"];\n  };\n  \"/orders/asks/v4\": {\n    /** Get a list of asks (listings), filtered by token, collection or maker. This API is designed for efficiently ingesting large volumes of orders, for external processing */\n    get: operations[\"getOrdersAsksV4\"];\n  };\n  \"/orders/bids/v1\": {\n    /** This API is designed for efficiently ingesting large volumes of orders, for external processing */\n    get: operations[\"getOrdersBidsV1\"];\n  };\n  \"/orders/bids/v2\": {\n    /** Get a list of bids (offers), filtered by token, collection or maker. This API is designed for efficiently ingesting large volumes of orders, for external processing */\n    get: operations[\"getOrdersBidsV2\"];\n  };\n  \"/orders/bids/v3\": {\n    /** Get a list of bids (offers), filtered by token, collection or maker. This API is designed for efficiently ingesting large volumes of orders, for external processing */\n    get: operations[\"getOrdersBidsV3\"];\n  };\n  \"/orders/bids/v4\": {\n    /** Get a list of bids (offers), filtered by token, collection or maker. This API is designed for efficiently ingesting large volumes of orders, for external processing */\n    get: operations[\"getOrdersBidsV4\"];\n  };\n  \"/orders/bids/v5\": {\n    /** Get a list of bids (offers), filtered by token, collection or maker. This API is designed for efficiently ingesting large volumes of orders, for external processing */\n    get: operations[\"getOrdersBidsV5\"];\n  };\n  \"/orders/executed/v1\": {\n    get: operations[\"getOrdersExecutedV1\"];\n  };\n  \"/owners/common-collections/v1\": {\n    /** This API can be used to find top common collections among the given owners */\n    get: operations[\"getOwnersCommoncollectionsV1\"];\n  };\n  \"/owners/cross-collections/v1\": {\n    /** Find which addresses own the most of a group of collections. */\n    get: operations[\"getOwnersCrosscollectionsV1\"];\n  };\n  \"/redirect/logo/v1\": {\n    get: operations[\"getRedirectLogoV1\"];\n  };\n  \"/redirect/token/v1\": {\n    get: operations[\"getRedirectTokenV1\"];\n  };\n  \"/sales/bulk/v1\": {\n    /** Note: this API is optimized for bulk access, and offers minimal filters/metadata. If you need more flexibility, try the `NFT API > Sales` endpoint */\n    get: operations[\"getSalesBulkV1\"];\n  };\n  \"/search/collections/v1\": {\n    get: operations[\"getSearchCollectionsV1\"];\n  };\n  \"/tokens/bootstrap/v1\": {\n    /** Get the latest price event per token in a collection, so that you can listen to future events and keep track of prices */\n    get: operations[\"getTokensBootstrapV1\"];\n  };\n  \"/tokens/details/v2\": {\n    /** Get a list of tokens with full metadata. This is useful for showing a single token page, or scenarios that require more metadata. If you don't need this metadata, you should use the <a href='#/tokens/getTokensV1'>tokens</a> API, which is much faster. */\n    get: operations[\"getTokensDetailsV2\"];\n  };\n  \"/tokens/details/v3\": {\n    /** Get a list of tokens with full metadata. This is useful for showing a single token page, or scenarios that require more metadata. If you don't need this metadata, you should use the <a href='#/tokens/getTokensV1'>tokens</a> API, which is much faster. */\n    get: operations[\"getTokensDetailsV3\"];\n  };\n  \"/tokens/details/v4\": {\n    /** Get a list of tokens with full metadata. This is useful for showing a single token page, or scenarios that require more metadata. If you don't need this metadata, you should use the <a href='#/tokens/getTokensV1'>tokens</a> API, which is much faster. */\n    get: operations[\"getTokensDetailsV4\"];\n  };\n  \"/tokens/floor/v1\": {\n    /** This API will return the best price of every token in a collection that is currently on sale. Note: Prices are returned in the native currency of the network. */\n    get: operations[\"getTokensFloorV1\"];\n  };\n  \"/tokens/ids/v1\": {\n    /** This API is optimized for quickly fetching a list of tokens ids in by collection, contract, token set id. */\n    get: operations[\"getTokensIdsV1\"];\n  };\n  \"/transfers/bulk/v1\": {\n    /** Note: this API is optimized for bulk access, and offers minimal filters/metadata. If you need more flexibility, try the `NFT API > Transfers` endpoint */\n    get: operations[\"getTransfersBulkV1\"];\n  };\n  \"/users/activity/v2\": {\n    /** This API can be used to build a feed for a user */\n    get: operations[\"getUsersActivityV2\"];\n  };\n  \"/users/activity/v3\": {\n    /** This API can be used to build a feed for a user */\n    get: operations[\"getUsersActivityV3\"];\n  };\n  \"/users/activity/v4\": {\n    /** This API can be used to build a feed for a user */\n    get: operations[\"getUsersActivityV4\"];\n  };\n  \"/users/activity/v5\": {\n    /** This API can be used to build a feed for a user */\n    get: operations[\"getUsersActivityV5\"];\n  };\n  \"/collections/{collection}/attributes/v1\": {\n    get: operations[\"getCollectionsCollectionAttributesV1\"];\n  };\n  \"/collections/{collection}/activity/v2\": {\n    /** This API can be used to build a feed for a collection */\n    get: operations[\"getCollectionsCollectionActivityV2\"];\n  };\n  \"/collections/{collection}/activity/v1\": {\n    /** This API can be used to build a feed for a collection */\n    get: operations[\"getCollectionsCollectionActivityV1\"];\n  };\n  \"/collections/{collection}/activity/v3\": {\n    /** This API can be used to build a feed for a collection */\n    get: operations[\"getCollectionsCollectionActivityV3\"];\n  };\n  \"/collections/{collection}/top-bids/v1\": {\n    /** When users are placing collection or trait bids, this API can be used to show them where the bid is in the context of other bids, and how many tokens it will be the top bid for. */\n    get: operations[\"getCollectionsCollectionTopbidsV1\"];\n  };\n  \"/collections/{collection}/owners-distribution/v1\": {\n    /** This API can be used to show what the distribution of owners in a collection looks like. */\n    get: operations[\"getCollectionsCollectionOwnersdistributionV1\"];\n  };\n  \"/collections-sets/{collectionsSetId}/owners-distribution/v1\": {\n    /** This API can be used to show what the distribution of owners in a collections set looks like. */\n    get: operations[\"getCollectionssetsCollectionssetidOwnersdistributionV1\"];\n  };\n  \"/events/collections/floor-ask/v1\": {\n    /**\n     * Every time the floor price of a collection changes (i.e. the 'floor ask'), an event is generated. This API is designed to be polled at high frequency, in order to keep an external system in sync with accurate prices for any token.\n     *\n     * There are multiple event types, which describe what caused the change in price:\n     *\n     * - `new-order` > new listing at a lower price\n     *\n     * - `expiry` > the previous best listing expired\n     *\n     * - `sale` > the previous best listing was filled\n     *\n     * - `cancel` > the previous best listing was cancelled\n     *\n     * - `balance-change` > the best listing was invalidated due to no longer owning the NFT\n     *\n     * - `approval-change` > the best listing was invalidated due to revoked approval\n     *\n     * - `revalidation` > manual revalidation of orders (e.g. after a bug fixed)\n     *\n     * - `reprice` > price update for dynamic orders (e.g. dutch auctions)\n     *\n     * - `bootstrap` > initial loading of data, so that all tokens have a price associated\n     *\n     * Some considerations to keep in mind\n     *\n     * - Due to the complex nature of monitoring off-chain liquidity across multiple marketplaces, including dealing with block re-orgs, events should be considered 'relative' to the perspective of the indexer, ie _when they were discovered_, rather than _when they happened_. A more deterministic historical record of price changes is in development, but in the meantime, this method is sufficent for keeping an external system in sync with the best available prices.\n     *\n     * - Events are only generated if the best price changes. So if a new order or sale happens without changing the best price, no event is generated. This is more common with 1155 tokens, which have multiple owners and more depth. For this reason, if you need sales data, use the Sales API.\n     */\n    get: operations[\"getEventsCollectionsFlooraskV1\"];\n  };\n  \"/events/collections/top-bid/v1\": {\n    /** Every time the top offer of a collection changes (i.e. the 'top bid'), an event is generated. This API is designed to be polled at high frequency. */\n    get: operations[\"getEventsCollectionsTopbidV1\"];\n  };\n  \"/events/collections/top-bid/v2\": {\n    /** Every time the top offer of a collection changes (i.e. the 'top bid'), an event is generated. This API is designed to be polled at high frequency. */\n    get: operations[\"getEventsCollectionsTopbidV2\"];\n  };\n  \"/events/tokens/floor-ask/v2\": {\n    /**\n     * Every time the best price of a token changes (i.e. the 'floor ask'), an event is generated. This API is designed to be polled at high frequency, in order to keep an external system in sync with accurate prices for any token.\n     *\n     * There are multiple event types, which describe what caused the change in price:\n     *\n     * - `new-order` > new listing at a lower price\n     *\n     * - `expiry` > the previous best listing expired\n     *\n     * - `sale` > the previous best listing was filled\n     *\n     * - `cancel` > the previous best listing was cancelled\n     *\n     * - `balance-change` > the best listing was invalidated due to no longer owning the NFT\n     *\n     * - `approval-change` > the best listing was invalidated due to revoked approval\n     *\n     * - `revalidation` > manual revalidation of orders (e.g. after a bug fixed)\n     *\n     * - `reprice` > price update for dynamic orders (e.g. dutch auctions)\n     *\n     * - `bootstrap` > initial loading of data, so that all tokens have a price associated\n     *\n     * Some considerations to keep in mind\n     *\n     * - Due to the complex nature of monitoring off-chain liquidity across multiple marketplaces, including dealing with block re-orgs, events should be considered 'relative' to the perspective of the indexer, ie _when they were discovered_, rather than _when they happened_. A more deterministic historical record of price changes is in development, but in the meantime, this method is sufficent for keeping an external system in sync with the best available prices.\n     *\n     * - Events are only generated if the best price changes. So if a new order or sale happens without changing the best price, no event is generated. This is more common with 1155 tokens, which have multiple owners and more depth. For this reason, if you need sales data, use the Sales API.\n     */\n    get: operations[\"getEventsTokensFlooraskV2\"];\n  };\n  \"/events/tokens/floor-ask/v3\": {\n    /**\n     * Every time the best price of a token changes (i.e. the 'floor ask'), an event is generated. This API is designed to be polled at high frequency, in order to keep an external system in sync with accurate prices for any token.\n     *\n     * There are multiple event types, which describe what caused the change in price:\n     *\n     * - `new-order` > new listing at a lower price\n     *\n     * - `expiry` > the previous best listing expired\n     *\n     * - `sale` > the previous best listing was filled\n     *\n     * - `cancel` > the previous best listing was cancelled\n     *\n     * - `balance-change` > the best listing was invalidated due to no longer owning the NFT\n     *\n     * - `approval-change` > the best listing was invalidated due to revoked approval\n     *\n     * - `revalidation` > manual revalidation of orders (e.g. after a bug fixed)\n     *\n     * - `reprice` > price update for dynamic orders (e.g. dutch auctions)\n     *\n     * - `bootstrap` > initial loading of data, so that all tokens have a price associated\n     *\n     * Some considerations to keep in mind\n     *\n     * - Due to the complex nature of monitoring off-chain liquidity across multiple marketplaces, including dealing with block re-orgs, events should be considered 'relative' to the perspective of the indexer, ie _when they were discovered_, rather than _when they happened_. A more deterministic historical record of price changes is in development, but in the meantime, this method is sufficent for keeping an external system in sync with the best available prices.\n     *\n     * - Events are only generated if the best price changes. So if a new order or sale happens without changing the best price, no event is generated. This is more common with 1155 tokens, which have multiple owners and more depth. For this reason, if you need sales data, use the Sales API.\n     */\n    get: operations[\"getEventsTokensFlooraskV3\"];\n  };\n  \"/oracle/collections/floor-ask/v4\": {\n    /** Get a signed message of any collection's floor price (spot or twap). The oracle's address is 0x32dA57E736E05f75aa4FaE2E9Be60FD904492726. */\n    get: operations[\"getOracleCollectionsFlooraskV4\"];\n  };\n  \"/oracle/collections/floor-ask/v5\": {\n    /** Get a signed message of any collection's floor price (spot or twap). The oracle's address is 0xAeB1D03929bF87F69888f381e73FBf75753d75AF. */\n    get: operations[\"getOracleCollectionsFlooraskV5\"];\n  };\n  \"/oracle/collections/top-bid/v1\": {\n    /** Get a signed message of any collection's top bid price (spot or twap). The oracle's address is 0x32dA57E736E05f75aa4FaE2E9Be60FD904492726. */\n    get: operations[\"getOracleCollectionsTopbidV1\"];\n  };\n  \"/oracle/collections/top-bid/v2\": {\n    /** Get a signed message of any collection's top bid price (spot or twap). The oracle's address is 0xAeB1D03929bF87F69888f381e73FBf75753d75AF. */\n    get: operations[\"getOracleCollectionsTopbidV2\"];\n  };\n  \"/oracle/tokens/status/v1\": {\n    /** Get a signed message of a token's details (flagged status and last transfer time). The oracle's address is 0x32dA57E736E05f75aa4FaE2E9Be60FD904492726. */\n    get: operations[\"getOracleTokensStatusV1\"];\n  };\n  \"/oracle/tokens/status/v2\": {\n    /** Get a signed message of a token's details (flagged status and last transfer time). The oracle's address is 0xAeB1D03929bF87F69888f381e73FBf75753d75AF. */\n    get: operations[\"getOracleTokensStatusV2\"];\n  };\n  \"/tokens/flag/changes/v1\": {\n    /** This API return the recent flagged/un-flagged tokens across all collections sorted by change time */\n    get: operations[\"getTokensFlagChangesV1\"];\n  };\n  \"/tokens/{token}/activity/v3\": {\n    /** This API can be used to build a feed for a token */\n    get: operations[\"getTokensTokenActivityV3\"];\n  };\n  \"/tokens/{token}/activity/v1\": {\n    /** This API can be used to build a feed for a token */\n    get: operations[\"getTokensTokenActivityV1\"];\n  };\n  \"/tokens/{token}/activity/v2\": {\n    /** This API can be used to build a feed for a token */\n    get: operations[\"getTokensTokenActivityV2\"];\n  };\n  \"/tokens/{token}/activity/v4\": {\n    /** This API can be used to build a feed for a token */\n    get: operations[\"getTokensTokenActivityV4\"];\n  };\n  \"/transactions/{txHash}/synced/v1\": {\n    /** Get a boolean response on whether a particular transaction was synced or not. */\n    get: operations[\"getTransactionsTxhashSyncedV1\"];\n  };\n  \"/users/{user}/tokens/v6\": {\n    /** Get tokens held by a user, along with ownership information such as associated orders and date acquired. */\n    get: operations[\"getUsersUserTokensV6\"];\n  };\n  \"/users/{user}/tokens/v4\": {\n    /** Get tokens held by a user, along with ownership information such as associated orders and date acquired. */\n    get: operations[\"getUsersUserTokensV4\"];\n  };\n  \"/users/{user}/tokens/v2\": {\n    /** Get tokens held by a user, along with ownership information such as associated orders and date acquired. */\n    get: operations[\"getUsersUserTokensV2\"];\n  };\n  \"/users/{user}/positions/v1\": {\n    /** Get aggregate user liquidity, grouped by collection. Useful for showing a summary of liquidity being provided (orders made). */\n    get: operations[\"getUsersUserPositionsV1\"];\n  };\n  \"/users/{user}/collections/v1\": {\n    /** Get aggregate stats for a user, grouped by collection. Useful for showing total portfolio information. */\n    get: operations[\"getUsersUserCollectionsV1\"];\n  };\n  \"/users/{user}/activity/v1\": {\n    /** This API can be used to build a feed for a user */\n    get: operations[\"getUsersUserActivityV1\"];\n  };\n  \"/users/{user}/collections/v2\": {\n    /** Get aggregate stats for a user, grouped by collection. Useful for showing total portfolio information. */\n    get: operations[\"getUsersUserCollectionsV2\"];\n  };\n  \"/users/{user}/tokens/v1\": {\n    /** Get tokens held by a user, along with ownership information such as associated orders and date acquired. */\n    get: operations[\"getUsersUserTokensV1\"];\n  };\n  \"/users/{user}/tokens/v3\": {\n    /** Get tokens held by a user, along with ownership information such as associated orders and date acquired. */\n    get: operations[\"getUsersUserTokensV3\"];\n  };\n  \"/users/{user}/tokens/v5\": {\n    /** Get tokens held by a user, along with ownership information such as associated orders and date acquired. */\n    get: operations[\"getUsersUserTokensV5\"];\n  };\n  \"/collections/{collection}/attributes/explore/v4\": {\n    /** Get detailed aggregate about attributes in a collection, attribute floors */\n    get: operations[\"getCollectionsCollectionAttributesExploreV4\"];\n  };\n  \"/collections/{collection}/attributes/explore/v2\": {\n    /** Get detailed aggregate about attributes in a collection, attribute floors */\n    get: operations[\"getCollectionsCollectionAttributesExploreV2\"];\n  };\n  \"/collections/{collection}/attributes/all/v2\": {\n    get: operations[\"getCollectionsCollectionAttributesAllV2\"];\n  };\n  \"/collections/{collection}/attributes/all/v1\": {\n    get: operations[\"getCollectionsCollectionAttributesAllV1\"];\n  };\n  \"/collections/{collection}/attributes/static/v1\": {\n    get: operations[\"getCollectionsCollectionAttributesStaticV1\"];\n  };\n  \"/collections/{collection}/attributes/explore/v1\": {\n    get: operations[\"getCollectionsCollectionAttributesExploreV1\"];\n  };\n  \"/collections/{collection}/attributes/explore/v3\": {\n    /** Get detailed aggregate about attributes in a collection, attribute floors */\n    get: operations[\"getCollectionsCollectionAttributesExploreV3\"];\n  };\n  \"/oracle/collections/{collection}/floor-ask/v2\": {\n    /** Get a signed message of any collection's floor price (spot or twap). The oracle's address is 0x32dA57E736E05f75aa4FaE2E9Be60FD904492726. */\n    get: operations[\"getOracleCollectionsCollectionFlooraskV2\"];\n  };\n  \"/oracle/collections/{collection}/floor-ask/v1\": {\n    /** Get a signed message of any collection's floor price (spot or twap). The oracle's address is 0x32dA57E736E05f75aa4FaE2E9Be60FD904492726. */\n    get: operations[\"getOracleCollectionsCollectionFlooraskV1\"];\n  };\n  \"/oracle/collections/{collection}/floor-ask/v3\": {\n    /** Get a signed message of any collection's floor price (spot or twap). The oracle's address is 0x32dA57E736E05f75aa4FaE2E9Be60FD904492726. */\n    get: operations[\"getOracleCollectionsCollectionFlooraskV3\"];\n  };\n  \"/orders/users/{user}/top-bids/v2\": {\n    /** Return the top bids for the given user tokens */\n    get: operations[\"getOrdersUsersUserTopbidsV2\"];\n  };\n  \"/orders/users/{user}/top-bids/v1\": {\n    /** Return the top bids for the given user tokens */\n    get: operations[\"getOrdersUsersUserTopbidsV1\"];\n  };\n  \"/orders/users/{user}/top-bids/v3\": {\n    /** Return the top bids for the given user tokens */\n    get: operations[\"getOrdersUsersUserTopbidsV3\"];\n  };\n  \"/redirect/collections/{collection}/image/v1\": {\n    get: operations[\"getRedirectCollectionsCollectionImageV1\"];\n  };\n  \"/redirect/currency/{address}/icon/v1\": {\n    get: operations[\"getRedirectCurrencyAddressIconV1\"];\n  };\n  \"/redirect/sources/{source}/logo/v2\": {\n    get: operations[\"getRedirectSourcesSourceLogoV2\"];\n  };\n  \"/redirect/tokens/{token}/image/v1\": {\n    get: operations[\"getRedirectTokensTokenImageV1\"];\n  };\n  \"/redirect/sources/{source}/tokens/{token}/link/v2\": {\n    get: operations[\"getRedirectSourcesSourceTokensTokenLinkV2\"];\n  };\n  \"/collections/{collection}/community/v1\": {\n    put: operations[\"putCollectionsCollectionCommunityV1\"];\n  };\n  \"/api-keys\": {\n    /**\n     * The API key can be used in every route, by setting it as a request header **x-api-key**.\n     *\n     * <a href='https://docs.reservoir.tools/reference/getting-started'>Learn more</a> about API Keys and Rate Limiting\n     */\n    post: operations[\"postApikeys\"];\n  };\n  \"/admin/calc-rarity\": {\n    post: operations[\"postAdminCalcrarity\"];\n  };\n  \"/admin/create-rate-limit-rule\": {\n    post: operations[\"postAdminCreateratelimitrule\"];\n  };\n  \"/admin/delete-rate-limit-rule\": {\n    post: operations[\"postAdminDeleteratelimitrule\"];\n  };\n  \"/admin/fix-blocks\": {\n    post: operations[\"postAdminFixblocks\"];\n  };\n  \"/admin/fix-cache\": {\n    post: operations[\"postAdminFixcache\"];\n  };\n  \"/admin/fix-orders\": {\n    post: operations[\"postAdminFixorders\"];\n  };\n  \"/admin/fix-token-cache\": {\n    post: operations[\"postAdminFixtokencache\"];\n  };\n  \"/admin/flag-address\": {\n    post: operations[\"postAdminFlagaddress\"];\n  };\n  \"/admin/index-metadata\": {\n    post: operations[\"postAdminIndexmetadata\"];\n  };\n  \"/admin/refresh-collection\": {\n    post: operations[\"postAdminRefreshcollection\"];\n  };\n  \"/admin/refresh-collection-flags\": {\n    post: operations[\"postAdminRefreshcollectionflags\"];\n  };\n  \"/admin/refresh-token\": {\n    post: operations[\"postAdminRefreshtoken\"];\n  };\n  \"/admin/resync-floor-events\": {\n    post: operations[\"postAdminResyncfloorevents\"];\n  };\n  \"/admin/resync-source\": {\n    post: operations[\"postAdminResyncsource\"];\n  };\n  \"/admin/revalidate-order\": {\n    post: operations[\"postAdminRevalidateorder\"];\n  };\n  \"/admin/routers\": {\n    post: operations[\"postAdminRouters\"];\n  };\n  \"/admin/set-community\": {\n    post: operations[\"postAdminSetcommunity\"];\n  };\n  \"/admin/sync-arweave\": {\n    post: operations[\"postAdminSyncarweave\"];\n  };\n  \"/admin/sync-daily-volumes\": {\n    post: operations[\"postAdminSyncdailyvolumes\"];\n  };\n  \"/admin/sync-events\": {\n    post: operations[\"postAdminSyncevents\"];\n  };\n  \"/admin/update-api-key\": {\n    post: operations[\"postAdminUpdateapikey\"];\n  };\n  \"/admin/update-rate-limit-rule\": {\n    post: operations[\"postAdminUpdateratelimitrule\"];\n  };\n  \"/admin/update-source\": {\n    post: operations[\"postAdminUpdatesource\"];\n  };\n  \"/collections-sets/v1\": {\n    post: operations[\"postCollectionssetsV1\"];\n  };\n  \"/contracts-sets/v1\": {\n    post: operations[\"postContractssetsV1\"];\n  };\n  \"/order/v2\": {\n    post: operations[\"postOrderV2\"];\n  };\n  \"/order/v3\": {\n    post: operations[\"postOrderV3\"];\n  };\n  \"/order/v4\": {\n    post: operations[\"postOrderV4\"];\n  };\n  \"/seaport/offers\": {\n    post: operations[\"postSeaportOffers\"];\n  };\n  \"/token-sets/v1\": {\n    post: operations[\"postTokensetsV1\"];\n  };\n  \"/token-sets/v2\": {\n    post: operations[\"postTokensetsV2\"];\n  };\n  \"/websocket/user-auth\": {\n    post: operations[\"postWebsocketUserauth\"];\n  };\n  \"/collections/refresh/v1\": {\n    post: operations[\"postCollectionsRefreshV1\"];\n  };\n  \"/execute/bid/v4\": {\n    /** Generate a bid and submit it to multiple marketplaces */\n    post: operations[\"postExecuteBidV4\"];\n  };\n  \"/execute/bid/v5\": {\n    /** Generate bids and submit them to multiple marketplaces */\n    post: operations[\"postExecuteBidV5\"];\n  };\n  \"/execute/buy/v4\": {\n    post: operations[\"postExecuteBuyV4\"];\n  };\n  \"/execute/buy/v5\": {\n    post: operations[\"postExecuteBuyV5\"];\n  };\n  \"/execute/buy/v6\": {\n    post: operations[\"postExecuteBuyV6\"];\n  };\n  \"/execute/buy/v7\": {\n    post: operations[\"postExecuteBuyV7\"];\n  };\n  \"/execute/list/v3\": {\n    /** Generate a listing and submit it to multiple marketplaces */\n    post: operations[\"postExecuteListV3\"];\n  };\n  \"/execute/list/v4\": {\n    /** Generate a listing and submit it to multiple marketplaces */\n    post: operations[\"postExecuteListV4\"];\n  };\n  \"/execute/list/v5\": {\n    /** Generate listings and submit them to multiple marketplaces */\n    post: operations[\"postExecuteListV5\"];\n  };\n  \"/execute/permit-signature/v1\": {\n    post: operations[\"postExecutePermitsignatureV1\"];\n  };\n  \"/execute/sell/v4\": {\n    post: operations[\"postExecuteSellV4\"];\n  };\n  \"/execute/sell/v5\": {\n    post: operations[\"postExecuteSellV5\"];\n  };\n  \"/execute/sell/v6\": {\n    post: operations[\"postExecuteSellV6\"];\n  };\n  \"/execute/sell/v7\": {\n    post: operations[\"postExecuteSellV7\"];\n  };\n  \"/tokens/flag/v1\": {\n    post: operations[\"postTokensFlagV1\"];\n  };\n  \"/tokens/refresh/v1\": {\n    post: operations[\"postTokensRefreshV1\"];\n  };\n  \"/tokens/simulate-floor/v1\": {\n    post: operations[\"postTokensSimulatefloorV1\"];\n  };\n  \"/tokens/simulate-top-bid/v1\": {\n    post: operations[\"postTokensSimulatetopbidV1\"];\n  };\n  \"/management/orders/simulate/v1\": {\n    post: operations[\"postManagementOrdersSimulateV1\"];\n  };\n}\n\nexport interface definitions {\n  source: { [key: string]: unknown };\n  /** @description Amount of items returned in response. */\n  Model1: {\n    id?: number;\n    type?: string;\n    contract?: string;\n    collectionId?: string;\n    tokenId?: string;\n    fromAddress?: string;\n    toAddress?: string;\n    price?: number;\n    amount?: number;\n    timestamp?: number;\n    txHash?: string;\n    logIndex?: number;\n    batchIndex?: number;\n    source?: definitions[\"source\"];\n  };\n  activities: definitions[\"Model1\"][];\n  getActivityV1Response: {\n    /** @description Use continuation token to request next offset of items. */\n    continuation?: number;\n    activities?: definitions[\"activities\"];\n  };\n  order: {\n    id?: string;\n    /** @enum {string} */\n    side?: \"ask\" | \"bid\";\n    source?: definitions[\"source\"];\n  };\n  /** @description Amount of items returned in response. */\n  Model2: {\n    id?: number;\n    type?: string;\n    contract?: string;\n    collectionId?: string;\n    tokenId?: string;\n    fromAddress?: string;\n    toAddress?: string;\n    price?: number;\n    amount?: number;\n    timestamp?: number;\n    txHash?: string;\n    logIndex?: number;\n    batchIndex?: number;\n    order?: definitions[\"order\"];\n  };\n  Model3: definitions[\"Model2\"][];\n  getActivityV2Response: {\n    /** @description Use continuation token to request next offset of items. */\n    continuation?: number;\n    activities?: definitions[\"Model3\"];\n  };\n  data: {\n    collectionId?: string;\n    collectionName?: string;\n    tokenName?: string;\n    image?: string;\n  };\n  Model4: {\n    /** @enum {string} */\n    kind?: \"token\";\n    data?: definitions[\"data\"];\n  };\n  Model5: {\n    id?: string;\n    /** @enum {string} */\n    side?: \"ask\" | \"bid\";\n    source?: definitions[\"source\"];\n    metadata?: definitions[\"Model4\"];\n  };\n  /** @description Amount of items returned in response. */\n  Model6: {\n    id?: number;\n    type?: string;\n    contract?: string;\n    collectionId?: string;\n    tokenId?: string;\n    fromAddress?: string;\n    toAddress?: string;\n    price?: number;\n    amount?: number;\n    timestamp?: number;\n    txHash?: string;\n    logIndex?: number;\n    batchIndex?: number;\n    order?: definitions[\"Model5\"];\n  };\n  Model7: definitions[\"Model6\"][];\n  getActivityV3Response: {\n    continuation?: string;\n    activities?: definitions[\"Model7\"];\n  };\n  token: {\n    tokenId?: string;\n    name?: string;\n    image?: string;\n  };\n  collection: {\n    id?: string;\n    name?: string;\n    image?: string;\n  };\n  Model8: {\n    token?: definitions[\"token\"];\n    collection?: definitions[\"collection\"];\n  };\n  Model9: {\n    /** @enum {string} */\n    kind?: \"token\";\n    data?: definitions[\"Model8\"];\n  };\n  Model10: {\n    id?: string;\n    /** @enum {string} */\n    side?: \"ask\" | \"bid\";\n    source?: definitions[\"source\"];\n    criteria?: definitions[\"Model9\"];\n  };\n  /** @description Amount of items returned in response. */\n  Model11: {\n    id?: number;\n    type?: string;\n    contract?: string;\n    collectionId?: string;\n    tokenId?: string;\n    fromAddress?: string;\n    toAddress?: string;\n    price?: number;\n    amount?: number;\n    timestamp?: number;\n    txHash?: string;\n    logIndex?: number;\n    batchIndex?: number;\n    order?: definitions[\"Model10\"];\n  };\n  Model12: definitions[\"Model11\"][];\n  getActivityV4Response: {\n    continuation?: string;\n    activities?: definitions[\"Model12\"];\n  };\n  fee: {\n    bps?: number;\n    percent?: number;\n  };\n  Model13: {\n    name?: string;\n    imageUrl?: string;\n    fee?: definitions[\"fee\"];\n    feeBps?: number;\n    orderbook?: string;\n    orderKind?: string;\n    listingEnabled?: boolean;\n  };\n  marketplaces: definitions[\"Model13\"][];\n  getMarketplacesv1Resp: {\n    marketplaces?: definitions[\"marketplaces\"];\n  };\n  Model14: {\n    value: string;\n    count?: number;\n  };\n  values: definitions[\"Model14\"][];\n  Model15: {\n    key: string;\n    /** @enum {string} */\n    kind: \"string\" | \"number\" | \"date\" | \"range\";\n    values?: definitions[\"values\"];\n  };\n  attributes: definitions[\"Model15\"][];\n  getAttributesV1Response: {\n    attributes?: definitions[\"attributes\"];\n  };\n  sampleImages: string[];\n  royalties: {\n    recipient?: string;\n    bps?: number;\n  };\n  lastBuy: {\n    value?: number;\n    timestamp?: number;\n  };\n  Model16: {\n    contract?: string;\n    tokenId?: string;\n    name?: string;\n    image?: string;\n  };\n  floorAsk: {\n    id?: string;\n    price?: number;\n    maker?: string;\n    validFrom?: number;\n    validUntil?: number;\n    token?: definitions[\"Model16\"];\n  };\n  topBid: {\n    id?: string;\n    value?: number;\n    maker?: string;\n    validFrom?: number;\n    validUntil?: number;\n  };\n  rank: {\n    \"1day\"?: number;\n    \"7day\"?: number;\n    \"30day\"?: number;\n    allTime?: number;\n  };\n  volumeChange: {\n    \"1day\"?: number;\n    \"7day\"?: number;\n    \"30day\"?: number;\n  };\n  Model17: {\n    id?: string;\n    slug?: string;\n    name?: string;\n    metadata?: definitions[\"source\"];\n    sampleImages?: definitions[\"sampleImages\"];\n    tokenCount?: string;\n    onSaleCount?: string;\n    primaryContract?: string;\n    tokenSetId?: string;\n    royalties?: definitions[\"royalties\"];\n    lastBuy?: definitions[\"lastBuy\"];\n    lastSell?: definitions[\"lastBuy\"];\n    floorAsk?: definitions[\"floorAsk\"];\n    topBid?: definitions[\"topBid\"];\n    rank?: definitions[\"rank\"];\n    volume?: definitions[\"rank\"];\n    volumeChange?: definitions[\"volumeChange\"];\n    floorSale?: definitions[\"volumeChange\"];\n    floorSaleChange?: definitions[\"volumeChange\"];\n  };\n  getCollectionV1Response: {\n    collection?: definitions[\"Model17\"];\n  };\n  Model18: {\n    key?: string;\n    kind?: string;\n    count?: number;\n  };\n  Model19: definitions[\"Model18\"][];\n  Model20: {\n    id?: string;\n    /** @description Open Sea slug */\n    slug?: string;\n    name?: string;\n    metadata?: definitions[\"source\"];\n    sampleImages?: definitions[\"sampleImages\"];\n    tokenCount?: string;\n    onSaleCount?: string;\n    primaryContract?: string;\n    tokenSetId?: string;\n    royalties?: definitions[\"royalties\"];\n    lastBuy?: definitions[\"lastBuy\"];\n    floorAsk?: definitions[\"floorAsk\"];\n    topBid?: definitions[\"topBid\"];\n    rank?: definitions[\"rank\"];\n    volume?: definitions[\"rank\"];\n    volumeChange?: definitions[\"volumeChange\"];\n    floorSale?: definitions[\"volumeChange\"];\n    floorSaleChange?: definitions[\"volumeChange\"];\n    collectionBidSupported?: boolean;\n    ownerCount?: number;\n    attributes?: definitions[\"Model19\"];\n  };\n  getCollectionV2Response: {\n    collection?: definitions[\"Model20\"];\n  };\n  Model21: {\n    id?: string;\n    sourceDomain?: string;\n    price?: number;\n    maker?: string;\n    validFrom?: number;\n    validUntil?: number;\n    token?: definitions[\"Model16\"];\n  };\n  Model22: {\n    id?: string;\n    /** @description Open Sea slug */\n    slug?: string;\n    name?: string;\n    metadata?: definitions[\"source\"];\n    sampleImages?: definitions[\"sampleImages\"];\n    tokenCount?: string;\n    onSaleCount?: string;\n    primaryContract?: string;\n    tokenSetId?: string;\n    royalties?: definitions[\"royalties\"];\n    lastBuy?: definitions[\"lastBuy\"];\n    floorAsk?: definitions[\"Model21\"];\n    topBid?: definitions[\"topBid\"];\n    rank?: definitions[\"rank\"];\n    volume?: definitions[\"rank\"];\n    volumeChange?: definitions[\"volumeChange\"];\n    floorSale?: definitions[\"volumeChange\"];\n    floorSaleChange?: definitions[\"volumeChange\"];\n    collectionBidSupported?: boolean;\n    ownerCount?: number;\n    attributes?: definitions[\"Model19\"];\n  };\n  getCollectionV3Response: {\n    collection?: definitions[\"Model22\"];\n  };\n  Model23: {\n    id?: string;\n    slug?: string;\n    name?: string;\n    metadata?: definitions[\"source\"];\n    sampleImages?: definitions[\"sampleImages\"];\n    tokenCount?: string;\n    tokenSetId?: string;\n    royalties?: definitions[\"royalties\"];\n    floorAskPrice?: number;\n    topBidValue?: number;\n    topBidMaker?: string;\n    rank?: definitions[\"rank\"];\n    volume?: definitions[\"rank\"];\n  };\n  collections: definitions[\"Model23\"][];\n  getCollectionsV1Response: {\n    collections?: definitions[\"collections\"];\n  };\n  Model24: {\n    id?: string;\n    slug?: string;\n    name?: string;\n    image?: string;\n    banner?: string;\n    sampleImages?: definitions[\"sampleImages\"];\n    tokenCount?: string;\n    tokenSetId?: string;\n    primaryContract?: string;\n    floorAskPrice?: number;\n    topBidValue?: number;\n    topBidMaker?: string;\n    \"1dayVolume\"?: number;\n    \"7dayVolume\"?: number;\n    \"30dayVolume\"?: number;\n    allTimeVolume?: number;\n    allTimeRank?: number;\n  };\n  Model25: definitions[\"Model24\"][];\n  getCollectionsV2Response: {\n    collections?: definitions[\"Model25\"];\n  };\n  Model26: {\n    id?: string;\n    slug?: string;\n    name?: string;\n    image?: string;\n    banner?: string;\n    discordUrl?: string;\n    externalUrl?: string;\n    twitterUsername?: string;\n    description?: string;\n    sampleImages?: definitions[\"sampleImages\"];\n    tokenCount?: string;\n    tokenSetId?: string;\n    primaryContract?: string;\n    floorAskPrice?: number;\n    topBidValue?: number;\n    topBidMaker?: string;\n    rank?: definitions[\"rank\"];\n    volume?: definitions[\"rank\"];\n    volumeChange?: definitions[\"volumeChange\"];\n    floorSale?: definitions[\"volumeChange\"];\n  };\n  Model27: definitions[\"Model26\"][];\n  getCollectionsV3Response: {\n    collections?: definitions[\"Model27\"];\n  };\n  Model28: {\n    id?: string;\n    slug?: string;\n    name?: string;\n    image?: string;\n    banner?: string;\n    discordUrl?: string;\n    externalUrl?: string;\n    twitterUsername?: string;\n    description?: string;\n    sampleImages?: definitions[\"sampleImages\"];\n    tokenCount?: string;\n    tokenSetId?: string;\n    primaryContract?: string;\n    floorAskPrice?: number;\n    topBidValue?: number;\n    topBidMaker?: string;\n    rank?: definitions[\"rank\"];\n    volume?: definitions[\"rank\"];\n    volumeChange?: definitions[\"volumeChange\"];\n    floorSale?: definitions[\"volumeChange\"];\n    floorSaleChange?: definitions[\"volumeChange\"];\n  };\n  Model29: definitions[\"Model28\"][];\n  getCollectionsV4Response: {\n    continuation?: string;\n    collections?: definitions[\"Model29\"];\n  };\n  Model30: {\n    recipient?: string;\n    bps?: number;\n  };\n  breakdown: definitions[\"Model30\"][];\n  Model31: {\n    recipient?: string;\n    breakdown?: definitions[\"breakdown\"];\n    bps?: number;\n  };\n  currency: {\n    contract?: string;\n    name?: string;\n    symbol?: string;\n    decimals?: number;\n  };\n  amount: {\n    raw?: string;\n    decimal?: number;\n    usd?: number;\n    native?: number;\n  };\n  price: {\n    currency?: definitions[\"currency\"];\n    amount?: definitions[\"amount\"];\n    netAmount?: definitions[\"amount\"];\n  };\n  Model32: {\n    id?: string;\n    sourceDomain?: string;\n    price?: definitions[\"price\"];\n    maker?: string;\n    validFrom?: number;\n    validUntil?: number;\n    token?: definitions[\"Model16\"];\n  };\n  Model33: {\n    id?: string;\n    sourceDomain?: string;\n    price?: definitions[\"price\"];\n    maker?: string;\n    validFrom?: number;\n    validUntil?: number;\n  };\n  Model34: {\n    id?: string;\n    /** @description Open Sea slug */\n    slug?: string;\n    createdAt?: string;\n    name?: string;\n    image?: string;\n    banner?: string;\n    discordUrl?: string;\n    externalUrl?: string;\n    twitterUsername?: string;\n    openseaVerificationStatus?: string;\n    description?: string;\n    sampleImages?: definitions[\"sampleImages\"];\n    tokenCount?: string;\n    onSaleCount?: string;\n    primaryContract?: string;\n    tokenSetId?: string;\n    royalties?: definitions[\"Model31\"];\n    allRoyalties?: definitions[\"source\"];\n    lastBuy?: definitions[\"lastBuy\"];\n    floorAsk?: definitions[\"Model32\"];\n    topBid?: definitions[\"Model33\"];\n    rank?: definitions[\"rank\"];\n    volume?: definitions[\"rank\"];\n    volumeChange?: definitions[\"volumeChange\"];\n    floorSale?: definitions[\"volumeChange\"];\n    floorSaleChange?: definitions[\"volumeChange\"];\n    salesCount?: definitions[\"rank\"];\n    collectionBidSupported?: boolean;\n    ownerCount?: number;\n    attributes?: definitions[\"Model19\"];\n  };\n  Model35: definitions[\"Model34\"][];\n  getCollectionsV5Response: {\n    continuation?: string;\n    collections?: definitions[\"Model35\"];\n  };\n  Model36: {\n    kind?: string;\n    recipient?: string;\n    bps?: number;\n  };\n  feeBreakdown: definitions[\"Model36\"][];\n  Model37: {\n    id: string;\n    kind: string;\n    /** @enum {string} */\n    side: \"buy\" | \"sell\";\n    fillabilityStatus: string;\n    approvalStatus: string;\n    tokenSetId: string;\n    tokenSetSchemaHash: string;\n    maker: string;\n    taker: string;\n    price: number;\n    value: number;\n    validFrom: number;\n    validUntil: number;\n    sourceId?: string;\n    feeBps?: number;\n    feeBreakdown?: definitions[\"feeBreakdown\"];\n    expiration: number;\n    createdAt: string;\n    updatedAt: string;\n    rawData?: definitions[\"source\"];\n  };\n  orders: definitions[\"Model37\"][];\n  getOrdersV1Response: {\n    orders?: definitions[\"orders\"];\n  };\n  Model38: {\n    id: string;\n    kind: string;\n    /** @enum {string} */\n    side: \"buy\" | \"sell\";\n    fillabilityStatus: string;\n    approvalStatus: string;\n    tokenSetId: string;\n    tokenSetSchemaHash: string;\n    maker: string;\n    taker: string;\n    price: number;\n    value: number;\n    validFrom: number;\n    validUntil: number;\n    source?: string;\n    feeBps?: number;\n    feeBreakdown?: definitions[\"feeBreakdown\"];\n    expiration: number;\n    createdAt: string;\n    updatedAt: string;\n    rawData?: definitions[\"source\"];\n  };\n  Model39: definitions[\"Model38\"][];\n  getOrdersV2Response: {\n    orders?: definitions[\"Model39\"];\n  };\n  ownership: {\n    tokenCount?: string;\n    onSaleCount?: string;\n    floorAskPrice?: number;\n    topBidValue?: number;\n    totalBidValue?: number;\n  };\n  Model40: {\n    address?: string;\n    ownership?: definitions[\"ownership\"];\n  };\n  owners: definitions[\"Model40\"][];\n  getOwnersV1Response: {\n    owners?: definitions[\"owners\"];\n  };\n  Model41: {\n    id?: string;\n    name?: string;\n  };\n  Model42: {\n    contract?: string;\n    tokenId?: string;\n    name?: string;\n    image?: string;\n    collection?: definitions[\"Model41\"];\n  };\n  Model43: {\n    token?: definitions[\"Model42\"];\n    maker?: string;\n    taker?: string;\n    amount?: string;\n    txHash?: string;\n    timestamp?: number;\n    price?: number;\n  };\n  sales: definitions[\"Model43\"][];\n  getSalesV1Response: {\n    sales?: definitions[\"sales\"];\n  };\n  Model44: {\n    token?: definitions[\"Model42\"];\n    /** @enum {string} */\n    orderSide?: \"ask\" | \"bid\";\n    from?: string;\n    to?: string;\n    amount?: string;\n    txHash?: string;\n    timestamp?: number;\n    price?: number;\n  };\n  Model45: definitions[\"Model44\"][];\n  getSalesV2Response: {\n    sales?: definitions[\"Model45\"];\n  };\n  Model46: {\n    id?: string;\n    saleId?: string;\n    token?: definitions[\"Model42\"];\n    orderSource?: string;\n    orderSourceDomain?: string;\n    /** @enum {string} */\n    orderSide?: \"ask\" | \"bid\";\n    orderKind?: string;\n    from?: string;\n    to?: string;\n    amount?: string;\n    fillSource?: string;\n    txHash?: string;\n    logIndex?: number;\n    batchIndex?: number;\n    timestamp?: number;\n    price?: number;\n    currency?: string;\n    currencyPrice?: number;\n    usdPrice?: number;\n    washTradingScore?: number;\n  };\n  Model47: definitions[\"Model46\"][];\n  getSalesV3Response: {\n    sales?: definitions[\"Model47\"];\n    continuation?: string;\n  };\n  Model48: {\n    kind?: string;\n    bps?: number;\n    recipient?: string;\n  };\n  Model49: definitions[\"Model48\"][];\n  Model50: {\n    id?: string;\n    saleId?: string;\n    token?: definitions[\"Model42\"];\n    orderSource?: string;\n    /** @enum {string} */\n    orderSide?: \"ask\" | \"bid\";\n    orderKind?: string;\n    orderId?: string;\n    from?: string;\n    to?: string;\n    amount?: string;\n    fillSource?: string;\n    block?: number;\n    txHash?: string;\n    logIndex?: number;\n    batchIndex?: number;\n    timestamp?: number;\n    price?: definitions[\"price\"];\n    washTradingScore?: number;\n    royaltyFeeBps?: number;\n    marketplaceFeeBps?: number;\n    paidFullRoyalty?: boolean;\n    feeBreakdown?: definitions[\"Model49\"];\n  };\n  Model51: definitions[\"Model50\"][];\n  getSalesV4Response: {\n    sales?: definitions[\"Model51\"];\n    continuation?: string;\n  };\n  Model52: {\n    id?: string;\n    name?: string;\n    icon?: string;\n    tokenUrl?: string;\n    domain?: string;\n  };\n  sources: definitions[\"Model52\"][];\n  getSourcesV1Response: {\n    sources?: definitions[\"sources\"];\n    continuation?: string;\n  };\n  Model53: {\n    contract?: string;\n    tokenId?: string;\n    name?: string;\n    image?: string;\n  };\n  Model54: {\n    id?: string;\n    price?: number;\n    maker?: string;\n    validFrom?: number;\n    validUntil?: number;\n    token?: definitions[\"Model53\"];\n  };\n  market: {\n    floorAsk?: definitions[\"Model54\"];\n    topBid?: definitions[\"topBid\"];\n  };\n  stats: {\n    tokenCount: number;\n    onSaleCount: number;\n    sampleImages?: definitions[\"sampleImages\"];\n    market?: definitions[\"market\"];\n  };\n  getStatsV1Response: {\n    stats?: definitions[\"stats\"];\n  };\n  Model55: {\n    id?: string;\n    price?: definitions[\"price\"];\n    maker?: string;\n    validFrom?: number;\n    validUntil?: number;\n    token?: definitions[\"Model53\"];\n  };\n  Model56: {\n    id?: string;\n    price?: definitions[\"price\"];\n    maker?: string;\n    validFrom?: number;\n    validUntil?: number;\n  };\n  Model57: {\n    floorAsk?: definitions[\"Model55\"];\n    topBid?: definitions[\"Model56\"];\n  };\n  Model58: {\n    tokenCount: number;\n    onSaleCount: number;\n    flaggedTokenCount: number;\n    sampleImages?: definitions[\"sampleImages\"];\n    market?: definitions[\"Model57\"];\n  };\n  getStatsV2Response: {\n    stats?: definitions[\"Model58\"];\n  };\n  Model59: {\n    contract: string;\n    tokenId: string;\n    name?: string;\n    image?: string;\n    collection?: definitions[\"Model41\"];\n    topBidValue?: number;\n    floorAskPrice?: number;\n  };\n  tokens: definitions[\"Model59\"][];\n  getTokensV1Response: {\n    tokens?: definitions[\"tokens\"];\n  };\n  getTokensV2Response: {\n    tokens?: definitions[\"tokens\"];\n    continuation?: string;\n  };\n  Model60: {\n    id?: string;\n    name?: string;\n    image?: string;\n    slug?: string;\n  };\n  Model61: {\n    contract: string;\n    tokenId: string;\n    name?: string;\n    image?: string;\n    collection?: definitions[\"Model60\"];\n    topBidValue?: number;\n    floorAskPrice?: number;\n  };\n  Model62: definitions[\"Model61\"][];\n  getTokensV3Response: {\n    tokens?: definitions[\"Model62\"];\n    continuation?: string;\n  };\n  Model63: {\n    contract: string;\n    tokenId: string;\n    name?: string;\n    image?: string;\n    media?: string;\n    collection?: definitions[\"Model60\"];\n    source?: string;\n    sourceDomain?: string;\n    topBidValue?: number;\n    floorAskPrice?: number;\n    rarity?: number;\n    rarityRank?: number;\n    owner?: string;\n    /** @default false */\n    isFlagged?: boolean;\n    lastFlagUpdate?: string;\n  };\n  Model64: definitions[\"Model63\"][];\n  getTokensV4Response: {\n    tokens?: definitions[\"Model64\"];\n    continuation?: string;\n  };\n  Model65: {\n    key?: string;\n    kind?: string;\n    value: string;\n    tokenCount?: number;\n    onSaleCount?: number;\n    floorAskPrice?: number;\n    topBidValue?: number;\n    createdAt?: string;\n  };\n  Model66: definitions[\"Model65\"][];\n  Model67: {\n    contract: string;\n    tokenId: string;\n    name?: string;\n    description?: string;\n    image?: string;\n    media?: string;\n    kind?: string;\n    /** @default false */\n    isFlagged?: boolean;\n    lastFlagUpdate?: string;\n    lastFlagChange?: string;\n    rarity?: number;\n    rarityRank?: number;\n    collection?: definitions[\"Model60\"];\n    lastBuy?: definitions[\"lastBuy\"];\n    lastSell?: definitions[\"lastBuy\"];\n    owner?: string;\n    attributes?: definitions[\"Model66\"];\n  };\n  dynamicPricing: {\n    /** @enum {string} */\n    kind?: \"dutch\" | \"pool\";\n    data?: definitions[\"source\"];\n  };\n  Model68: {\n    id?: string;\n    price?: definitions[\"price\"];\n    maker?: string;\n    validFrom?: number;\n    validUntil?: number;\n    quantityFilled?: number;\n    quantityRemaining?: number;\n    dynamicPricing?: definitions[\"dynamicPricing\"];\n    source?: definitions[\"source\"];\n  };\n  Model69: {\n    id?: string;\n    price?: definitions[\"price\"];\n    maker?: string;\n    validFrom?: number;\n    validUntil?: number;\n    source?: definitions[\"source\"];\n    feeBreakdown?: definitions[\"feeBreakdown\"];\n  };\n  Model70: {\n    floorAsk?: definitions[\"Model68\"];\n    topBid?: definitions[\"Model69\"];\n  };\n  Model71: {\n    token?: definitions[\"Model67\"];\n    market?: definitions[\"Model70\"];\n  };\n  Model72: definitions[\"Model71\"][];\n  getTokensV5Response: {\n    tokens?: definitions[\"Model72\"];\n    continuation?: string;\n  };\n  Model73: {\n    token?: definitions[\"Model42\"];\n    from?: string;\n    to?: string;\n    amount?: string;\n    txHash?: string;\n    block?: number;\n    logIndex?: number;\n    batchIndex?: number;\n    timestamp?: number;\n    price?: number;\n  };\n  transfers: definitions[\"Model73\"][];\n  getTransfersV2Response: {\n    transfers?: definitions[\"transfers\"];\n    continuation?: string;\n  };\n  getApiKeyRateLimitsResponse: {\n    key?: string;\n    appName?: string;\n    website?: string;\n    email?: string;\n    active?: boolean;\n    tier?: number;\n    permissions?: string;\n    createdAt?: string;\n  };\n  Model74: {\n    route?: string;\n    method?: string;\n    allowedRequests?: number;\n    perSeconds?: number;\n  };\n  rateLimits: definitions[\"Model74\"][];\n  Model75: {\n    rateLimits?: definitions[\"rateLimits\"];\n  };\n  Model76: {\n    tokenId?: string;\n    tokenName?: string;\n    tokenImage?: string;\n  };\n  Model77: {\n    collectionId?: string;\n    collectionName?: string;\n    collectionImage?: string;\n  };\n  Model78: {\n    type?: string;\n    fromAddress?: string;\n    toAddress?: string;\n    price?: number;\n    amount?: number;\n    timestamp?: number;\n    createdAt?: string;\n    contract?: string;\n    token?: definitions[\"Model76\"];\n    collection?: definitions[\"Model77\"];\n    txHash?: string;\n    logIndex?: number;\n    batchIndex?: number;\n    order?: definitions[\"Model5\"];\n  };\n  Model79: definitions[\"Model78\"][];\n  getCollectionActivityV4Response: {\n    continuation?: string;\n    activities?: definitions[\"Model79\"];\n  };\n  Model80: {\n    type?: string;\n    fromAddress?: string;\n    toAddress?: string;\n    price?: number;\n    amount?: number;\n    timestamp?: number;\n    createdAt?: string;\n    contract?: string;\n    token?: definitions[\"Model76\"];\n    collection?: definitions[\"Model77\"];\n    txHash?: string;\n    logIndex?: number;\n    batchIndex?: number;\n    order?: definitions[\"Model10\"];\n  };\n  Model81: definitions[\"Model80\"][];\n  getCollectionActivityV5Response: {\n    continuation?: string;\n    activities?: definitions[\"Model81\"];\n  };\n  Model82: {\n    id?: string;\n    timestamp?: number;\n    volume?: number;\n    rank?: number;\n    floor_sell_value?: number;\n    sales_count?: number;\n  };\n  Model83: definitions[\"Model82\"][];\n  getDailyVolumesV1Response: {\n    collections?: definitions[\"Model83\"];\n  };\n  Model84: {\n    onSaleCount?: number;\n    sourceDomain?: string;\n    floorAskPrice?: number;\n  };\n  Model85: definitions[\"Model84\"][];\n  getSourcesListingsV1Response: {\n    sources?: definitions[\"Model85\"];\n  };\n  Model86: {\n    id?: string;\n    slug?: string;\n    name?: string;\n    metadata?: definitions[\"source\"];\n    sampleImages?: definitions[\"sampleImages\"];\n    tokenCount?: string;\n    onSaleCount?: string;\n    tokenSetId?: string;\n    royalties?: definitions[\"royalties\"];\n    lastBuy?: definitions[\"lastBuy\"];\n    lastSell?: definitions[\"lastBuy\"];\n    floorAsk?: definitions[\"floorAsk\"];\n    topBid?: definitions[\"topBid\"];\n    rank?: definitions[\"rank\"];\n    volume?: definitions[\"rank\"];\n  };\n  getCollectionDeprecatedV1Response: {\n    collection?: definitions[\"Model86\"];\n  };\n  Model87: {\n    id?: string;\n    status?: string;\n    contract?: string;\n    tokenId?: string;\n    maker?: string;\n    price?: definitions[\"price\"];\n    quantityRemaining?: number;\n    nonce?: string;\n    validFrom?: number;\n    validUntil?: number;\n    source?: string;\n    isDynamic?: boolean;\n  };\n  event: {\n    id?: number;\n    /** @enum {string} */\n    kind?:\n      | \"new-order\"\n      | \"expiry\"\n      | \"sale\"\n      | \"cancel\"\n      | \"balance-change\"\n      | \"approval-change\"\n      | \"bootstrap\"\n      | \"revalidation\"\n      | \"reprice\";\n    txHash?: string;\n    txTimestamp?: number;\n    createdAt?: string;\n  };\n  Model88: {\n    order?: definitions[\"Model87\"];\n    event?: definitions[\"event\"];\n  };\n  events: definitions[\"Model88\"][];\n  getAsksEventsV2Response: {\n    events?: definitions[\"events\"];\n    continuation?: string;\n  };\n  Model89: {\n    id?: string;\n    status?: string;\n    contract?: string;\n    maker?: string;\n    price?: definitions[\"price\"];\n    quantityRemaining?: number;\n    nonce?: string;\n    validFrom?: number;\n    validUntil?: number;\n    rawData?: definitions[\"source\"];\n    kind?: string;\n    source?: string;\n    isDynamic?: boolean;\n    criteria?: definitions[\"Model9\"];\n  };\n  Model90: {\n    order?: definitions[\"Model89\"];\n    event?: definitions[\"event\"];\n  };\n  Model91: definitions[\"Model90\"][];\n  getAsksEventsV3Response: {\n    events?: definitions[\"Model91\"];\n    continuation?: string;\n  };\n  bid: {\n    id?: string;\n    status?: string;\n    contract?: string;\n    tokenSetId?: string;\n    maker?: string;\n    price?: number;\n    value?: number;\n    quantityRemaining?: number;\n    nonce?: string;\n    validFrom?: number;\n    validUntil?: number;\n    source?: string;\n    criteria?: definitions[\"Model9\"];\n  };\n  Model92: {\n    bid?: definitions[\"bid\"];\n    event?: definitions[\"event\"];\n  };\n  Model93: definitions[\"Model92\"][];\n  getBidEventsV1Response: {\n    events?: definitions[\"Model93\"];\n    continuation?: string;\n  };\n  Model94: {\n    id?: string;\n    status?: string;\n    contract?: string;\n    tokenSetId?: string;\n    maker?: string;\n    price?: number;\n    value?: number;\n    quantityRemaining?: number;\n    nonce?: string;\n    validFrom?: number;\n    validUntil?: number;\n    kind?: string;\n    source?: string;\n    criteria?: definitions[\"Model9\"];\n  };\n  Model95: {\n    bid?: definitions[\"Model94\"];\n    event?: definitions[\"event\"];\n  };\n  Model96: definitions[\"Model95\"][];\n  getBidEventsV2Response: {\n    events?: definitions[\"Model96\"];\n    continuation?: string;\n  };\n  Model97: {\n    id?: string;\n    status?: string;\n    contract?: string;\n    maker?: string;\n    price?: definitions[\"price\"];\n    quantityRemaining?: number;\n    nonce?: string;\n    validFrom?: number;\n    validUntil?: number;\n    rawData?: definitions[\"source\"];\n    kind?: string;\n    source?: string;\n    criteria?: definitions[\"Model9\"];\n  };\n  Model98: {\n    bid?: definitions[\"Model97\"];\n    event?: definitions[\"event\"];\n  };\n  Model99: definitions[\"Model98\"][];\n  getBidEventsV3Response: {\n    events?: definitions[\"Model99\"];\n    continuation?: string;\n  };\n  Model100: {\n    id?: string;\n    status?: string;\n    contract?: string;\n    tokenId?: string;\n    maker?: string;\n    price?: number;\n    quantityRemaining?: number;\n    nonce?: string;\n    validFrom?: number;\n    validUntil?: number;\n    source?: string;\n  };\n  Model101: {\n    order?: definitions[\"Model100\"];\n    event?: definitions[\"event\"];\n  };\n  Model102: definitions[\"Model101\"][];\n  getOrderEventsV1Response: {\n    events?: definitions[\"Model102\"];\n    continuation?: string;\n  };\n  Model103: {\n    action: string;\n    description: string;\n    /** @enum {string} */\n    status: \"complete\" | \"incomplete\";\n    /** @enum {string} */\n    kind: \"request\" | \"signature\" | \"transaction\";\n    data?: definitions[\"source\"];\n  };\n  steps: definitions[\"Model103\"][];\n  getExecuteBidV2Response: {\n    steps?: definitions[\"steps\"];\n    query?: definitions[\"source\"];\n  };\n  Model104: {\n    action: string;\n    description: string;\n    /** @enum {string} */\n    status: \"complete\" | \"incomplete\";\n    /** @enum {string} */\n    kind: \"request\" | \"signature\" | \"transaction\" | \"confirmation\";\n    data?: definitions[\"source\"];\n  };\n  Model105: definitions[\"Model104\"][];\n  Model106: {\n    contract?: string;\n    tokenId?: string;\n    quantity?: number;\n    source?: string;\n    quote?: number;\n  };\n  path: definitions[\"Model106\"][];\n  getExecuteBuyV2Response: {\n    steps?: definitions[\"Model105\"];\n    quote?: number;\n    path?: definitions[\"path\"];\n    query?: definitions[\"source\"];\n  };\n  Model107: {\n    /** @enum {string} */\n    status: \"complete\" | \"incomplete\";\n    data?: definitions[\"source\"];\n  };\n  items: definitions[\"Model107\"][];\n  Model108: {\n    action: string;\n    description: string;\n    /** @enum {string} */\n    kind: \"transaction\";\n    items: definitions[\"items\"];\n  };\n  Model109: definitions[\"Model108\"][];\n  Model110: {\n    orderId?: string;\n    contract?: string;\n    tokenId?: string;\n    quantity?: number;\n    source?: string;\n    currency?: string;\n    quote?: number;\n    rawQuote?: string;\n  };\n  Model111: definitions[\"Model110\"][];\n  getExecuteBuyV3Response: {\n    steps?: definitions[\"Model109\"];\n    path?: definitions[\"Model111\"];\n  };\n  getExecuteCancelV1Response: {\n    steps?: definitions[\"Model105\"];\n    query?: definitions[\"source\"];\n  };\n  Model112: {\n    /** @enum {string} */\n    status: \"complete\" | \"incomplete\";\n    data?: definitions[\"source\"];\n    orderIndex?: number;\n  };\n  Model113: definitions[\"Model112\"][];\n  Model114: {\n    id: string;\n    action: string;\n    description: string;\n    /** @enum {string} */\n    kind: \"transaction\";\n    items: definitions[\"Model113\"];\n  };\n  Model115: definitions[\"Model114\"][];\n  getExecuteCancelV2Response: {\n    steps?: definitions[\"Model115\"];\n  };\n  Model116: {\n    user?: string;\n    rank: number;\n    tokenCount: string;\n    liquidity: number;\n    maxTopBuyValue: number;\n    wethBalance: number;\n  };\n  liquidity: definitions[\"Model116\"][];\n  getUsersLiquidityV1Response: {\n    liquidity?: definitions[\"liquidity\"];\n  };\n  Model117: {\n    kind?: string;\n    recipient?: string;\n    bps?: string;\n  };\n  Model118: definitions[\"Model117\"][];\n  Model119: {\n    id: string;\n    kind: string;\n    /** @enum {string} */\n    side: \"buy\" | \"sell\";\n    tokenSetId: string;\n    tokenSetSchemaHash: string;\n    contract?: string;\n    maker: string;\n    taker: string;\n    price: number;\n    value: number;\n    validFrom: number;\n    validUntil: number;\n    source?: string;\n    feeBps?: number;\n    feeBreakdown?: definitions[\"Model118\"];\n    status?: string;\n    expiration: number;\n    createdAt: string;\n    updatedAt: string;\n    metadata?: definitions[\"source\"];\n    rawData?: definitions[\"source\"];\n  };\n  Model120: definitions[\"Model119\"][];\n  getOrdersAllV1Response: {\n    orders?: definitions[\"Model120\"];\n    continuation?: string;\n  };\n  Model121: {\n    id: string;\n    kind: string;\n    /** @enum {string} */\n    side: \"buy\" | \"sell\";\n    tokenSetId: string;\n    tokenSetSchemaHash: string;\n    contract?: string;\n    maker: string;\n    taker: string;\n    price?: definitions[\"price\"];\n    validFrom: number;\n    validUntil: number;\n    source?: string;\n    feeBps?: number;\n    feeBreakdown?: definitions[\"Model118\"];\n    status?: string;\n    expiration: number;\n    createdAt: string;\n    updatedAt: string;\n    metadata?: definitions[\"source\"];\n    rawData?: definitions[\"source\"];\n  };\n  Model122: definitions[\"Model121\"][];\n  getOrdersAllV2Response: {\n    orders?: definitions[\"Model122\"];\n    continuation?: string;\n  };\n  Model123: {\n    collectionName?: string;\n    tokenName?: string;\n    image?: string;\n  };\n  Model124: {\n    /** @enum {string} */\n    kind?: \"token\";\n    data?: definitions[\"Model123\"];\n  };\n  Model125: {\n    kind?: string;\n    recipient?: string;\n    bps?: number;\n  };\n  Model126: definitions[\"Model125\"][];\n  Model127: {\n    id: string;\n    kind: string;\n    /** @enum {string} */\n    side: \"buy\" | \"sell\";\n    tokenSetId: string;\n    tokenSetSchemaHash: string;\n    contract?: string;\n    maker: string;\n    taker: string;\n    price: number;\n    value: number;\n    validFrom: number;\n    validUntil: number;\n    metadata?: definitions[\"Model124\"];\n    status?: string;\n    source?: definitions[\"source\"];\n    feeBps?: number;\n    feeBreakdown?: definitions[\"Model126\"];\n    expiration: number;\n    createdAt: string;\n    updatedAt: string;\n    rawData?: definitions[\"source\"];\n  };\n  Model128: definitions[\"Model127\"][];\n  getOrdersAsksV1Response: {\n    orders?: definitions[\"Model128\"];\n    continuation?: string;\n  };\n  Model129: {\n    id: string;\n    kind: string;\n    /** @enum {string} */\n    side: \"buy\" | \"sell\";\n    tokenSetId: string;\n    tokenSetSchemaHash: string;\n    contract?: string;\n    maker: string;\n    taker: string;\n    price?: definitions[\"price\"];\n    validFrom: number;\n    validUntil: number;\n    quantityFilled?: number;\n    quantityRemaining?: number;\n    metadata?: definitions[\"Model124\"];\n    status?: string;\n    source?: definitions[\"source\"];\n    feeBps?: number;\n    feeBreakdown?: definitions[\"Model126\"];\n    expiration: number;\n    isZoo?: boolean;\n    isDynamic?: boolean;\n    createdAt: string;\n    updatedAt: string;\n    rawData?: definitions[\"source\"];\n  };\n  Model130: definitions[\"Model129\"][];\n  getOrdersAsksV3Response: {\n    orders?: definitions[\"Model130\"];\n    continuation?: string;\n  };\n  Model131: {\n    id: string;\n    kind: string;\n    /** @enum {string} */\n    side: \"buy\" | \"sell\";\n    tokenSetId: string;\n    tokenSetSchemaHash: string;\n    contract?: string;\n    maker: string;\n    taker: string;\n    price?: definitions[\"price\"];\n    validFrom: number;\n    validUntil: number;\n    quantityFilled?: number;\n    quantityRemaining?: number;\n    criteria?: definitions[\"Model9\"];\n    status?: string;\n    source?: definitions[\"source\"];\n    feeBps?: number;\n    feeBreakdown?: definitions[\"Model126\"];\n    expiration: number;\n    isZoo?: boolean;\n    isDynamic?: boolean;\n    createdAt: string;\n    updatedAt: string;\n    rawData?: definitions[\"source\"];\n  };\n  Model132: definitions[\"Model131\"][];\n  getOrdersAsksV4Response: {\n    orders?: definitions[\"Model132\"];\n    continuation?: string;\n  };\n  Model133: {\n    id: string;\n    kind: string;\n    /** @enum {string} */\n    side: \"buy\" | \"sell\";\n    status?: string;\n    tokenSetId: string;\n    tokenSetSchemaHash: string;\n    contract?: string;\n    maker: string;\n    taker: string;\n    price: number;\n    value: number;\n    validFrom: number;\n    validUntil: number;\n    metadata?: definitions[\"Model124\"];\n    source?: definitions[\"source\"];\n    feeBps?: number;\n    feeBreakdown?: definitions[\"Model126\"];\n    expiration: number;\n    createdAt: string;\n    updatedAt: string;\n    rawData?: definitions[\"source\"];\n  };\n  Model134: definitions[\"Model133\"][];\n  getOrdersBidsV1Response: {\n    orders?: definitions[\"Model134\"];\n    continuation?: string;\n  };\n  Model135: {\n    id: string;\n    kind: string;\n    /** @enum {string} */\n    side: \"buy\" | \"sell\";\n    status?: string;\n    tokenSetId: string;\n    tokenSetSchemaHash: string;\n    contract?: string;\n    maker: string;\n    taker: string;\n    price?: definitions[\"price\"];\n    validFrom: number;\n    validUntil: number;\n    quantityFilled?: number;\n    quantityRemaining?: number;\n    metadata?: definitions[\"Model124\"];\n    source?: definitions[\"source\"];\n    feeBps?: number;\n    feeBreakdown?: definitions[\"Model126\"];\n    expiration: number;\n    isZoo?: boolean;\n    createdAt: string;\n    updatedAt: string;\n    rawData?: definitions[\"source\"];\n  };\n  Model136: definitions[\"Model135\"][];\n  getOrdersBidsV3Response: {\n    orders?: definitions[\"Model136\"];\n    continuation?: string;\n  };\n  Model137: {\n    id: string;\n    kind: string;\n    /** @enum {string} */\n    side: \"buy\" | \"sell\";\n    status?: string;\n    tokenSetId: string;\n    tokenSetSchemaHash: string;\n    contract?: string;\n    maker: string;\n    taker: string;\n    price?: definitions[\"price\"];\n    validFrom: number;\n    validUntil: number;\n    quantityFilled?: number;\n    quantityRemaining?: number;\n    metadata?: definitions[\"Model4\"];\n    source?: definitions[\"source\"];\n    feeBps?: number;\n    feeBreakdown?: definitions[\"Model126\"];\n    expiration: number;\n    isZoo?: boolean;\n    createdAt: string;\n    updatedAt: string;\n    rawData?: definitions[\"source\"];\n  };\n  Model138: definitions[\"Model137\"][];\n  getOrdersBidsV4Response: {\n    orders?: definitions[\"Model138\"];\n    continuation?: string;\n  };\n  Model139: {\n    id: string;\n    kind: string;\n    /** @enum {string} */\n    side: \"buy\" | \"sell\";\n    status?: string;\n    tokenSetId: string;\n    tokenSetSchemaHash: string;\n    contract?: string;\n    maker: string;\n    taker: string;\n    price?: definitions[\"price\"];\n    validFrom: number;\n    validUntil: number;\n    quantityFilled?: number;\n    quantityRemaining?: number;\n    criteria?: definitions[\"Model9\"];\n    source?: definitions[\"source\"];\n    feeBps?: number;\n    feeBreakdown?: definitions[\"Model126\"];\n    expiration: number;\n    isZoo?: boolean;\n    createdAt: string;\n    updatedAt: string;\n    rawData?: definitions[\"source\"];\n  };\n  Model140: definitions[\"Model139\"][];\n  getOrdersBidsV5Response: {\n    orders?: definitions[\"Model140\"];\n    continuation?: string;\n  };\n  Model141: {\n    address?: string;\n    count?: number;\n    owners?: definitions[\"sampleImages\"];\n  };\n  Model142: definitions[\"Model141\"][];\n  getCommonCollectionsOwnersV1Response: {\n    collections?: definitions[\"Model142\"];\n  };\n  Model143: {\n    address?: string;\n    count?: number;\n    collections?: definitions[\"sampleImages\"];\n  };\n  Model144: definitions[\"Model143\"][];\n  getCrossCollectionsOwnersV1Response: {\n    owners?: definitions[\"Model144\"];\n  };\n  Model145: {\n    contract?: string;\n    tokenId?: string;\n  };\n  Model146: {\n    id?: string;\n    saleId?: string;\n    token?: definitions[\"Model145\"];\n    orderSource?: string;\n    orderSourceDomain?: string;\n    /** @enum {string} */\n    orderSide?: \"ask\" | \"bid\";\n    orderKind?: string;\n    from?: string;\n    to?: string;\n    amount?: string;\n    fillSource?: string;\n    txHash?: string;\n    logIndex?: number;\n    batchIndex?: number;\n    timestamp?: number;\n    price?: number;\n  };\n  Model147: definitions[\"Model146\"][];\n  getSalesBulkV1Response: {\n    sales?: definitions[\"Model147\"];\n    continuation?: string;\n  };\n  Model148: {\n    collectionId?: string;\n    contract?: string;\n    image?: string;\n    name?: string;\n    allTimeVolume?: number;\n    floorAskPrice?: number;\n    openseaVerificationStatus?: string;\n  };\n  Model149: definitions[\"Model148\"][];\n  getSearchCollectionsV1Response: {\n    collections?: definitions[\"Model149\"];\n  };\n  Model150: {\n    contract?: string;\n    tokenId?: string;\n    image?: string;\n    orderId?: string;\n    maker?: string;\n    validFrom?: number;\n    validUntil?: number;\n    price?: number;\n    source?: string;\n  };\n  Model151: definitions[\"Model150\"][];\n  getTokensBootstrapV1Response: {\n    tokens?: definitions[\"Model151\"];\n    continuation?: string;\n  };\n  Model152: {\n    key?: string;\n    value: string;\n  };\n  Model153: definitions[\"Model152\"][];\n  Model154: {\n    contract: string;\n    tokenId: string;\n    name?: string;\n    description?: string;\n    image?: string;\n    kind?: string;\n    collection?: definitions[\"Model41\"];\n    lastBuy?: definitions[\"lastBuy\"];\n    lastSell?: definitions[\"lastBuy\"];\n    owner?: string;\n    attributes?: definitions[\"Model153\"];\n  };\n  Model155: {\n    id?: string;\n    price?: number;\n    maker?: string;\n    validFrom?: number;\n    validUntil?: number;\n    source?: definitions[\"source\"];\n  };\n  Model156: {\n    floorAsk?: definitions[\"Model155\"];\n    topBid?: definitions[\"topBid\"];\n  };\n  Model157: {\n    token?: definitions[\"Model154\"];\n    market?: definitions[\"Model156\"];\n  };\n  Model158: definitions[\"Model157\"][];\n  getTokensDetailsV2Response: {\n    tokens?: definitions[\"Model158\"];\n    continuation?: string;\n  };\n  Model159: {\n    contract: string;\n    tokenId: string;\n    name?: string;\n    description?: string;\n    image?: string;\n    kind?: string;\n    collection?: definitions[\"Model60\"];\n    lastBuy?: definitions[\"lastBuy\"];\n    lastSell?: definitions[\"lastBuy\"];\n    owner?: string;\n    attributes?: definitions[\"Model153\"];\n  };\n  Model160: {\n    token?: definitions[\"Model159\"];\n    market?: definitions[\"Model156\"];\n  };\n  Model161: definitions[\"Model160\"][];\n  getTokensDetailsV3Response: {\n    tokens?: definitions[\"Model161\"];\n    continuation?: string;\n  };\n  Model162: {\n    key?: string;\n    value: string;\n    tokenCount?: number;\n    onSaleCount?: number;\n    floorAskPrice?: number;\n    topBidValue?: number;\n  };\n  Model163: definitions[\"Model162\"][];\n  Model164: {\n    contract: string;\n    tokenId: string;\n    name?: string;\n    description?: string;\n    image?: string;\n    media?: string;\n    kind?: string;\n    /** @default false */\n    isFlagged?: boolean;\n    lastFlagUpdate?: string;\n    collection?: definitions[\"Model60\"];\n    lastBuy?: definitions[\"lastBuy\"];\n    lastSell?: definitions[\"lastBuy\"];\n    owner?: string;\n    attributes?: definitions[\"Model163\"];\n  };\n  Model165: {\n    token?: definitions[\"Model164\"];\n    market?: definitions[\"Model156\"];\n  };\n  Model166: definitions[\"Model165\"][];\n  getTokensDetailsV4Response: {\n    tokens?: definitions[\"Model166\"];\n    continuation?: string;\n  };\n  getTokensFloorV1Response: {\n    tokens?: {\n      string?: number;\n    };\n  };\n  Model167: string[];\n  getTokensIdsV1Response: {\n    tokens?: definitions[\"Model167\"];\n    continuation?: string;\n  };\n  Model168: {\n    id?: string;\n    token?: definitions[\"Model145\"];\n    from?: string;\n    to?: string;\n    amount?: string;\n    block?: number;\n    txHash?: string;\n    logIndex?: number;\n    batchIndex?: number;\n    timestamp?: number;\n  };\n  Model169: definitions[\"Model168\"][];\n  getTransfersBulkV1Response: {\n    transfers?: definitions[\"Model169\"];\n    continuation?: string;\n  };\n  Model170: {\n    type?: string;\n    fromAddress?: string;\n    toAddress?: string;\n    price?: number;\n    amount?: number;\n    timestamp?: number;\n    token?: definitions[\"Model76\"];\n    collection?: definitions[\"Model77\"];\n    txHash?: string;\n    logIndex?: number;\n    batchIndex?: number;\n    source?: definitions[\"source\"];\n  };\n  Model171: definitions[\"Model170\"][];\n  getUserActivityV2Response: {\n    continuation?: number;\n    activities?: definitions[\"Model171\"];\n  };\n  Model172: {\n    type?: string;\n    fromAddress?: string;\n    toAddress?: string;\n    price?: number;\n    amount?: number;\n    timestamp?: number;\n    token?: definitions[\"Model76\"];\n    collection?: definitions[\"Model77\"];\n    txHash?: string;\n    logIndex?: number;\n    batchIndex?: number;\n    source?: definitions[\"source\"];\n    createdAt?: string;\n  };\n  Model173: definitions[\"Model172\"][];\n  getUserActivityV3Response: {\n    continuation?: string;\n    activities?: definitions[\"Model173\"];\n  };\n  Model174: {\n    type?: string;\n    fromAddress?: string;\n    toAddress?: string;\n    price?: number;\n    amount?: number;\n    timestamp?: number;\n    contract?: string;\n    token?: definitions[\"Model76\"];\n    collection?: definitions[\"Model77\"];\n    txHash?: string;\n    logIndex?: number;\n    batchIndex?: number;\n    order?: definitions[\"Model5\"];\n    createdAt?: string;\n  };\n  Model175: definitions[\"Model174\"][];\n  getUserActivityV4Response: {\n    continuation?: string;\n    activities?: definitions[\"Model175\"];\n  };\n  Model176: {\n    tokenId?: string;\n    tokenName?: string;\n    tokenImage?: string;\n    lastBuy?: definitions[\"lastBuy\"];\n    lastSell?: definitions[\"lastBuy\"];\n    tokenRarityScore?: number;\n    tokenRarityRank?: number;\n    tokenMedia?: string;\n  };\n  Model177: {\n    type?: string;\n    fromAddress?: string;\n    toAddress?: string;\n    price?: number;\n    amount?: number;\n    timestamp?: number;\n    contract?: string;\n    token?: definitions[\"Model176\"];\n    collection?: definitions[\"Model77\"];\n    txHash?: string;\n    logIndex?: number;\n    batchIndex?: number;\n    order?: definitions[\"Model10\"];\n    createdAt?: string;\n  };\n  Model178: definitions[\"Model177\"][];\n  getUserActivityV5Response: {\n    continuation?: string;\n    activities?: definitions[\"Model178\"];\n  };\n  Model179: {\n    value: number;\n    timestamp: number;\n  };\n  lastBuys: definitions[\"Model179\"][];\n  floorAskPrices: number[];\n  Model180: {\n    key: string;\n    value: string;\n    tokenCount: number;\n    sampleImages?: definitions[\"sampleImages\"];\n    lastBuys?: definitions[\"lastBuys\"];\n    lastSells?: definitions[\"lastBuys\"];\n    floorAskPrices?: definitions[\"floorAskPrices\"];\n    topBid?: definitions[\"topBid\"];\n  };\n  Model181: definitions[\"Model180\"][];\n  getCollectionAttributesV1Response: {\n    attributes?: definitions[\"Model181\"];\n  };\n  Model182: {\n    type?: string;\n    fromAddress?: string;\n    toAddress?: string;\n    price?: number;\n    amount?: number;\n    timestamp?: number;\n    createdAt?: string;\n    token?: definitions[\"Model76\"];\n    collection?: definitions[\"Model77\"];\n    txHash?: string;\n    logIndex?: number;\n    batchIndex?: number;\n    source?: definitions[\"source\"];\n  };\n  Model183: definitions[\"Model182\"][];\n  getCollectionActivityV2Response: {\n    continuation?: string;\n    activities?: definitions[\"Model183\"];\n  };\n  Model184: {\n    type?: string;\n    fromAddress?: string;\n    toAddress?: string;\n    price?: number;\n    amount?: number;\n    timestamp?: number;\n    createdAt?: string;\n    contract?: string;\n    token?: definitions[\"Model76\"];\n    collection?: definitions[\"Model77\"];\n    txHash?: string;\n    logIndex?: number;\n    batchIndex?: number;\n    order?: definitions[\"order\"];\n  };\n  Model185: definitions[\"Model184\"][];\n  getCollectionActivityV3Response: {\n    continuation?: string;\n    activities?: definitions[\"Model185\"];\n  };\n  Model186: {\n    value?: number;\n    quantity?: number;\n  };\n  topBids: definitions[\"Model186\"][];\n  getCollectionTopBidsV1Response: {\n    topBids?: definitions[\"topBids\"];\n  };\n  Model187: {\n    tokenCount?: number;\n    ownerCount?: number;\n  };\n  ownersDistribution: definitions[\"Model187\"][];\n  getCollectionOwnersDistributionV1Response: {\n    ownersDistribution?: definitions[\"ownersDistribution\"];\n  };\n  Model188: {\n    id?: string;\n  };\n  Model189: {\n    orderId?: string;\n    contract?: string;\n    tokenId?: string;\n    maker?: string;\n    price?: number;\n    validUntil?: number;\n    source?: string;\n  };\n  Model190: {\n    id?: number;\n    /** @enum {string} */\n    kind?:\n      | \"new-order\"\n      | \"expiry\"\n      | \"sale\"\n      | \"cancel\"\n      | \"balance-change\"\n      | \"approval-change\"\n      | \"bootstrap\"\n      | \"revalidation\"\n      | \"reprice\";\n    previousPrice?: number;\n    txHash?: string;\n    txTimestamp?: number;\n    createdAt?: string;\n  };\n  Model191: {\n    collection?: definitions[\"Model188\"];\n    floorAsk?: definitions[\"Model189\"];\n    event?: definitions[\"Model190\"];\n  };\n  Model192: definitions[\"Model191\"][];\n  getCollectionsFloorAskV1Response: {\n    events?: definitions[\"Model192\"];\n    continuation?: string;\n  };\n  Model193: {\n    orderId?: string;\n    contract?: string;\n    tokenSetId?: string;\n    maker?: string;\n    price?: number;\n    validUntil?: number;\n    source?: string;\n  };\n  Model194: {\n    collection?: definitions[\"Model188\"];\n    topBid?: definitions[\"Model193\"];\n    event?: definitions[\"Model190\"];\n  };\n  Model195: definitions[\"Model194\"][];\n  getCollectionsTopbidV1Response: {\n    events?: definitions[\"Model195\"];\n    continuation?: string;\n  };\n  Model196: {\n    orderId?: string;\n    contract?: string;\n    tokenSetId?: string;\n    maker?: string;\n    price?: definitions[\"price\"];\n    validUntil?: number;\n    source?: string;\n  };\n  Model197: {\n    collection?: definitions[\"Model188\"];\n    topBid?: definitions[\"Model196\"];\n    event?: definitions[\"Model190\"];\n  };\n  Model198: definitions[\"Model197\"][];\n  getCollectionsTopbidV2Response: {\n    events?: definitions[\"Model198\"];\n    continuation?: string;\n  };\n  Model199: {\n    orderId?: string;\n    maker?: string;\n    nonce?: string;\n    price?: number;\n    validFrom?: number;\n    validUntil?: number;\n    source?: string;\n  };\n  Model200: {\n    token?: definitions[\"Model145\"];\n    floorAsk?: definitions[\"Model199\"];\n    event?: definitions[\"Model190\"];\n  };\n  Model201: definitions[\"Model200\"][];\n  getTokensFloorAskV2Response: {\n    events?: definitions[\"Model201\"];\n    continuation?: string;\n  };\n  Model202: {\n    orderId?: string;\n    maker?: string;\n    nonce?: string;\n    price?: definitions[\"price\"];\n    validFrom?: number;\n    validUntil?: number;\n    source?: string;\n    isDynamic?: boolean;\n  };\n  Model203: {\n    token?: definitions[\"Model145\"];\n    floorAsk?: definitions[\"Model202\"];\n    event?: definitions[\"Model190\"];\n  };\n  Model204: definitions[\"Model203\"][];\n  getTokensFloorAskV3Response: {\n    events?: definitions[\"Model204\"];\n    continuation?: string;\n  };\n  message: {\n    id: string;\n    payload: string;\n    timestamp: number;\n    signature: string;\n  };\n  getCollectionFloorAskOracleV4Response: {\n    price: number;\n    message?: definitions[\"message\"];\n    data?: string;\n  };\n  getCollectionTopBidOracleV1Response: {\n    price: number;\n    message?: definitions[\"message\"];\n  };\n  Model205: {\n    token: string;\n    isFlagged: boolean;\n    lastTransferTime: number;\n    message?: definitions[\"message\"];\n  };\n  messages: definitions[\"Model205\"][];\n  getTokenStatusOracleV1Response: {\n    messages?: definitions[\"messages\"];\n  };\n  Model206: {\n    tokenId: string;\n    lastFlagChange?: string;\n    /** @default false */\n    isFlagged?: boolean;\n    contract: string;\n  };\n  Model207: definitions[\"Model206\"][];\n  getFlaggedTokensV1Response: {\n    tokens?: definitions[\"Model207\"];\n    continuation?: string;\n  };\n  getTransactionSyncedV1Response: {\n    synced: boolean;\n  };\n  Model208: {\n    id?: string;\n    name?: string;\n    imageUrl?: string;\n    floorAskPrice?: number;\n  };\n  Model209: {\n    id?: string;\n    price?: definitions[\"price\"];\n  };\n  Model210: {\n    contract?: string;\n    tokenId?: string;\n    kind?: string;\n    name?: string;\n    image?: string;\n    lastBuy?: definitions[\"lastBuy\"];\n    lastSell?: definitions[\"lastBuy\"];\n    rarityScore?: number;\n    rarityRank?: number;\n    media?: string;\n    collection?: definitions[\"Model208\"];\n    topBid?: definitions[\"Model209\"];\n  };\n  Model211: {\n    id?: string;\n    price?: definitions[\"price\"];\n    maker?: string;\n    validFrom?: number;\n    validUntil?: number;\n    source?: definitions[\"source\"];\n  };\n  Model212: {\n    tokenCount?: string;\n    onSaleCount?: string;\n    floorAsk?: definitions[\"Model211\"];\n    acquiredAt?: string;\n  };\n  Model213: {\n    token?: definitions[\"Model210\"];\n    ownership?: definitions[\"Model212\"];\n  };\n  Model214: definitions[\"Model213\"][];\n  getUserTokensV6Response: {\n    tokens?: definitions[\"Model214\"];\n    continuation?: string;\n  };\n  Model215: {\n    contract?: string;\n    tokenId?: string;\n    name?: string;\n    image?: string;\n    collection?: definitions[\"Model208\"];\n    topBid?: definitions[\"Model209\"];\n  };\n  Model216: {\n    tokenCount?: string;\n    onSaleCount?: string;\n    floorAskPrice?: definitions[\"price\"];\n    acquiredAt?: string;\n  };\n  Model217: {\n    token?: definitions[\"Model215\"];\n    ownership?: definitions[\"Model216\"];\n  };\n  Model218: definitions[\"Model217\"][];\n  getUserTokensV4Response: {\n    tokens?: definitions[\"Model218\"];\n  };\n  Model219: {\n    contract?: string;\n    tokenId?: string;\n    name?: string;\n    image?: string;\n    collection?: definitions[\"Model208\"];\n  };\n  Model220: {\n    tokenCount?: string;\n    onSaleCount?: string;\n    floorAskPrice?: number;\n    acquiredAt?: string;\n  };\n  Model221: {\n    token?: definitions[\"Model219\"];\n    ownership?: definitions[\"Model220\"];\n  };\n  Model222: definitions[\"Model221\"][];\n  getUserTokensV2Response: {\n    tokens?: definitions[\"Model222\"];\n  };\n  set: {\n    id?: string;\n    metadata?: definitions[\"Model124\"];\n    sampleImages?: definitions[\"sampleImages\"];\n    image?: string;\n    floorAskPrice?: number;\n    topBidValue?: number;\n  };\n  primaryOrder: {\n    id?: string;\n    value?: number;\n    expiration?: number;\n  };\n  Model223: {\n    set?: definitions[\"set\"];\n    primaryOrder?: definitions[\"primaryOrder\"];\n    totalValid?: number;\n  };\n  positions: definitions[\"Model223\"][];\n  getUserPositionsV1Response: {\n    positions?: definitions[\"positions\"];\n  };\n  metadata: {\n    imageUrl?: string;\n    discordUrl?: string;\n    description?: string;\n    externalUrl?: string;\n    bannerImageUrl?: string;\n    twitterUsername?: string;\n  };\n  Model224: {\n    id?: string;\n    name?: string;\n    metadata?: definitions[\"metadata\"];\n    floorAskPrice?: number;\n    topBidValue?: number;\n  };\n  Model225: {\n    tokenCount?: string;\n    onSaleCount?: string;\n    liquidCount?: string;\n  };\n  Model226: {\n    collection?: definitions[\"Model224\"];\n    ownership?: definitions[\"Model225\"];\n  };\n  Model227: definitions[\"Model226\"][];\n  getUserCollectionsV1Response: {\n    collections?: definitions[\"Model227\"];\n  };\n  Model228: {\n    type?: string;\n    fromAddress?: string;\n    toAddress?: string;\n    price?: number;\n    amount?: number;\n    timestamp?: number;\n    token?: definitions[\"Model76\"];\n    collection?: definitions[\"Model77\"];\n    txHash?: string;\n    logIndex?: number;\n    batchIndex?: number;\n  };\n  Model229: definitions[\"Model228\"][];\n  getUserActivityV1Response: {\n    continuation?: number;\n    activities?: definitions[\"Model229\"];\n  };\n  Model230: {\n    id?: string;\n    slug?: string;\n    name?: string;\n    image?: string;\n    banner?: string;\n    discordUrl?: string;\n    externalUrl?: string;\n    twitterUsername?: string;\n    description?: string;\n    sampleImages?: definitions[\"sampleImages\"];\n    tokenCount?: string;\n    tokenSetId?: string;\n    primaryContract?: string;\n    floorAskPrice?: number;\n    topBidValue?: number;\n    topBidMaker?: string;\n    topBidSourceDomain?: string;\n    rank?: definitions[\"rank\"];\n    volume?: definitions[\"rank\"];\n    volumeChange?: definitions[\"volumeChange\"];\n    floorSale?: definitions[\"volumeChange\"];\n  };\n  Model231: {\n    collection?: definitions[\"Model230\"];\n    ownership?: definitions[\"Model225\"];\n  };\n  Model232: definitions[\"Model231\"][];\n  getUserCollectionsV2Response: {\n    collections?: definitions[\"Model232\"];\n  };\n  Model233: {\n    id?: string;\n    value?: number;\n    schema?: definitions[\"source\"];\n  };\n  Model234: {\n    contract?: string;\n    tokenId?: string;\n    name?: string;\n    image?: string;\n    collection?: definitions[\"Model41\"];\n    topBid?: definitions[\"Model233\"];\n  };\n  Model235: {\n    tokenCount?: string;\n    onSaleCount?: string;\n    floorSellValue?: number;\n    acquiredAt?: number;\n  };\n  Model236: {\n    token?: definitions[\"Model234\"];\n    ownership?: definitions[\"Model235\"];\n  };\n  Model237: definitions[\"Model236\"][];\n  getUserTokensV1Response: {\n    tokens?: definitions[\"Model237\"];\n  };\n  Model238: {\n    id?: string;\n    value?: number;\n  };\n  Model239: {\n    contract?: string;\n    tokenId?: string;\n    name?: string;\n    image?: string;\n    collection?: definitions[\"Model208\"];\n    topBid?: definitions[\"Model238\"];\n  };\n  Model240: {\n    token?: definitions[\"Model239\"];\n    ownership?: definitions[\"Model220\"];\n  };\n  Model241: definitions[\"Model240\"][];\n  getUserTokensV3Response: {\n    tokens?: definitions[\"Model241\"];\n  };\n  Model242: {\n    token?: definitions[\"Model215\"];\n    ownership?: definitions[\"Model212\"];\n  };\n  Model243: definitions[\"Model242\"][];\n  getUserTokensV5Response: {\n    tokens?: definitions[\"Model243\"];\n  };\n  Model244: {\n    tokenId: string;\n    value: number;\n    timestamp: number;\n  };\n  Model245: definitions[\"Model244\"][];\n  Model246: {\n    key: string;\n    value: string;\n    tokenCount: number;\n    onSaleCount: number;\n    sampleImages?: definitions[\"sampleImages\"];\n    floorAskPrices?: definitions[\"floorAskPrices\"];\n    lastBuys?: definitions[\"Model245\"];\n    lastSells?: definitions[\"Model245\"];\n    topBid?: definitions[\"topBid\"];\n  };\n  Model247: definitions[\"Model246\"][];\n  getAttributesExploreV4Response: {\n    attributes?: definitions[\"Model247\"];\n    continuation?: string;\n  };\n  Model248: {\n    key: string;\n    value: string;\n    tokenCount: number;\n    onSaleCount: number;\n    sampleImages?: definitions[\"sampleImages\"];\n    floorAskPrices?: definitions[\"floorAskPrices\"];\n    lastSells?: definitions[\"Model245\"];\n    topBid?: definitions[\"topBid\"];\n  };\n  Model249: definitions[\"Model248\"][];\n  getAttributesExploreV2Response: {\n    attributes?: definitions[\"Model249\"];\n  };\n  Model250: {\n    value: string;\n    count?: number;\n    floorAskPrice?: number;\n  };\n  Model251: definitions[\"Model250\"][];\n  Model252: {\n    key: string;\n    attributeCount?: number;\n    /** @enum {string} */\n    kind: \"string\" | \"number\" | \"date\" | \"range\";\n    minRange?: number;\n    maxRange?: number;\n    values?: definitions[\"Model251\"];\n  };\n  Model253: definitions[\"Model252\"][];\n  getAttributesAllV2Response: {\n    attributes?: definitions[\"Model253\"];\n  };\n  Model254: {\n    value: string;\n    count?: number;\n    tokens?: definitions[\"sampleImages\"];\n  };\n  Model255: definitions[\"Model254\"][];\n  Model256: {\n    key: string;\n    /** @enum {string} */\n    kind: \"string\" | \"number\" | \"date\" | \"range\";\n    values?: definitions[\"Model255\"];\n  };\n  Model257: definitions[\"Model256\"][];\n  getAttributesStaticV1Response: {\n    attributes?: definitions[\"Model257\"];\n  };\n  getAttributesExploreV3Response: {\n    attributes?: definitions[\"Model247\"];\n  };\n  Model258: {\n    contract?: string;\n    tokenId?: string;\n    name?: string;\n    image?: string;\n    floorAskPrice?: number;\n    lastSalePrice?: number;\n    collection?: definitions[\"Model208\"];\n  };\n  Model259: {\n    id?: string;\n    price?: number;\n    value?: number;\n    maker?: string;\n    createdAt?: string;\n    validFrom?: number;\n    validUntil?: number;\n    floorDifferencePercentage?: number;\n    source?: definitions[\"source\"];\n    feeBreakdown?: definitions[\"Model126\"];\n    criteria?: definitions[\"Model9\"];\n    token?: definitions[\"Model258\"];\n  };\n  Model260: definitions[\"Model259\"][];\n  getUserTopBidsV2Response: {\n    totalTokensWithBids?: number;\n    topBids?: definitions[\"Model260\"];\n    continuation?: string;\n  };\n  Model261: {\n    id?: string;\n    price?: number;\n    value?: number;\n    maker?: string;\n    createdAt?: string;\n    validFrom?: number;\n    validUntil?: number;\n    floorDifferencePercentage?: number;\n    source?: definitions[\"source\"];\n    feeBreakdown?: definitions[\"Model126\"];\n    context?: definitions[\"Model124\"];\n    token?: definitions[\"Model258\"];\n  };\n  Model262: definitions[\"Model261\"][];\n  getUserTopBidsV1Response: {\n    totalTokensWithBids?: number;\n    topBids?: definitions[\"Model262\"];\n    continuation?: string;\n  };\n  Model263: {\n    id?: string;\n    price?: definitions[\"price\"];\n    maker?: string;\n    createdAt?: string;\n    validFrom?: number;\n    validUntil?: number;\n    floorDifferencePercentage?: number;\n    source?: definitions[\"source\"];\n    feeBreakdown?: definitions[\"Model126\"];\n    criteria?: definitions[\"Model9\"];\n    token?: definitions[\"Model258\"];\n  };\n  Model264: definitions[\"Model263\"][];\n  getUserTopBidsV3Response: {\n    totalTokensWithBids?: number;\n    totalAmount?: number;\n    topBids?: definitions[\"Model264\"];\n    continuation?: string;\n  };\n  Model265: {\n    community: string;\n  };\n  putSetCollectionCommunityV1Response: {\n    message?: string;\n  };\n  getNewApiKeyResponse: {\n    key: string;\n  };\n  Model266: {\n    /** @description The collection for which to calculate the rarity, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n    collection: string;\n  };\n  Model267: {\n    /** @description The route for which the rule is created */\n    route: string;\n    points: number;\n    duration: number;\n    /** @enum {number} */\n    tier?: 0 | 1 | 2 | 3 | 4;\n    /** @default */\n    apiKey?: string;\n    /**\n     * @default\n     * @enum {string}\n     */\n    method?: \"get\" | \"post\" | \"delete\" | \"put\";\n  };\n  Model268: {\n    /** @description The rule ID to delete */\n    ruleId: number;\n  };\n  Model269: {\n    fromBlock: number;\n    toBlock: number;\n  };\n  contracts: string[];\n  Model270: {\n    /** @enum {string} */\n    kind: \"tokens-floor-sell\" | \"tokens-top-buy\";\n    contracts?: definitions[\"contracts\"];\n  };\n  Model271: {\n    /** @enum {string} */\n    by: \"id\" | \"maker\" | \"token\" | \"contract\";\n    id: string;\n    token: string;\n    maker: string;\n    contract: string;\n  };\n  Model272: {\n    /** @enum {string} */\n    kind: \"tokens-floor-sell\" | \"tokens-top-buy\";\n    token: string;\n  };\n  Model273: {\n    address: string;\n  };\n  Model274: {\n    token: string;\n  };\n  Model275: {\n    /** @description Refresh the given collection. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n    collection: string;\n    /**\n     * @description If true, will only refresh the collection cache.\n     * @default false\n     */\n    cacheOnly?: boolean;\n  };\n  Model276: {\n    /** @description Refresh tokens for the given collection. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n    collection: string;\n    /** @default false */\n    backfill?: boolean;\n  };\n  Model277: {\n    /** @enum {string} */\n    method?: \"opensea\" | \"simplehash\" | \"centerdev\" | \"soundxyz\";\n    /** @description Refresh the given token. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123` */\n    token: string;\n  };\n  Model278: {\n    collection?: string;\n    token?: string;\n  };\n  Model279: {\n    /** @description The source domain to sync. Example: `zoolabs.io` */\n    source?: string;\n  };\n  Model280: {\n    id: string;\n    /** @enum {string} */\n    status: \"active\" | \"inactive\";\n  };\n  Model281: {\n    address: string;\n    domain: string;\n  };\n  Model282: {\n    /** @description Update community for a particular collection, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n    collection: string;\n    community: string;\n    /** @default false */\n    doRetries?: boolean;\n  };\n  Model283: {\n    fromBlock: number;\n    toBlock: number;\n  };\n  Model284: {\n    /**\n     * @description If no days are passed, will automatically resync from beginning of time.\n     * @default 0\n     */\n    days?: number;\n  };\n  Model285: {\n    /** @enum {string} */\n    method?: \"events\";\n    events?: definitions[\"sampleImages\"];\n  };\n  Model286: {\n    syncDetails?: definitions[\"Model285\"];\n    fromBlock: number;\n    toBlock: number;\n    blocksPerBatch?: number;\n    /** @default false */\n    skipNonFillWrites?: boolean;\n    /** @default true */\n    backfill?: boolean;\n  };\n  Model287: {\n    /** @description The api key to update */\n    apiKey?: string;\n    /** @enum {number} */\n    tier?: 0 | 1 | 2 | 3 | 4;\n    active?: boolean;\n  };\n  Model288: {\n    /** @description The rule ID to update */\n    ruleId: number;\n    /** @enum {number} */\n    tier?: 0 | 1 | 2 | 3 | 4;\n    points?: number;\n    duration?: number;\n    apiKey?: string;\n    /** @enum {string} */\n    method?: \"get\" | \"post\" | \"delete\" | \"put\";\n  };\n  Model289: {\n    /** @description The source domain to sync. Example: `zoolabs.io` */\n    source?: string;\n    icon?: string;\n    title?: string;\n    optimized?: boolean;\n  };\n  Model290: string[];\n  Model291: {\n    collections: definitions[\"Model290\"];\n  };\n  postCreateCollectionsSetV1Response: {\n    collectionsSetId?: string;\n  };\n  Model292: string[];\n  Model293: {\n    contracts: definitions[\"Model292\"];\n  };\n  postCreateContractsSetV1Response: {\n    contractsSetId?: string;\n  };\n  Model294: {\n    /** @enum {string} */\n    kind:\n      | \"opensea\"\n      | \"looks-rare\"\n      | \"zeroex-v4\"\n      | \"seaport\"\n      | \"seaport-partial\"\n      | \"x2y2\";\n    data: definitions[\"source\"];\n  };\n  attribute: {\n    collection: string;\n    key: string;\n    value: string;\n  };\n  Model295: {\n    order?: definitions[\"Model294\"];\n    /**\n     * @default reservoir\n     * @enum {string}\n     */\n    orderbook?: \"reservoir\" | \"opensea\" | \"looks-rare\";\n    orderbookApiKey?: string;\n    /** @description The name of the source */\n    source?: string;\n    attribute?: definitions[\"attribute\"];\n    collection?: string;\n    tokenSetId?: string;\n    isNonFlagged?: boolean;\n  };\n  Model296: {\n    /** @enum {string} */\n    kind:\n      | \"opensea\"\n      | \"looks-rare\"\n      | \"zeroex-v4\"\n      | \"seaport\"\n      | \"seaport-forward\"\n      | \"x2y2\"\n      | \"universe\"\n      | \"forward\"\n      | \"infinity\"\n      | \"flow\";\n    data: definitions[\"source\"];\n  };\n  Model297: {\n    order?: definitions[\"Model296\"];\n    /**\n     * @default reservoir\n     * @enum {string}\n     */\n    orderbook?:\n      | \"reservoir\"\n      | \"opensea\"\n      | \"looks-rare\"\n      | \"x2y2\"\n      | \"universe\"\n      | \"infinity\"\n      | \"flow\";\n    /** @description Optional API key for the target orderbook */\n    orderbookApiKey?: string;\n    /** @description The source domain */\n    source?: string;\n    attribute?: definitions[\"attribute\"];\n    collection?: string;\n    tokenSetId?: string;\n    isNonFlagged?: boolean;\n  };\n  Model298: {\n    /** @enum {string} */\n    kind:\n      | \"opensea\"\n      | \"looks-rare\"\n      | \"zeroex-v4\"\n      | \"seaport\"\n      | \"seaport-v1.2\"\n      | \"x2y2\"\n      | \"universe\"\n      | \"forward\"\n      | \"infinity\"\n      | \"flow\";\n    data: definitions[\"source\"];\n  };\n  Model299: {\n    orderIndex: number;\n    merkleProof: definitions[\"sampleImages\"];\n  };\n  bulkData: {\n    /** @enum {string} */\n    kind?: \"seaport-v1.2\";\n    data?: definitions[\"Model299\"];\n  };\n  Model300: {\n    order?: definitions[\"Model298\"];\n    /**\n     * @default reservoir\n     * @enum {string}\n     */\n    orderbook?:\n      | \"reservoir\"\n      | \"opensea\"\n      | \"looks-rare\"\n      | \"x2y2\"\n      | \"universe\"\n      | \"infinity\"\n      | \"flow\";\n    /** @description Optional API key for the target orderbook */\n    orderbookApiKey?: string;\n    attribute?: definitions[\"attribute\"];\n    collection?: string;\n    tokenSetId?: string;\n    isNonFlagged?: boolean;\n    bulkData?: definitions[\"bulkData\"];\n  };\n  Model301: definitions[\"Model300\"][];\n  Model302: {\n    items?: definitions[\"Model301\"];\n    /** @description The source domain */\n    source?: string;\n  };\n  Model303: {\n    /** @enum {string} */\n    kind:\n      | \"looks-rare\"\n      | \"zeroex-v4\"\n      | \"x2y2\"\n      | \"seaport\"\n      | \"element\"\n      | \"blur\"\n      | \"rarible\"\n      | \"manifold\"\n      | \"infinity\";\n    data: definitions[\"source\"];\n  };\n  Model304: definitions[\"Model303\"][];\n  Model305: {\n    orders?: definitions[\"Model304\"];\n  };\n  protocol_data: {\n    parameters?: string;\n    signature?: string;\n  };\n  Model306: {\n    protocol_data?: definitions[\"protocol_data\"];\n  };\n  seaport_offers: definitions[\"Model306\"][];\n  Model307: {\n    seaport_offers?: definitions[\"seaport_offers\"];\n  };\n  tokenIds: string[];\n  Model308: {\n    /** @description Contract address. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n    contract: string;\n    tokenIds: definitions[\"tokenIds\"];\n  };\n  Model309: string[];\n  Model310: {\n    tokens: definitions[\"Model309\"];\n  };\n  Model311: {\n    /** @description Refresh the given collection. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n    collection: string;\n    /**\n     * @description If true, will force a refresh regardless of cool down. Requires an authorized api key to be passed.\n     * @default false\n     */\n    overrideCoolDown?: boolean;\n    /**\n     * @description If true, will only refresh the collection metadata.\n     * @default false\n     */\n    metadataOnly?: boolean;\n  };\n  /** @description List of fees (formatted as `feeRecipient:feeBps`) to be bundled within the order. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00:100` */\n  fees: string[];\n  Model312: {\n    /** @description Bid on a particular token. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123` */\n    token?: string;\n    /** @description Bid on a particular token set. */\n    tokenSetId?: string;\n    /** @description Bid on a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n    collection?: string;\n    /** @description Bid on a particular attribute key. Example: `Composition` */\n    attributeKey?: string;\n    /** @description Bid on a particular attribute value. Example: `Teddy (#33)` */\n    attributeValue?: string;\n    /** @description Quantity of tokens user is buying. Only compatible with ERC1155 tokens. Example: `5` */\n    quantity?: number;\n    /** @description Amount bidder is willing to offer in wei. Example: `1000000000000000000` */\n    weiPrice: string;\n    /**\n     * @description Exchange protocol used to create order. Example: `seaport`\n     * @default seaport\n     * @enum {string}\n     */\n    orderKind?:\n      | \"zeroex-v4\"\n      | \"seaport\"\n      | \"looks-rare\"\n      | \"x2y2\"\n      | \"universe\"\n      | \"forward\"\n      | \"infinity\"\n      | \"flow\";\n    /**\n     * @description Orderbook where order is placed. Example: `Zoo`\n     * @default reservoir\n     * @enum {string}\n     */\n    orderbook?:\n      | \"reservoir\"\n      | \"opensea\"\n      | \"looks-rare\"\n      | \"x2y2\"\n      | \"universe\"\n      | \"infinity\"\n      | \"flow\";\n    /** @description Optional API key for the target orderbook */\n    orderbookApiKey?: string;\n    /**\n     * @description If true, royalties will be automatically included.\n     * @default true\n     */\n    automatedRoyalties?: boolean;\n    fees?: definitions[\"fees\"];\n    /**\n     * @description If true flagged tokens will be excluded\n     * @default false\n     */\n    excludeFlaggedTokens?: boolean;\n    /** @description Unix timestamp (seconds) indicating when listing will be listed. Example: `1656080318` */\n    listingTime?: string;\n    /** @description Unix timestamp (seconds) indicating when listing will expire. Example: `1656080318` */\n    expirationTime?: string;\n    /** @description Optional. Random string to make the order unique */\n    salt?: string;\n    /** @description Optional. Set a custom nonce */\n    nonce?: string;\n    /** @default 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2 */\n    currency?: string;\n  };\n  params: definitions[\"Model312\"][];\n  Model313: {\n    /** @description Address of wallet making the order. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00` */\n    maker: string;\n    /** @description Domain of your app that is creating the order, e.g. `myapp.xyz`. This is used for filtering, and to attribute the \"order source\" of sales in on-chain analytics, to help your app get discovered. Lean more <a href='https://docs.reservoir.tools/docs/calldata-attribution'>here</a> */\n    source?: string;\n    params?: definitions[\"params\"];\n  };\n  Model314: {\n    id: string;\n    /** @enum {string} */\n    kind: \"request\" | \"signature\" | \"transaction\";\n    action: string;\n    description: string;\n    items: definitions[\"Model113\"];\n  };\n  Model315: definitions[\"Model314\"][];\n  getExecuteBidV4Response: {\n    steps?: definitions[\"Model315\"];\n    query?: definitions[\"source\"];\n  };\n  Model316: {\n    /** @description Bid on a particular token. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123` */\n    token?: string;\n    /** @description Bid on a particular token set. */\n    tokenSetId?: string;\n    /** @description Bid on a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n    collection?: string;\n    /** @description Bid on a particular attribute key. Example: `Composition` */\n    attributeKey?: string;\n    /** @description Bid on a particular attribute value. Example: `Teddy (#33)` */\n    attributeValue?: string;\n    /** @description Quantity of tokens user is buying. Only compatible with ERC1155 tokens. Example: `5` */\n    quantity?: number;\n    /** @description Amount bidder is willing to offer in wei. Example: `1000000000000000000` */\n    weiPrice: string;\n    /**\n     * @description Exchange protocol used to create order. Example: `seaport`\n     * @default seaport-v1.2\n     * @enum {string}\n     */\n    orderKind?:\n      | \"zeroex-v4\"\n      | \"seaport\"\n      | \"seaport-v1.2\"\n      | \"looks-rare\"\n      | \"x2y2\"\n      | \"universe\"\n      | \"infinity\"\n      | \"flow\";\n    /**\n     * @description Orderbook where order is placed. Example: `Zoo`\n     * @default reservoir\n     * @enum {string}\n     */\n    orderbook?:\n      | \"reservoir\"\n      | \"opensea\"\n      | \"looks-rare\"\n      | \"x2y2\"\n      | \"universe\"\n      | \"infinity\"\n      | \"flow\";\n    /** @description Optional API key for the target orderbook */\n    orderbookApiKey?: string;\n    /**\n     * @description If true, royalties will be automatically included.\n     * @default true\n     */\n    automatedRoyalties?: boolean;\n    fees?: definitions[\"fees\"];\n    /**\n     * @description If true flagged tokens will be excluded\n     * @default false\n     */\n    excludeFlaggedTokens?: boolean;\n    /** @description Unix timestamp (seconds) indicating when listing will be listed. Example: `1656080318` */\n    listingTime?: string;\n    /** @description Unix timestamp (seconds) indicating when listing will expire. Example: `1656080318` */\n    expirationTime?: string;\n    /** @description Optional. Random string to make the order unique */\n    salt?: string;\n    /** @description Optional. Set a custom nonce */\n    nonce?: string;\n    /** @default 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2 */\n    currency?: string;\n  };\n  Model317: definitions[\"Model316\"][];\n  Model318: {\n    /** @description Address of wallet making the order. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00` */\n    maker: string;\n    /** @description Domain of your app that is creating the order, e.g. `myapp.xyz`. This is used for filtering, and to attribute the \"order source\" of sales in on-chain analytics, to help your app get discovered. Lean more <a href='https://docs.reservoir.tools/docs/calldata-attribution'>here</a> */\n    source?: string;\n    params?: definitions[\"Model317\"];\n  };\n  Model319: {\n    /** @enum {string} */\n    status: \"complete\" | \"incomplete\";\n    data?: definitions[\"source\"];\n    orderIndexes?: definitions[\"floorAskPrices\"];\n  };\n  Model320: definitions[\"Model319\"][];\n  Model321: {\n    id: string;\n    /** @enum {string} */\n    kind: \"request\" | \"signature\" | \"transaction\";\n    action: string;\n    description: string;\n    items: definitions[\"Model320\"];\n  };\n  Model322: definitions[\"Model321\"][];\n  Model323: {\n    message?: string;\n    orderIndex?: number;\n  };\n  errors: definitions[\"Model323\"][];\n  getExecuteBidV5Response: {\n    steps?: definitions[\"Model322\"];\n    errors?: definitions[\"errors\"];\n  };\n  orderIds: string[];\n  Model324: {\n    /** @enum {string} */\n    kind:\n      | \"opensea\"\n      | \"looks-rare\"\n      | \"zeroex-v4\"\n      | \"seaport\"\n      | \"x2y2\"\n      | \"universe\";\n    data: definitions[\"source\"];\n  };\n  rawOrders: definitions[\"Model324\"][];\n  /** @description Array of tokens user is buying. Example: `tokens[0]: 0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:704 tokens[1]: 0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:979` */\n  Model325: string[];\n  /** @description List of fees (formatted as `feeRecipient:feeBps`) to be taken when filling. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00:100` */\n  feesOnTop: string[];\n  Model326: {\n    orderIds?: definitions[\"orderIds\"];\n    rawOrders?: definitions[\"rawOrders\"];\n    tokens?: definitions[\"Model325\"];\n    /** @description Quantity of tokens user is buying. Only compatible when buying a single ERC1155 token. Example: `5` */\n    quantity?: number;\n    /** @description Address of wallet filling the order. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00` */\n    taker: string;\n    /** @description Address of wallet relaying the filling transaction */\n    relayer?: string;\n    /**\n     * @description If true, only the path will be returned.\n     * @default false\n     */\n    onlyPath?: boolean;\n    /** @description If true, all fills will be executed through the router. */\n    forceRouter?: boolean;\n    /** @default 0x0000000000000000000000000000000000000000 */\n    currency?: string;\n    /**\n     * @description If there are multiple listings with equal best price, prefer this source over others.\n     * NOTE: if you want to fill a listing that is not the best priced, you need to pass a specific order ID.\n     */\n    preferredOrderSource?: string;\n    /** @description Domain of your app that is filling the order, e.g. `myapp.xyz`. This is used to attribute the \"fill source\" of sales in on-chain analytics, to help your app get discovered. Learn more <a href='https://docs.reservoir.tools/docs/calldata-attribution'>here</a> */\n    source?: string;\n    feesOnTop?: definitions[\"feesOnTop\"];\n    /**\n     * @description If true, partial orders will be accepted.\n     * @default false\n     */\n    partial?: boolean;\n    /**\n     * @description If true, then skip any errors in processing.\n     * @default false\n     */\n    skipErrors?: boolean;\n    /** @description Optional. Set custom gas price. */\n    maxFeePerGas?: string;\n    /** @description Optional. Set custom gas price. */\n    maxPriorityFeePerGas?: string;\n    /**\n     * @description If true, balance check will be skipped.\n     * @default false\n     */\n    skipBalanceCheck?: boolean;\n  };\n  /** @description List of fees (formatted as `feeRecipient:feeAmount`) to be taken when filling. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00:1000000000000000` */\n  Model327: string[];\n  Model328: {\n    orderIds?: definitions[\"orderIds\"];\n    rawOrders?: definitions[\"rawOrders\"];\n    tokens?: definitions[\"Model325\"];\n    /** @description Quantity of tokens user is buying. Only compatible when buying a single ERC1155 token. Example: `5` */\n    quantity?: number;\n    /** @description Address of wallet filling the order. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00` */\n    taker: string;\n    /** @description Address of wallet relaying the filling transaction */\n    relayer?: string;\n    /**\n     * @description If true, only the path will be returned.\n     * @default false\n     */\n    onlyPath?: boolean;\n    /** @description If true, all fills will be executed through the router. */\n    forceRouter?: boolean;\n    /** @default 0x0000000000000000000000000000000000000000 */\n    currency?: string;\n    /** @default true */\n    normalizeRoyalties?: boolean;\n    /**\n     * @description If there are multiple listings with equal best price, prefer this source over others.\n     * NOTE: if you want to fill a listing that is not the best priced, you need to pass a specific order ID.\n     */\n    preferredOrderSource?: string;\n    /** @description Filling source used for attribution. Example: `zoolabs.io` */\n    source?: string;\n    feesOnTop?: definitions[\"Model327\"];\n    /**\n     * @description If true, any off-chain or on-chain errors will be skipped.\n     * @default false\n     */\n    partial?: boolean;\n    /** @description Optional. Set custom gas price. */\n    maxFeePerGas?: string;\n    /** @description Optional. Set custom gas price. */\n    maxPriorityFeePerGas?: string;\n    /**\n     * @description If true, balance check will be skipped.\n     * @default false\n     */\n    skipBalanceCheck?: boolean;\n    /** @description Override the X2Y2 API key used for filling. */\n    x2y2ApiKey?: string;\n  };\n  Model329: {\n    /** @enum {string} */\n    kind:\n      | \"opensea\"\n      | \"looks-rare\"\n      | \"zeroex-v4\"\n      | \"seaport\"\n      | \"x2y2\"\n      | \"universe\"\n      | \"rarible\"\n      | \"infinity\"\n      | \"sudoswap\"\n      | \"flow\"\n      | \"nftx\";\n    data: definitions[\"source\"];\n  };\n  Model330: definitions[\"Model329\"][];\n  /**\n   * @description List of fees (formatted as `feeRecipient:feeAmount`) to be taken when filling.\n   * Unless overridden via the `currency` param, the currency used for any fees on top matches the buy-in currency detected by the backend.\n   * Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00:1000000000000000`\n   */\n  Model331: string[];\n  Model332: {\n    orderIds?: definitions[\"orderIds\"];\n    rawOrders?: definitions[\"Model330\"];\n    tokens?: definitions[\"Model325\"];\n    /** @description Quantity of tokens user is buying. Only compatible when buying a single ERC1155 token. Example: `5` */\n    quantity?: number;\n    /** @description Address of wallet filling the order. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00` */\n    taker: string;\n    /** @description Address of wallet relaying the filling transaction */\n    relayer?: string;\n    /**\n     * @description If true, only the path will be returned.\n     * @default false\n     */\n    onlyPath?: boolean;\n    /** @description If true, all fills will be executed through the router. */\n    forceRouter?: boolean;\n    /**\n     * @description Currency to buy all listings in.\n     * @enum {string}\n     */\n    currency?: \"0x0000000000000000000000000000000000000000\";\n    /** @default false */\n    normalizeRoyalties?: boolean;\n    /**\n     * @description If there are multiple listings with equal best price, prefer this source over others.\n     * NOTE: if you want to fill a listing that is not the best priced, you need to pass a specific order ID.\n     */\n    preferredOrderSource?: string;\n    /** @description Filling source used for attribution. Example: `zoolabs.io` */\n    source?: string;\n    feesOnTop?: definitions[\"Model331\"];\n    /**\n     * @description If true, any off-chain or on-chain errors will be skipped.\n     * @default false\n     */\n    partial?: boolean;\n    /** @description Optional. Set custom gas price. */\n    maxFeePerGas?: string;\n    /** @description Optional. Set custom gas price. */\n    maxPriorityFeePerGas?: string;\n    /**\n     * @description If true, balance check will be skipped.\n     * @default false\n     */\n    skipBalanceCheck?: boolean;\n    /**\n     * @description If true, do not filter out inactive orders (only relevant for order id filtering).\n     * @default false\n     */\n    allowInactiveOrderIds?: boolean;\n    /** @description Override the X2Y2 API key used for filling. */\n    x2y2ApiKey?: string;\n  };\n  Model333: {\n    id: string;\n    action: string;\n    description: string;\n    /** @enum {string} */\n    kind: \"transaction\";\n    items: definitions[\"items\"];\n  };\n  Model334: definitions[\"Model333\"][];\n  getExecuteBuyV6Response: {\n    steps?: definitions[\"Model334\"];\n    path?: definitions[\"Model111\"];\n  };\n  /** @description Optional raw order to fill. */\n  rawOrder: {\n    /** @enum {string} */\n    kind:\n      | \"opensea\"\n      | \"looks-rare\"\n      | \"zeroex-v4\"\n      | \"seaport\"\n      | \"x2y2\"\n      | \"universe\"\n      | \"rarible\"\n      | \"infinity\"\n      | \"sudoswap\"\n      | \"flow\"\n      | \"nftx\";\n    data: definitions[\"source\"];\n  };\n  Model335: {\n    /** @description Token to buy. */\n    token: string;\n    /**\n     * @description Quantity of tokens to buy.\n     * @default 1\n     */\n    quantity?: number;\n    /** @description Optional order id to fill. */\n    orderId?: string;\n    rawOrder?: definitions[\"rawOrder\"];\n    /**\n     * @description If there are multiple listings with equal best price, prefer this source over others.\n     * NOTE: if you want to fill a listing that is not the best priced, you need to pass a specific order id.\n     */\n    preferredOrderSource?: string;\n  };\n  /** @description List of items to buy. */\n  Model336: definitions[\"Model335\"][];\n  Model337: {\n    items: definitions[\"Model336\"];\n    /** @description Address of wallet filling. */\n    taker: string;\n    /** @description Address of wallet relaying the fill transaction. */\n    relayer?: string;\n    /**\n     * @description If true, only the path will be returned.\n     * @default false\n     */\n    onlyPath?: boolean;\n    /** @description If true, all fills will be executed through the router. */\n    forceRouter?: boolean;\n    /**\n     * @description Currency to be used for purchases.\n     * @enum {string}\n     */\n    currency?: \"0x0000000000000000000000000000000000000000\";\n    /**\n     * @description Charge any missing royalties.\n     * @default false\n     */\n    normalizeRoyalties?: boolean;\n    /**\n     * @description If true, inactive orders will not be skipped over (only relevant when filling via a specific order id).\n     * @default false\n     */\n    allowInactiveOrderIds?: boolean;\n    /** @description Filling source used for attribution. Example: `zoolabs.io` */\n    source?: string;\n    feesOnTop?: definitions[\"Model331\"];\n    /**\n     * @description If true, any off-chain or on-chain errors will be skipped.\n     * @default false\n     */\n    partial?: boolean;\n    /**\n     * @description If true, balance check will be skipped.\n     * @default false\n     */\n    skipBalanceCheck?: boolean;\n    /** @description Optional custom gas settings. */\n    maxFeePerGas?: string;\n    /** @description Optional custom gas settings. */\n    maxPriorityFeePerGas?: string;\n    /** @description Optional X2Y2 API key used for filling. */\n    x2y2ApiKey?: string;\n  };\n  Model338: {\n    id: string;\n    action: string;\n    description: string;\n    /** @enum {string} */\n    kind: \"signature\" | \"transaction\";\n    items: definitions[\"items\"];\n  };\n  Model339: definitions[\"Model338\"][];\n  getExecuteBuyV7Response: {\n    steps?: definitions[\"Model339\"];\n    path?: definitions[\"Model111\"];\n  };\n  Model340: {\n    /** @description Filter to a particular token. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123` */\n    token: string;\n    /** @description Quanity of tokens user is listing. Only compatible with ERC1155 tokens. Example: `5` */\n    quantity?: number;\n    /** @description Amount seller is willing to sell for in wei. Example: `1000000000000000000` */\n    weiPrice: string;\n    /**\n     * @description Exchange protocol used to create order. Example: `seaport`\n     * @default seaport\n     * @enum {string}\n     */\n    orderKind?: \"looks-rare\" | \"zeroex-v4\" | \"seaport\" | \"x2y2\";\n    /**\n     * @description Orderbook where order is placed. Example: `Zoo`\n     * @default reservoir\n     * @enum {string}\n     */\n    orderbook?: \"opensea\" | \"looks-rare\" | \"reservoir\" | \"x2y2\";\n    /**\n     * @description If true, royalties will be automatically included.\n     * @default true\n     */\n    automatedRoyalties?: boolean;\n    fee?: string;\n    feeRecipient?: string;\n    /** @description Unix timestamp (seconds) indicating when listing will be listed. Example: `1656080318` */\n    listingTime?: string;\n    /** @description Unix timestamp (seconds) indicating when listing will expire. Example: `1656080318` */\n    expirationTime?: string;\n    /** @description Optional. Random string to make the order unique */\n    salt?: string;\n    /** @description Optional. Set a custom nonce */\n    nonce?: string;\n    /** @default 0x0000000000000000000000000000000000000000 */\n    currency?: string;\n  };\n  Model341: definitions[\"Model340\"][];\n  Model342: {\n    /** @description Address of wallet making the order. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00` */\n    maker: string;\n    /** @description Domain of the platform that created the order. Example: `chimpers.xyz` */\n    source?: string;\n    params?: definitions[\"Model341\"];\n  };\n  Model343: {\n    /** @enum {string} */\n    kind: \"request\" | \"signature\" | \"transaction\";\n    action: string;\n    description: string;\n    items: definitions[\"Model113\"];\n  };\n  Model344: definitions[\"Model343\"][];\n  getExecuteListV3Response: {\n    steps?: definitions[\"Model344\"];\n  };\n  Model345: {\n    /** @description Filter to a particular token. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123` */\n    token: string;\n    /** @description Quantity of tokens user is listing. Only compatible with ERC1155 tokens. Example: `5` */\n    quantity?: number;\n    /** @description Amount seller is willing to sell for in wei. Example: `1000000000000000000` */\n    weiPrice: string;\n    /**\n     * @description Exchange protocol used to create order. Example: `seaport`\n     * @default seaport\n     * @enum {string}\n     */\n    orderKind?:\n      | \"looks-rare\"\n      | \"zeroex-v4\"\n      | \"seaport\"\n      | \"seaport-forward\"\n      | \"x2y2\"\n      | \"universe\"\n      | \"infinity\"\n      | \"flow\";\n    /**\n     * @description Orderbook where order is placed. Example: `Zoo`\n     * @default reservoir\n     * @enum {string}\n     */\n    orderbook?:\n      | \"opensea\"\n      | \"looks-rare\"\n      | \"reservoir\"\n      | \"x2y2\"\n      | \"universe\"\n      | \"infinity\"\n      | \"flow\";\n    /** @description Optional API key for the target orderbook */\n    orderbookApiKey?: string;\n    /**\n     * @description If true, royalties will be automatically included.\n     * @default true\n     */\n    automatedRoyalties?: boolean;\n    fees?: definitions[\"fees\"];\n    /** @description Unix timestamp (seconds) indicating when listing will be listed. Example: `1656080318` */\n    listingTime?: string;\n    /** @description Unix timestamp (seconds) indicating when listing will expire. Example: `1656080318` */\n    expirationTime?: string;\n    /** @description Optional. Random string to make the order unique */\n    salt?: string;\n    /** @description Optional. Set a custom nonce */\n    nonce?: string;\n    /** @default 0x0000000000000000000000000000000000000000 */\n    currency?: string;\n  };\n  Model346: definitions[\"Model345\"][];\n  Model347: {\n    /** @description Address of wallet making the order. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00` */\n    maker: string;\n    /** @description Domain of your app that is creating the order, e.g. `myapp.xyz`. This is used for filtering, and to attribute the \"order source\" of sales in on-chain analytics, to help your app get discovered. Lean more <a href='https://docs.reservoir.tools/docs/calldata-attribution'>here</a> */\n    source?: string;\n    params?: definitions[\"Model346\"];\n  };\n  getExecuteListV4Response: {\n    steps?: definitions[\"Model315\"];\n  };\n  Model348: {\n    /** @description Filter to a particular token. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123` */\n    token: string;\n    /** @description Quantity of tokens user is listing. Only compatible with ERC1155 tokens. Example: `5` */\n    quantity?: number;\n    /** @description Amount seller is willing to sell for in wei. Example: `1000000000000000000` */\n    weiPrice: string;\n    /**\n     * @description Exchange protocol used to create order. Example: `seaport-v1.2`\n     * @default seaport-v1.2\n     * @enum {string}\n     */\n    orderKind?:\n      | \"looks-rare\"\n      | \"zeroex-v4\"\n      | \"seaport\"\n      | \"seaport-v1.2\"\n      | \"x2y2\"\n      | \"universe\"\n      | \"infinity\"\n      | \"flow\";\n    /**\n     * @description Orderbook where order is placed. Example: `Zoo`\n     * @default reservoir\n     * @enum {string}\n     */\n    orderbook?:\n      | \"opensea\"\n      | \"looks-rare\"\n      | \"reservoir\"\n      | \"x2y2\"\n      | \"universe\"\n      | \"infinity\"\n      | \"flow\";\n    /** @description Optional API key for the target orderbook */\n    orderbookApiKey?: string;\n    /**\n     * @description If true, royalties will be automatically included.\n     * @default true\n     */\n    automatedRoyalties?: boolean;\n    fees?: definitions[\"fees\"];\n    /** @description Unix timestamp (seconds) indicating when listing will be listed. Example: `1656080318` */\n    listingTime?: string;\n    /** @description Unix timestamp (seconds) indicating when listing will expire. Example: `1656080318` */\n    expirationTime?: string;\n    /** @description Optional. Random string to make the order unique */\n    salt?: string;\n    /** @description Optional. Set a custom nonce */\n    nonce?: string;\n    /** @default 0x0000000000000000000000000000000000000000 */\n    currency?: string;\n  };\n  Model349: definitions[\"Model348\"][];\n  Model350: {\n    /** @description Address of wallet making the order. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00` */\n    maker: string;\n    /** @description Domain of your app that is creating the order, e.g. `myapp.xyz`. This is used for filtering, and to attribute the \"order source\" of sales in on-chain analytics, to help your app get discovered. Lean more <a href='https://docs.reservoir.tools/docs/calldata-attribution'>here</a> */\n    source?: string;\n    params?: definitions[\"Model349\"];\n  };\n  Model351: {\n    /**\n     * @description Type of permit\n     * @enum {string}\n     */\n    kind: \"nft-permit\" | \"ft-permit\";\n    /** @description Id of the permit */\n    id: string;\n  };\n  Model352: {\n    orderId?: string;\n    /** @description Filter to a particular token. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123` */\n    token: string;\n    /** @description Address of wallet filling the order. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00` */\n    taker: string;\n    /** @description Quantity of tokens user is selling. Only compatible when selling a single ERC1155 token. Example: `5` */\n    quantity?: number;\n    /** @description Domain of your app that is filling the order, e.g. `myapp.xyz`. This is used to attribute the \"fill source\" of sales in on-chain analytics, to help your app get discovered. Learn more <a href='https://docs.reservoir.tools/docs/calldata-attribution'>here</a> */\n    source?: string;\n    /**\n     * @description If true, only the path will be returned.\n     * @default false\n     */\n    onlyPath?: boolean;\n    /** @description Optional. Set custom gas price. */\n    maxFeePerGas?: string;\n    /** @description Optional. Set custom gas price. */\n    maxPriorityFeePerGas?: string;\n  };\n  Model353: {\n    orderId?: string;\n    /** @description Filter to a particular token. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123` */\n    token: string;\n    /** @description Address of wallet filling the order. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00` */\n    taker: string;\n    /** @description Quantity of tokens user is selling. Only compatible when selling a single ERC1155 token. Example: `5` */\n    quantity?: number;\n    /** @description Filling source used for attribution. Example: `zoolabs.io` */\n    source?: string;\n    /**\n     * @description If true, only the path will be returned.\n     * @default false\n     */\n    onlyPath?: boolean;\n    /** @default false */\n    normalizeRoyalties?: boolean;\n    /** @description Optional. Set custom gas price. */\n    maxFeePerGas?: string;\n    /** @description Optional. Set custom gas price. */\n    maxPriorityFeePerGas?: string;\n    /** @description Override the X2Y2 API key used for filling. */\n    x2y2ApiKey?: string;\n  };\n  Model354: {\n    /** @enum {string} */\n    kind:\n      | \"opensea\"\n      | \"looks-rare\"\n      | \"zeroex-v4\"\n      | \"seaport\"\n      | \"seaport-partial\"\n      | \"x2y2\"\n      | \"universe\"\n      | \"infinity\"\n      | \"flow\";\n    data: definitions[\"source\"];\n  };\n  /**\n   * @description List of fees (formatted as `feeRecipient:feeAmount`) to be taken when filling.\n   * The currency used for any fees on top matches the accepted bid's currency.\n   * Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00:1000000000000000`\n   */\n  Model355: string[];\n  Model356: {\n    orderId?: string;\n    rawOrder?: definitions[\"Model354\"];\n    /** @description Filter to a particular token. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123` */\n    token: string;\n    /** @description Address of wallet filling the order. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00` */\n    taker: string;\n    /** @description Quantity of tokens user is selling. Only compatible when selling a single ERC1155 token. Example: `5` */\n    quantity?: number;\n    /** @description Filling source used for attribution. Example: `zoolabs.io` */\n    source?: string;\n    feesOnTop?: definitions[\"Model355\"];\n    /**\n     * @description If true, only the path will be returned.\n     * @default false\n     */\n    onlyPath?: boolean;\n    /** @default false */\n    normalizeRoyalties?: boolean;\n    /**\n     * @description If true, do not filter out inactive orders (only relevant for order id filtering).\n     * @default false\n     */\n    allowInactiveOrderIds?: boolean;\n    /** @description Optional. Set custom gas price. */\n    maxFeePerGas?: string;\n    /** @description Optional. Set custom gas price. */\n    maxPriorityFeePerGas?: string;\n    /** @description Override the X2Y2 API key used for filling. */\n    x2y2ApiKey?: string;\n  };\n  /** @description Optional raw order to sell into. */\n  Model357: {\n    /** @enum {string} */\n    kind:\n      | \"opensea\"\n      | \"looks-rare\"\n      | \"zeroex-v4\"\n      | \"seaport\"\n      | \"x2y2\"\n      | \"universe\"\n      | \"rarible\"\n      | \"infinity\"\n      | \"sudoswap\"\n      | \"nftx\";\n    data: definitions[\"source\"];\n  };\n  Model358: {\n    /** @description Token to sell. */\n    token: string;\n    /**\n     * @description Quantity of tokens to sell.\n     * @default 1\n     */\n    quantity?: number;\n    /** @description Optional order id to sell into. */\n    orderId?: string;\n    rawOrder?: definitions[\"Model357\"];\n  };\n  /** @description List of items to sell. */\n  Model359: definitions[\"Model358\"][];\n  Model360: {\n    items: definitions[\"Model359\"];\n    /** @description Address of wallet filling. */\n    taker: string;\n    /** @description Filling source used for attribution. */\n    source?: string;\n    /**\n     * @description If true, only the filling path will be returned.\n     * @default false\n     */\n    onlyPath?: boolean;\n    /**\n     * @description Charge any missing royalties.\n     * @default false\n     */\n    normalizeRoyalties?: boolean;\n    /**\n     * @description If true, inactive orders will not be skipped over (only relevant when filling via a specific order id).\n     * @default false\n     */\n    allowInactiveOrderIds?: boolean;\n    /**\n     * @description If true, any off-chain or on-chain errors will be skipped.\n     * @default false\n     */\n    partial?: boolean;\n    /** @description Optional custom gas settings. */\n    maxFeePerGas?: string;\n    /** @description Optional custom gas settings. */\n    maxPriorityFeePerGas?: string;\n    /** @description Optional X2Y2 API key used for filling. */\n    x2y2ApiKey?: string;\n  };\n  Model361: {\n    /** @description The token to update the flag status for. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123` */\n    token: string;\n    /**\n     * @description 0 - Token is not flagged, 1 - Token is flagged\n     * @enum {number}\n     */\n    flag: 0 | 1;\n  };\n  Model362: {\n    /** @description Refresh the given token. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123` */\n    token: string;\n    /**\n     * @description If true, will force a refresh regardless of cool down. Requires an authorized api key to be passed.\n     * @default false\n     */\n    overrideCoolDown?: boolean;\n  };\n  Model363: {\n    token?: string;\n    /**\n     * @default v6\n     * @enum {string}\n     */\n    router?: \"v5\" | \"v6\";\n  };\n  Model364: {\n    token?: string;\n  };\n  Model365: {\n    id: string;\n    /** @default false */\n    skipRevalidation?: boolean;\n  };\n}\n\nexport interface operations {\n  /** This API can be used to scrape all of the activities */\n  getActivityV1: {\n    parameters: {\n      query: {\n        limit?: number;\n        continuation?: number;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getActivityV1Response\"];\n      };\n    };\n  };\n  /** This API can be used to scrape all of the activities */\n  getActivityV2: {\n    parameters: {\n      query: {\n        limit?: number;\n        continuation?: number;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getActivityV2Response\"];\n      };\n    };\n  };\n  /** This API can be used to scrape all of the activities */\n  getActivityV3: {\n    parameters: {\n      query: {\n        /** If true, metadata is included in the response. */\n        includeMetadata?: boolean;\n        limit?: number;\n        continuation?: string;\n        /** Order the items are returned in the response. */\n        sortDirection?: \"asc\" | \"desc\";\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getActivityV3Response\"];\n      };\n    };\n  };\n  /** This API can be used to scrape all of the activities */\n  getActivityV4: {\n    parameters: {\n      query: {\n        /** If true, metadata is included in the response. */\n        includeMetadata?: boolean;\n        limit?: number;\n        continuation?: string;\n        /** Order the items are returned in the response. */\n        sortDirection?: \"asc\" | \"desc\";\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getActivityV4Response\"];\n      };\n    };\n  };\n  getAdminGetmarketplaces: {\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getMarketplacesv1Resp\"];\n      };\n    };\n  };\n  getAdminOpenapi: {\n    responses: {\n      /** Successful */\n      default: {\n        schema: string;\n      };\n    };\n  };\n  getAdminRatelimitrules: {\n    parameters: {\n      header: {\n        \"x-admin-api-key\": string;\n      };\n      query: {\n        /** The route to get rules for */\n        route?: string;\n      };\n    };\n    responses: {\n      /** Successful */\n      default: {\n        schema: string;\n      };\n    };\n  };\n  getAssetsV1: {\n    parameters: {\n      query: {\n        asset: string;\n      };\n    };\n    responses: {\n      /** Successful */\n      default: {\n        schema: string;\n      };\n    };\n  };\n  getAttributesV1: {\n    parameters: {\n      query: {\n        /** Filter to a particular collection, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        collection?: string;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getAttributesV1Response\"];\n      };\n    };\n  };\n  /** Get detailed information about a single collection, including real-time stats. */\n  getCollectionV1: {\n    parameters: {\n      query: {\n        /** Filter to a particular collection, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        id?: string;\n        /** Filter to a particular slug, e.g. `boredapeyachtclub` */\n        slug?: string;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getCollectionV1Response\"];\n      };\n    };\n  };\n  /** Get detailed information about a single collection, including real-time stats. */\n  getCollectionV2: {\n    parameters: {\n      query: {\n        /** Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        id?: string;\n        /** Filter to a particular collection slug. Example: `boredapeyachtclub` */\n        slug?: string;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getCollectionV2Response\"];\n      };\n    };\n  };\n  /** Get detailed information about a single collection, including real-time stats. */\n  getCollectionV3: {\n    parameters: {\n      query: {\n        /** Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        id?: string;\n        /** Filter to a particular collection slug. Example: `boredapeyachtclub` */\n        slug?: string;\n        /** If true, top bid will be returned in the response. */\n        includeTopBid?: boolean;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getCollectionV3Response\"];\n      };\n    };\n  };\n  /** Useful for getting multiple collections to show in a marketplace, or search for particular collections. */\n  getCollectionsV1: {\n    parameters: {\n      query: {\n        /** Filter to a particular community, e.g. `artblocks` */\n        community?: string;\n        /** Filter to a particular contract, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        contract?: string;\n        /** Search for collections that match a string, e.g. `bored` */\n        name?: string;\n        /** Filter to a particular slug, e.g. `boredapeyachtclub` */\n        slug?: string;\n        sortBy?: \"1DayVolume\" | \"allTimeVolume\";\n        offset?: number;\n        limit?: number;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getCollectionsV1Response\"];\n      };\n    };\n  };\n  /** Useful for getting multiple collections to show in a marketplace, or search for particular collections. */\n  getCollectionsV2: {\n    parameters: {\n      query: {\n        /** Filter to a particular community, e.g. `artblocks` */\n        community?: string;\n        /** Filter to a particular contract, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        contract?: string;\n        /** Search for collections that match a string, e.g. `bored` */\n        name?: string;\n        /** Filter to a particular slug, e.g. `boredapeyachtclub` */\n        slug?: string;\n        sortBy?: \"1DayVolume\" | \"7DayVolume\" | \"30DayVolume\" | \"allTimeVolume\";\n        offset?: number;\n        limit?: number;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getCollectionsV2Response\"];\n      };\n    };\n  };\n  /** Useful for getting multiple collections to show in a marketplace, or search for particular collections. */\n  getCollectionsV3: {\n    parameters: {\n      query: {\n        /** Filter to a particular community, e.g. `artblocks` */\n        community?: string;\n        /** Filter to a particular contract, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        contract?: string;\n        /** Search for collections that match a string, e.g. `bored` */\n        name?: string;\n        /** Filter to a particular slug, e.g. `boredapeyachtclub` */\n        slug?: string;\n        sortBy?: \"1DayVolume\" | \"7DayVolume\" | \"30DayVolume\" | \"allTimeVolume\";\n        offset?: number;\n        limit?: number;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getCollectionsV3Response\"];\n      };\n    };\n  };\n  /** Useful for getting multiple collections to show in a marketplace, or search for particular collections. */\n  getCollectionsV4: {\n    parameters: {\n      query: {\n        /** Filter to a particular collection set. */\n        collectionsSetId?: string;\n        /** Filter to a particular community. Example: `artblocks` */\n        community?: string;\n        contract?: string[] | string;\n        /** Search for collections that match a string. Example: `bored` */\n        name?: string;\n        /** Filter to a particular collection slug. Example: `boredapeyachtclub` */\n        slug?: string;\n        /** Order the items are returned in the response. */\n        sortBy?: \"1DayVolume\" | \"7DayVolume\" | \"30DayVolume\" | \"allTimeVolume\";\n        /** If true, top bid will be returned in the response. */\n        includeTopBid?: boolean;\n        /** Amount of items returned in response. */\n        limit?: number;\n        /** Use continuation token to request next offset of items. */\n        continuation?: string;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getCollectionsV4Response\"];\n      };\n    };\n  };\n  /** Useful for getting multiple collections to show in a marketplace, or search for particular collections. */\n  getCollectionsV5: {\n    parameters: {\n      query: {\n        /** Filter to a particular collection with collection id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        id?: string;\n        /** Filter to a particular collection slug. Example: `boredapeyachtclub` */\n        slug?: string;\n        /** Filter to a particular collection set. */\n        collectionsSetId?: string;\n        /** Filter to a particular community. Example: `artblocks` */\n        community?: string;\n        contract?: string[] | string;\n        /** Search for collections that match a string. Example: `bored` */\n        name?: string;\n        /** If true, top bid will be returned in the response. */\n        includeTopBid?: boolean;\n        /** If true, attributes will be included in the response. (supported only when filtering to a particular collection using `id` or `slug`) */\n        includeAttributes?: boolean;\n        /** If true, owner count will be included in the response. (supported only when filtering to a particular collection using `id` or `slug`) */\n        includeOwnerCount?: boolean;\n        /** If true, sales count (1 day, 7 day, 30 day, all time) will be included in the response. (supported only when filtering to a particular collection using `id` or `slug`) */\n        includeSalesCount?: boolean;\n        /** If true, prices will include missing royalties to be added on-top. */\n        normalizeRoyalties?: boolean;\n        /** If true, return the non flagged floor ask. (only supported when `normalizeRoyalties` is false) */\n        useNonFlaggedFloorAsk?: boolean;\n        /** Order the items are returned in the response. */\n        sortBy?:\n          | \"1DayVolume\"\n          | \"7DayVolume\"\n          | \"30DayVolume\"\n          | \"allTimeVolume\"\n          | \"createdAt\"\n          | \"floorAskPrice\";\n        /** Amount of items returned in response. */\n        limit?: number;\n        /** Use continuation token to request next offset of items. */\n        continuation?: string;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getCollectionsV5Response\"];\n      };\n    };\n  };\n  /** Access orders with various filters applied. If you need orders created by a single user, use the positions API instead. */\n  getOrdersV1: {\n    parameters: {\n      query: {\n        id?: string;\n        /** Filter to a particular token, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123` */\n        token?: string;\n        /** Filter to a particular set, e.g. `contract:0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        tokenSetId?: string;\n        offset?: number;\n        limit?: number;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getOrdersV1Response\"];\n      };\n    };\n  };\n  postOrdersV1: {\n    parameters: {\n      header: {\n        \"x-admin-api-key\": string;\n      };\n      body: {\n        body?: definitions[\"Model305\"];\n      };\n    };\n    responses: {\n      /** Successful */\n      default: {\n        schema: string;\n      };\n    };\n  };\n  /** Access orders with various filters applied. If you need orders created by a single user, use the positions API instead. */\n  getOrdersV2: {\n    parameters: {\n      query: {\n        id?: string;\n        /** Filter to a particular token, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123` */\n        token?: string;\n        /** Filter to a particular set, e.g. `contract:0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        tokenSetId?: string;\n        offset?: number;\n        limit?: number;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getOrdersV2Response\"];\n      };\n    };\n  };\n  /** Get owners with various filters applied, and a summary of their ownership. Useful for exploring top owners in a collection or attribute. */\n  getOwnersV1: {\n    parameters: {\n      query: {\n        /** Filter to a particular collection set. */\n        collectionsSetId?: string;\n        /** Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        collection?: string;\n        /** Filter to a particular contract. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        contract?: string;\n        /** Filter to a particular token. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123` */\n        token?: string;\n        /** Filter to a particular attribute. Example: `attributes[Type]=Original` */\n        attributes?: string;\n        /** Use offset to request the next batch of items. */\n        offset?: number;\n        /** Amount of items returned in response. */\n        limit?: number;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getOwnersV1Response\"];\n      };\n    };\n  };\n  /** Get recent sales for a contract or token. */\n  getSalesV1: {\n    parameters: {\n      query: {\n        /** Filter to a particular collection, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        collection?: string;\n        /** Filter to a particular contract, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        contract?: string;\n        /** Filter to a particular token, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123` */\n        token?: string;\n        offset?: number;\n        limit?: number;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getSalesV1Response\"];\n      };\n    };\n  };\n  /** Get recent sales for a contract or token. */\n  getSalesV2: {\n    parameters: {\n      query: {\n        /** Filter to a particular collection, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        collection?: string;\n        /** Filter to a particular contract, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        contract?: string;\n        /** Filter to a particular token, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123` */\n        token?: string;\n        offset?: number;\n        limit?: number;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getSalesV2Response\"];\n      };\n    };\n  };\n  /** Get recent sales for a contract or token. Note: this API is returns rich metadata, and has advanced filters, so is only designed for small amounts of recent sales. If you want access to sales in bulk, use the `Aggregator > Bulk Sales` API. */\n  getSalesV3: {\n    parameters: {\n      query: {\n        contract?: string[] | string;\n        /** Filter to a particular token. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123` */\n        token?: string;\n        /** Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        collection?: string;\n        /** Filter to a particular attribute. Example: `attributes[Type]=Original` */\n        attributes?: string;\n        /** Filter to a particular transaction. Example: `0x04654cc4c81882ed4d20b958e0eeb107915d75730110cce65333221439de6afc` */\n        txHash?: string;\n        /** Get events after a particular unix timestamp (inclusive) */\n        startTimestamp?: number;\n        /** Get events before a particular unix timestamp (inclusive) */\n        endTimestamp?: number;\n        /** Amount of items returned in response. */\n        limit?: number;\n        /** Use continuation token to request next offset of items. */\n        continuation?: string;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getSalesV3Response\"];\n      };\n    };\n  };\n  /** Get recent sales for a contract or token. */\n  getSalesV4: {\n    parameters: {\n      query: {\n        contract?: string[] | string;\n        /** Filter to a particular token. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123` */\n        token?: string;\n        /** If enabled, also include token metadata in the response. */\n        includeTokenMetadata?: boolean;\n        /** Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        collection?: string;\n        /** Filter to a particular attribute. Example: `attributes[Type]=Original` */\n        attributes?: string;\n        /** Filter to a particular transaction. Example: `0x04654cc4c81882ed4d20b958e0eeb107915d75730110cce65333221439de6afc` */\n        txHash?: string;\n        /** Get events after a particular unix timestamp (inclusive) */\n        startTimestamp?: number;\n        /** Get events before a particular unix timestamp (inclusive) */\n        endTimestamp?: number;\n        /** Amount of items returned in response. */\n        limit?: number;\n        /** Use continuation token to request next offset of items. */\n        continuation?: string;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getSalesV4Response\"];\n      };\n    };\n  };\n  /** This API returns a list of sources */\n  getSourcesV1: {\n    parameters: {\n      query: {\n        /** Order of the items are returned in the response. */\n        sortBy?: \"domain\" | \"createdAt\";\n        /** Order the items are returned in the response. */\n        sortDirection?: \"asc\" | \"desc\";\n        /** Filter to a particular domain. Example: `x2y2.io` */\n        domain?: string;\n        /** Amount of items returned in response. */\n        limit?: number;\n        continuation?: string;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getSourcesV1Response\"];\n      };\n    };\n  };\n  /** Get aggregate stats for a particular set (collection, attribute or single token) */\n  getStatsV1: {\n    parameters: {\n      query: {\n        /** Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        collection?: string;\n        /** Filter to a particular token. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123` */\n        token?: string;\n        /** Filter to a particular attribute. Example: `attributes[Type]=Original` */\n        attributes?: string;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getStatsV1Response\"];\n      };\n    };\n  };\n  /** Get aggregate stats for a particular set (collection, attribute or single token) */\n  getStatsV2: {\n    parameters: {\n      query: {\n        /** Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        collection?: string;\n        /** Filter to a particular token. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123` */\n        token?: string;\n        /** Filter to a particular attribute. Example: `attributes[Type]=Original` */\n        attributes?: string;\n        /** If true, prices will include missing royalties to be added on-top. */\n        normalizeRoyalties?: boolean;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getStatsV2Response\"];\n      };\n    };\n  };\n  /** This API is optimized for quickly fetching a list of tokens in a collection, sorted by price, with only the most important information returned. If you need more metadata, use the `tokens/details` API */\n  getTokensV1: {\n    parameters: {\n      query: {\n        /** Filter to a particular collection, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        collection?: string;\n        /** Filter to a particular contract, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        contract?: string;\n        /** Filter to a particular token, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123` */\n        token?: string;\n        /** Filter to a particular set, e.g. `contract:0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        tokenSetId?: string;\n        /** Limit to tokens that are listed for sale */\n        onSale?: boolean;\n        sortBy?: \"tokenId\" | \"floorAskPrice\" | \"topBidValue\";\n        sortDirection?: \"asc\" | \"desc\";\n        offset?: number;\n        limit?: number;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getTokensV1Response\"];\n      };\n    };\n  };\n  /** This API is optimized for quickly fetching a list of tokens in a collection, sorted by price, with only the most important information returned. If you need more metadata, use the `tokens/details` API */\n  getTokensV2: {\n    parameters: {\n      query: {\n        /** Filter to a particular collection, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        collection?: string;\n        /** Filter to a particular contract, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        contract?: string;\n        /** Filter to a particular token, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123` */\n        token?: string;\n        /** Filter to a particular set, e.g. `contract:0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        tokenSetId?: string;\n        /** Filter to a particular attribute, e.g. `attributes[Type]=Original` */\n        attributes?: string;\n        sortBy?: \"floorAskPrice\" | \"topBidValue\";\n        limit?: number;\n        continuation?: string;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getTokensV2Response\"];\n      };\n    };\n  };\n  /** This API is optimized for quickly fetching a list of tokens in a collection, sorted by price, with only the most important information returned. If you need more metadata, use the `tokens/details` API */\n  getTokensV3: {\n    parameters: {\n      query: {\n        /** Filter to a particular collection, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        collection?: string;\n        /** Filter to a particular contract, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        contract?: string;\n        /** Filter to one or more tokens, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123` */\n        tokens?: string[] | string;\n        /** Filter to a particular set, e.g. `contract:0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        tokenSetId?: string;\n        /** Filter to a particular attribute, e.g. `attributes[Type]=Original` */\n        attributes?: string;\n        sortBy?: \"floorAskPrice\" | \"topBidValue\";\n        limit?: number;\n        continuation?: string;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getTokensV3Response\"];\n      };\n    };\n  };\n  /** This API is optimized for quickly fetching a list of tokens in a collection, sorted by price, with only the most important information returned. If you need more metadata, use the tokens/details API */\n  getTokensV4: {\n    parameters: {\n      query: {\n        /** Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        collection?: string;\n        /** Filter to a particular contract. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        contract?: string;\n        /** Array of tokens. Example: `tokens[0]: 0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:704tokens[1]: 0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:979` */\n        tokens?: string[] | string;\n        /** Filter to a particular token set. Example: token:0xa7d8d9ef8d8ce8992df33d8b8cf4aebabd5bd270:129000685 */\n        tokenSetId?: string;\n        /** Filter to a particular attribute. Example: `attributes[Type]=Original` */\n        attributes?: string;\n        /** Domain of the order source. Example `opensea.io` */\n        source?: string;\n        /** If true, results will filter only Zoo orders. */\n        native?: boolean;\n        /** Order the items are returned in the response, by default sorted by `floorAskPrice`. Not supported when filtering by `contract`. When filtering by `contract` the results are sorted by `tokenId` by default. */\n        sortBy?: \"floorAskPrice\" | \"tokenId\" | \"rarity\";\n        sortDirection?: \"asc\" | \"desc\";\n        /** Amount of items returned in response. */\n        limit?: number;\n        /** If true, top bid will be returned in the response. */\n        includeTopBid?: boolean;\n        /** Use continuation token to request next offset of items. */\n        continuation?: string;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getTokensV4Response\"];\n      };\n    };\n  };\n  /** Get a list of tokens with full metadata. This is useful for showing a single token page, or scenarios that require more metadata. */\n  getTokensV5: {\n    parameters: {\n      query: {\n        /** Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        collection?: string;\n        /** Filter to a particular collection set. */\n        collectionsSetId?: string;\n        /** Filter to a particular community. Example: `artblocks` */\n        community?: string;\n        /** Filter to a particular contract. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        contract?: string;\n        /** Filter to a particular token by name. Example: `token #1` */\n        tokenName?: string;\n        /** Array of tokens. Example: `tokens[0]: 0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:704 tokens[1]: 0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:979` */\n        tokens?: string[] | string;\n        /** Filter to a particular token set. `Example: token:0xa7d8d9ef8d8ce8992df33d8b8cf4aebabd5bd270:129000685` */\n        tokenSetId?: string;\n        /** Filter to a particular attribute. Example: `attributes[Type]=Original` */\n        attributes?: string;\n        /** Domain of the order source. Example `opensea.io` (Only listed tokens are returned when filtering by source) */\n        source?: string;\n        /** Get tokens with a min rarity rank (inclusive) */\n        minRarityRank?: number;\n        /** Get tokens with a max rarity rank (inclusive) */\n        maxRarityRank?: number;\n        /** Get tokens with a min floor ask price (inclusive) */\n        minFloorAskPrice?: number;\n        /** Get tokens with a max floor ask price (inclusive) */\n        maxFloorAskPrice?: number;\n        /**\n         * Allowed only with collection and tokens filtering!\n         * -1 = All tokens (default)\n         * 0 = Non flagged tokens\n         * 1 = Flagged tokens\n         */\n        flagStatus?: -1 | 0 | 1;\n        /** Order the items are returned in the response. */\n        sortBy?: \"floorAskPrice\" | \"tokenId\" | \"rarity\";\n        sortDirection?: \"asc\" | \"desc\";\n        /** Filter to tokens with a listing in a particular currency. `Example: currencies[0]: 0x0000000000000000000000000000000000000000` */\n        currencies?: string[] | string;\n        /** Amount of items returned in response. */\n        limit?: number;\n        /** If true, top bid will be returned in the response. */\n        includeTopBid?: boolean;\n        /** If true, attributes will be returned in the response. */\n        includeAttributes?: boolean;\n        /** If true, quantity filled and quantity remaining will be returned in the response. */\n        includeQuantity?: boolean;\n        /** If true, dynamic pricing data will be returned in the response. */\n        includeDynamicPricing?: boolean;\n        /** If true, prices will include missing royalties to be added on-top. */\n        normalizeRoyalties?: boolean;\n        /** Use continuation token to request next offset of items. */\n        continuation?: string;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getTokensV5Response\"];\n      };\n    };\n  };\n  /** Get recent transfers for a contract or token. */\n  getTransfersV2: {\n    parameters: {\n      query: {\n        /** Filter to a particular contract, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        contract?: string;\n        /** Filter to a particular token, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123` */\n        token?: string;\n        /** Filter to a particular collection, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        collection?: string;\n        /** Filter to a particular attribute, e.g. `attributes[Type]=Original` */\n        attributes?: string;\n        /** Filter to a particular transaction. Example: `0x04654cc4c81882ed4d20b958e0eeb107915d75730110cce65333221439de6afc` */\n        txHash?: string;\n        limit?: number;\n        continuation?: string;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getTransfersV2Response\"];\n      };\n    };\n  };\n  getAdminGetapikeyKey: {\n    parameters: {\n      header: {\n        \"x-admin-api-key\": string;\n      };\n      path: {\n        /** The API key */\n        key: string;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getApiKeyRateLimitsResponse\"];\n      };\n    };\n  };\n  /** Get the rate limits for the given API key */\n  getApikeysKeyRatelimits: {\n    parameters: {\n      path: {\n        /** The API key */\n        key: string;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"Model75\"];\n      };\n    };\n  };\n  /** This API can be used to build a feed for a collection */\n  getCollectionsActivityV4: {\n    parameters: {\n      query: {\n        /** Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        collection?: string;\n        /** Filter to a particular collection set. */\n        collectionsSetId?: string;\n        /** Filter to a particular community. Example: `artblocks` */\n        community?: string;\n        /** Amount of items returned in response. If `includeMetadata=true` max limit is 20, otherwise max limit is 1,000. */\n        limit?: number;\n        /** Order the items are returned in the response, eventTimestamp = The blockchain event time, createdAt - The time in which event was recorded */\n        sortBy?: \"eventTimestamp\" | \"createdAt\";\n        /** Use continuation token to request next offset of items. */\n        continuation?: string;\n        /** If true, metadata is included in the response. */\n        includeMetadata?: boolean;\n        types?:\n          | (\n              | \"sale\"\n              | \"ask\"\n              | \"transfer\"\n              | \"mint\"\n              | \"bid\"\n              | \"bid_cancel\"\n              | \"ask_cancel\"\n            )[]\n          | string;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getCollectionActivityV4Response\"];\n      };\n    };\n  };\n  /** This API can be used to build a feed for a collection */\n  getCollectionsActivityV5: {\n    parameters: {\n      query: {\n        /** Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        collection?: string;\n        /** Filter to a particular collection set. */\n        collectionsSetId?: string;\n        /** Filter to a particular community. Example: `artblocks` */\n        community?: string;\n        /** Amount of items returned in response. If `includeMetadata=true` max limit is 50, otherwise max limit is 1,000. */\n        limit?: number;\n        /** Order the items are returned in the response, eventTimestamp = The blockchain event time, createdAt - The time in which event was recorded */\n        sortBy?: \"eventTimestamp\" | \"createdAt\";\n        /** Use continuation token to request next offset of items. */\n        continuation?: string;\n        /** If true, metadata is included in the response. */\n        includeMetadata?: boolean;\n        types?:\n          | (\n              | \"sale\"\n              | \"ask\"\n              | \"transfer\"\n              | \"mint\"\n              | \"bid\"\n              | \"bid_cancel\"\n              | \"ask_cancel\"\n            )[]\n          | string;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getCollectionActivityV5Response\"];\n      };\n    };\n  };\n  /** Get date, volume, rank and sales count for each collection */\n  getCollectionsDailyvolumesV1: {\n    parameters: {\n      query: {\n        /** Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        id: string;\n        /** Amount of items returned in response. */\n        limit?: number;\n        /** The start timestamp you want to filter on (UTC) */\n        startTimestamp?: number;\n        /** The end timestamp you want to filter on (UTC) */\n        endTimestamp?: number;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getDailyVolumesV1Response\"];\n      };\n    };\n  };\n  /** This API returns aggregated listings info for the given collection per source */\n  getCollectionsSourcesV1: {\n    parameters: {\n      query: {\n        /** Filter to a particular collection, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        collection: string;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getSourcesListingsV1Response\"];\n      };\n    };\n  };\n  /** Get detailed information about a single collection, including real-time stats. */\n  getCollectionsCollectionorslugV1: {\n    parameters: {\n      path: {\n        collectionOrSlug: string;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getCollectionDeprecatedV1Response\"];\n      };\n    };\n  };\n  /** Get updates any time an asks status changes */\n  getEventsAsksV2: {\n    parameters: {\n      query: {\n        /** Filter to a particular contract. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        contract?: string;\n        /** Get events after a particular unix timestamp (inclusive) */\n        startTimestamp?: number;\n        /** Get events before a particular unix timestamp (inclusive) */\n        endTimestamp?: number;\n        /** Order the items are returned in the response. */\n        sortDirection?: \"asc\" | \"desc\";\n        /** Use continuation token to request next offset of items. */\n        continuation?: string;\n        /** Amount of items returned in response. */\n        limit?: number;\n        /** If true, prices will include missing royalties to be added on-top. */\n        normalizeRoyalties?: boolean;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getAsksEventsV2Response\"];\n      };\n    };\n  };\n  /** Get updates any time an asks status changes */\n  getEventsAsksV3: {\n    parameters: {\n      query: {\n        /** Filter to a particular contract. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        contract?: string;\n        /** Get events after a particular unix timestamp (inclusive) */\n        startTimestamp?: number;\n        /** Get events before a particular unix timestamp (inclusive) */\n        endTimestamp?: number;\n        /** If true, criteria metadata is included in the response. */\n        includeCriteriaMetadata?: boolean;\n        /** Order the items are returned in the response. */\n        sortDirection?: \"asc\" | \"desc\";\n        /** Use continuation token to request next offset of items. */\n        continuation?: string;\n        /** Amount of items returned in response. */\n        limit?: number;\n        /** If true, prices will include missing royalties to be added on-top. */\n        normalizeRoyalties?: boolean;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getAsksEventsV3Response\"];\n      };\n    };\n  };\n  /** Get updates any time a bid status changes */\n  getEventsBidsV1: {\n    parameters: {\n      query: {\n        /** Filter to a particular contract. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        contract?: string;\n        /** Get events after a particular unix timestamp (inclusive) */\n        startTimestamp?: number;\n        /** Get events before a particular unix timestamp (inclusive) */\n        endTimestamp?: number;\n        /** If true, bid criteria is included in the response. */\n        includeCriteria?: boolean;\n        /** Order the items are returned in the response. */\n        sortDirection?: \"asc\" | \"desc\";\n        /** Use continuation token to request next offset of items. */\n        continuation?: string;\n        /** Amount of items returned in response. */\n        limit?: number;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getBidEventsV1Response\"];\n      };\n    };\n  };\n  /** Get updates any time a bid status changes */\n  getEventsBidsV2: {\n    parameters: {\n      query: {\n        /** Filter to a particular contract. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        contract?: string;\n        /** Get events after a particular unix timestamp (inclusive) */\n        startTimestamp?: number;\n        /** Get events before a particular unix timestamp (inclusive) */\n        endTimestamp?: number;\n        /** If true, criteria metadata is included in the response. */\n        includeCriteriaMetadata?: boolean;\n        /** Order the items are returned in the response. */\n        sortDirection?: \"asc\" | \"desc\";\n        /** Use continuation token to request next offset of items. */\n        continuation?: string;\n        /** Amount of items returned in response. */\n        limit?: number;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getBidEventsV2Response\"];\n      };\n    };\n  };\n  /** Get updates any time a bid status changes */\n  getEventsBidsV3: {\n    parameters: {\n      query: {\n        /** Filter to a particular contract. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        contract?: string;\n        /** Get events after a particular unix timestamp (inclusive) */\n        startTimestamp?: number;\n        /** Get events before a particular unix timestamp (inclusive) */\n        endTimestamp?: number;\n        /** If true, criteria metadata is included in the response. */\n        includeCriteriaMetadata?: boolean;\n        /** Order the items are returned in the response. */\n        sortDirection?: \"asc\" | \"desc\";\n        /** Use continuation token to request next offset of items. */\n        continuation?: string;\n        /** Amount of items returned in response. */\n        limit?: number;\n        /** If true, prices will include missing royalties to be added on-top. */\n        normalizeRoyalties?: boolean;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getBidEventsV3Response\"];\n      };\n    };\n  };\n  /** Get updates any time an order status changes */\n  getEventsOrdersV1: {\n    parameters: {\n      query: {\n        /** Filter to a particular contract. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        contract?: string;\n        /** Get events after a particular unix timestamp (inclusive) */\n        startTimestamp?: number;\n        /** Get events before a particular unix timestamp (inclusive) */\n        endTimestamp?: number;\n        /** Order the items are returned in the response. */\n        sortDirection?: \"asc\" | \"desc\";\n        /** Use continuation token to request next offset of items. */\n        continuation?: string;\n        /** Amount of items returned in response. */\n        limit?: number;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getOrderEventsV1Response\"];\n      };\n    };\n  };\n  /** Generate a bid and submit it to multiple marketplaces */\n  getExecuteBidV2: {\n    parameters: {\n      query: {\n        /** Bid on a particular token. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123` */\n        token?: string;\n        /** Bid on a particular token set. */\n        tokenSetId?: string;\n        /** Bid on a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        collection?: string;\n        /** Bid on a particular attribute key. Example: `Composition` */\n        attributeKey?: string;\n        /** Bid on a particular attribute value. Example: `Teddy (#33)` */\n        attributeValue?: string;\n        /** Quanity of tokens user is buying. Only compatible with ERC1155 tokens. Example: `5` */\n        quantity?: number;\n        /** Address of wallet making the order. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00` */\n        maker: string;\n        /** Amount bidder is willing to offer in wei. Example: `1000000000000000000` */\n        weiPrice: string;\n        /** Exchange protocol used to create order. Example: `seaport` */\n        orderKind?: \"looks-rare\" | \"zeroex-v4\" | \"seaport\";\n        /** Orderbook where order is placed. Example: `Zoo` */\n        orderbook?: \"reservoir\" | \"opensea\" | \"looks-rare\";\n        /** Name of the platform that created the order. Example: `Chimpers Market` */\n        source?: string;\n        /** If true, royalties will be automatically included. */\n        automatedRoyalties?: boolean;\n        fee?: string;\n        /** If true flagged tokens will be excluded */\n        excludeFlaggedTokens?: boolean;\n        /** Wallet address of fee recipient. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00` */\n        feeRecipient?: string;\n        /** Unix timestamp (seconds) indicating when listing will be listed. Example: `1656080318` */\n        listingTime?: string;\n        /** Unix timestamp (seconds) indicating when listing will expire. Example: `1656080318` */\n        expirationTime?: string;\n        /** Optional. Random string to make the order unique */\n        salt?: string;\n        /** Optional. Set a custom nonce */\n        nonce?: string;\n        /** Signature v component (only required after order has been signed) */\n        v?: number;\n        /** Signature r component (only required after order has been signed) */\n        r?: string;\n        /** Signature s component (only required after order has been signed) */\n        s?: string;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getExecuteBidV2Response\"];\n      };\n    };\n  };\n  getExecuteBuyV2: {\n    parameters: {\n      query: {\n        /** Filter to a particular token. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123` */\n        token?: string;\n        /** Quanity of tokens user is buying. Only compatible with ERC1155 tokens. Example: `5` */\n        quantity?: number;\n        tokens?: string[];\n        /** Address of wallet filling the order. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00` */\n        taker: string;\n        /** If true, only quote will be returned. */\n        onlyQuote?: boolean;\n        /** Filling source used for attribution. Example: `zoolabs.io` */\n        source?: string;\n        /** Wallet address of referrer. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00` */\n        referrer?: string;\n        /** Fee amount in BPS. Example: `100`. */\n        referrerFeeBps?: number;\n        /** If true, partial orders will be accepted. */\n        partial?: boolean;\n        /** Optional. Set custom gas price. */\n        maxFeePerGas?: string;\n        /** Optional. Set custom gas price. */\n        maxPriorityFeePerGas?: string;\n        /** If true, balance check will be skipped. */\n        skipBalanceCheck?: boolean;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getExecuteBuyV2Response\"];\n      };\n    };\n  };\n  getExecuteBuyV3: {\n    parameters: {\n      query: {\n        /** Filter to a particular token. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123` */\n        token?: string;\n        /** Quanity of tokens user is buying. Only compatible with ERC1155 tokens. Example: `5` */\n        quantity?: number;\n        tokens?: string[];\n        /** Address of wallet filling the order. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00` */\n        taker: string;\n        /** If true, only the path will be returned. */\n        onlyPath?: boolean;\n        /** If true, all fills will be executed through the router. */\n        forceRouter?: boolean;\n        currency?: string;\n        /** Filling source used for attribution. Example: `zoolabs.io` */\n        source?: string;\n        /** Wallet address of referrer. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00` */\n        referrer?: string;\n        /** Fee amount in BPS. Example: `100`. */\n        referrerFeeBps?: number;\n        /** If true, partial orders will be accepted. */\n        partial?: boolean;\n        /** Optional. Set custom gas price. */\n        maxFeePerGas?: string;\n        /** Optional. Set custom gas price. */\n        maxPriorityFeePerGas?: string;\n        /** If true, balance check will be skipped. */\n        skipBalanceCheck?: boolean;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getExecuteBuyV3Response\"];\n      };\n    };\n  };\n  /** Cancel an existing order on any marketplace */\n  getExecuteCancelV1: {\n    parameters: {\n      query: {\n        /** Order Id. Example: `0x1544e82e6f2174f26233abcc35f3d478fa9c92926a91465430657987aea7d748` */\n        id: string;\n        /** Address of wallet cancelling the order. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00` */\n        maker: string;\n        /** Optional. Set custom gas price */\n        maxFeePerGas?: string;\n        /** Optional. Set custom gas price */\n        maxPriorityFeePerGas?: string;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getExecuteCancelV1Response\"];\n      };\n    };\n  };\n  /** Cancel an existing order on any marketplace */\n  getExecuteCancelV2: {\n    parameters: {\n      query: {\n        /** Order Id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        id: string;\n        /** If true, the order will be soft-cancelled. */\n        softCancel?: boolean;\n        /** Maker signature for soft-cancelling. */\n        signature?: string;\n        /** Optional. Set custom gas price */\n        maxFeePerGas?: string;\n        /** Optional. Set custom gas price */\n        maxPriorityFeePerGas?: string;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getExecuteCancelV2Response\"];\n      };\n    };\n  };\n  /** Generate a listing and submit it to multiple marketplaces */\n  getExecuteListV2: {\n    parameters: {\n      query: {\n        /** Filter to a particular token. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123` */\n        token: string;\n        /** Quanity of tokens user is listing. Only compatible with ERC1155 tokens. Example: `5` */\n        quantity?: number;\n        /** Address of wallet making the order. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00` */\n        maker: string;\n        /** Amount seller is willing to sell for in wei. Example: `1000000000000000000` */\n        weiPrice: string;\n        /** Exchange protocol used to create order. Example: `seaport` */\n        orderKind?: \"looks-rare\" | \"zeroex-v4\" | \"seaport\" | \"x2y2\";\n        /** Orderbook where order is placed. Example: `Zoo` */\n        orderbook?: \"opensea\" | \"looks-rare\" | \"reservoir\" | \"x2y2\";\n        /** Name of the platform that created the order. Example: `Chimpers Market` */\n        source?: string;\n        /** If true, royalties will be automatically included. */\n        automatedRoyalties?: boolean;\n        fee?: string;\n        feeRecipient?: string;\n        listingTime?: string;\n        /** Unix timestamp (seconds) indicating when listing will expire. Example: `1656080318` */\n        expirationTime?: string;\n        /** Optional. Random string to make the order unique */\n        salt?: string;\n        /** Optional. Set a custom nonce */\n        nonce?: string;\n        /** Signature v component (only required after order has been signed) */\n        v?: number;\n        /** Signature r component (only required after order has been signed) */\n        r?: string;\n        /** Signature s component (only required after order has been signed) */\n        s?: string;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getExecuteBidV2Response\"];\n      };\n    };\n  };\n  getExecuteSellV3: {\n    parameters: {\n      query: {\n        /** Filter to a particular token. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123` */\n        token: string;\n        /** Address of wallet filling the order. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00` */\n        taker: string;\n        /** Filling source used for attribution. Example: `zoolabs.io` */\n        source?: string;\n        /** Wallet address of referrer. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00` */\n        referrer?: string;\n        /** If true, only the path will be returned. */\n        onlyPath?: boolean;\n        /** Optional. Set custom gas price. */\n        maxFeePerGas?: string;\n        /** Optional. Set custom gas price. */\n        maxPriorityFeePerGas?: string;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getExecuteBuyV3Response\"];\n      };\n    };\n  };\n  /** This API calculates the total liquidity created by users, based on the number of tokens they are top bidder for. */\n  getLiquidityUsersV1: {\n    parameters: {\n      query: {\n        /** Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        collection?: string;\n        /** Filter to a particular user. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00` */\n        user?: string;\n        /** Use offset to request the next batch of items. */\n        offset?: number;\n        /** Amount of items returned in response. */\n        limit?: number;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getUsersLiquidityV1Response\"];\n      };\n    };\n  };\n  /** This API calculates the total liquidity created by users, based on the number of tokens they are top bidder for. */\n  getLiquidityUsersV2: {\n    parameters: {\n      query: {\n        /** Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        collection: string;\n        /** Use offset to request the next batch of items. */\n        offset?: number;\n        /** Amount of items returned in response. */\n        limit?: number;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getUsersLiquidityV1Response\"];\n      };\n    };\n  };\n  /** This API is designed for efficiently ingesting large volumes of orders, for external processing */\n  getOrdersAllV1: {\n    parameters: {\n      query: {\n        id?: string;\n        /** Filter to a source by domain. Example: `opensea.io` */\n        source?: string;\n        /** If true, results will filter only Zoo orders. */\n        native?: boolean;\n        /** Sell or buy side. */\n        side?: \"sell\" | \"buy\";\n        /** If true, metadata will be included in the response. */\n        includeMetadata?: boolean;\n        /** If true, raw data will be included in the response. */\n        includeRawData?: boolean;\n        /** Use continuation token to request next offset of items. */\n        continuation?: string;\n        /** Amount of items returned in response. */\n        limit?: number;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getOrdersAllV1Response\"];\n      };\n    };\n  };\n  /** This API is designed for efficiently ingesting large volumes of orders, for external processing */\n  getOrdersAllV2: {\n    parameters: {\n      query: {\n        id?: string;\n        /** Filter to a source by domain. Example: `opensea.io` */\n        source?: string;\n        /** If true, results will filter only Zoo orders. */\n        native?: boolean;\n        /** Sell or buy side. */\n        side?: \"sell\" | \"buy\";\n        /** If true, metadata will be included in the response. */\n        includeMetadata?: boolean;\n        /** If true, raw data will be included in the response. */\n        includeRawData?: boolean;\n        /** Use continuation token to request next offset of items. */\n        continuation?: string;\n        /** Amount of items returned in response. */\n        limit?: number;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getOrdersAllV2Response\"];\n      };\n    };\n  };\n  /** This API is designed for efficiently ingesting large volumes of orders, for external processing */\n  getOrdersAsksV1: {\n    parameters: {\n      query: {\n        /** Filter to a token, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123` */\n        token?: string;\n        /** Filter to a particular user, e.g. `0x4d04eb67a2d1e01c71fad0366e0c200207a75487` */\n        maker?: string;\n        /** Filter to a particular user, e.g. `0x4d04eb67a2d1e01c71fad0366e0c200207a75487` */\n        contract?: string;\n        /**\n         * `active` = currently valid, `inactive` = temporarily invalid\n         *\n         * Available when filtering by maker, otherwise only valid orders will be returned\n         */\n        status?: \"active\" | \"inactive\";\n        sortBy?: \"price\" | \"createdAt\";\n        continuation?: string;\n        limit?: number;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getOrdersAsksV1Response\"];\n      };\n    };\n  };\n  /** Get a list of asks (listings), filtered by token, collection or maker. This API is designed for efficiently ingesting large volumes of orders, for external processing */\n  getOrdersAsksV2: {\n    parameters: {\n      query: {\n        /** Filter to a particular token. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123` */\n        token?: string;\n        /** Filter to a particular user. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00` */\n        maker?: string;\n        contracts?: string[] | string;\n        /**\n         * active = currently valid, inactive = temporarily invalid\n         *\n         * Available when filtering by maker, otherwise only valid orders will be returned\n         */\n        status?: string;\n        /** When true, private orders are included in the response. */\n        includePrivate?: boolean;\n        /** Order the items are returned in the response. */\n        sortBy?: string;\n        /** Use continuation token to request next offset of items. */\n        continuation?: string;\n        /** Amount of items returned in response. */\n        limit?: number;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getOrdersAsksV1Response\"];\n      };\n    };\n  };\n  /** Get a list of asks (listings), filtered by token, collection or maker. This API is designed for efficiently ingesting large volumes of orders, for external processing */\n  getOrdersAsksV3: {\n    parameters: {\n      query: {\n        ids?: string;\n        /** Filter to a particular token. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123` */\n        token?: string;\n        /** Filter to a particular user. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00` */\n        maker?: string;\n        /** Filter to a particular community. Example: `artblocks` */\n        community?: string;\n        contracts?: string[] | string;\n        /**\n         * active = currently valid\n         * inactive = temporarily invalid\n         * expired, cancelled, filled = permanently invalid\n         *\n         * Available when filtering by maker, otherwise only valid orders will be returned\n         */\n        status?: string;\n        source?: string[] | string;\n        /** If true, results will filter only Zoo orders. */\n        native?: boolean;\n        /** If true, private orders are included in the response. */\n        includePrivate?: boolean;\n        /** If true, metadata is included in the response. */\n        includeMetadata?: boolean;\n        /** If true, raw data is included in the response. */\n        includeRawData?: boolean;\n        /** Get events after a particular unix timestamp (inclusive) */\n        startTimestamp?: number;\n        /** Get events before a particular unix timestamp (inclusive) */\n        endTimestamp?: number;\n        /** If true, prices will include missing royalties to be added on-top. */\n        normalizeRoyalties?: boolean;\n        /** Order the items are returned in the response, Sorting by price allowed only when filtering by token */\n        sortBy?: \"createdAt\" | \"price\";\n        /** Use continuation token to request next offset of items. */\n        continuation?: string;\n        /** Amount of items returned in response. */\n        limit?: number;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getOrdersAsksV3Response\"];\n      };\n    };\n  };\n  /** Get a list of asks (listings), filtered by token, collection or maker. This API is designed for efficiently ingesting large volumes of orders, for external processing */\n  getOrdersAsksV4: {\n    parameters: {\n      query: {\n        ids?: string[] | string;\n        /** Filter to a particular token. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123` */\n        token?: string;\n        /** Filter to a particular set, e.g. `contract:0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        tokenSetId?: string;\n        /** Filter to a particular user. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00` */\n        maker?: string;\n        /** Filter to a particular community. Example: `artblocks` */\n        community?: string;\n        /** Filter to a particular collection set. */\n        collectionsSetId?: string;\n        contracts?: string[] | string;\n        /**\n         * active = currently valid\n         * inactive = temporarily invalid\n         * expired, cancelled, filled = permanently invalid\n         * any = any status\n         * Available when filtering by maker, otherwise only valid orders will be returned\n         */\n        status?: string;\n        /** Filter to a source by domain. Example: `opensea.io` */\n        source?: string;\n        /** If true, results will filter only Zoo orders. */\n        native?: boolean;\n        /** If true, private orders are included in the response. */\n        includePrivate?: boolean;\n        /** If true, criteria metadata is included in the response. */\n        includeCriteriaMetadata?: boolean;\n        /** If true, raw data is included in the response. */\n        includeRawData?: boolean;\n        /** Get events after a particular unix timestamp (inclusive) */\n        startTimestamp?: number;\n        /** Get events before a particular unix timestamp (inclusive) */\n        endTimestamp?: number;\n        /** If true, prices will include missing royalties to be added on-top. */\n        normalizeRoyalties?: boolean;\n        /** Order the items are returned in the response, Sorting by price allowed only when filtering by token */\n        sortBy?: \"createdAt\" | \"price\";\n        /** Use continuation token to request next offset of items. */\n        continuation?: string;\n        /** Amount of items returned in response. */\n        limit?: number;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getOrdersAsksV4Response\"];\n      };\n    };\n  };\n  /** This API is designed for efficiently ingesting large volumes of orders, for external processing */\n  getOrdersBidsV1: {\n    parameters: {\n      query: {\n        /** Filter to a token, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123` */\n        token?: string;\n        /** Filter to a particular set, e.g. `contract:0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        tokenSetId?: string;\n        /** Filter to a particular user, e.g. `0x4d04eb67a2d1e01c71fad0366e0c200207a75487` */\n        maker?: string;\n        /**\n         * `active` = currently valid, `inactive` = temporarily invalid, `expired` = permanently invalid\n         *\n         * Available when filtering by maker, otherwise only valid orders will be returned\n         */\n        status?: \"active\" | \"inactive\" | \"expired\";\n        sortBy?: \"price\" | \"createdAt\";\n        continuation?: string;\n        limit?: number;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getOrdersBidsV1Response\"];\n      };\n    };\n  };\n  /** Get a list of bids (offers), filtered by token, collection or maker. This API is designed for efficiently ingesting large volumes of orders, for external processing */\n  getOrdersBidsV2: {\n    parameters: {\n      query: {\n        /** Filter to a particular token. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123` */\n        token?: string;\n        /** Filter to a particular set. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        tokenSetId?: string;\n        /** Filter to a particular user. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00` */\n        maker?: string;\n        /** Filter to an array of contracts. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        contracts?: string[] | string;\n        /**\n         * active = currently valid, inactive = temporarily invalid, expired = permanently invalid\n         *\n         * Available when filtering by maker, otherwise only valid orders will be returned\n         */\n        status?: string;\n        /** Order the items are returned in the response. */\n        sortBy?: string;\n        /** Use continuation token to request next offset of items. */\n        continuation?: string;\n        /** Amount of items returned in response. */\n        limit?: number;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getOrdersBidsV1Response\"];\n      };\n    };\n  };\n  /** Get a list of bids (offers), filtered by token, collection or maker. This API is designed for efficiently ingesting large volumes of orders, for external processing */\n  getOrdersBidsV3: {\n    parameters: {\n      query: {\n        ids?: string;\n        /** Filter to a particular token. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123` */\n        token?: string;\n        /** Filter to a particular set. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        tokenSetId?: string;\n        /** Filter to a particular user. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00` */\n        maker?: string;\n        /** Filter to an array of contracts. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        contracts?: string[] | string;\n        /**\n         * active = currently valid, inactive = temporarily invalid, expired = permanently invalid\n         *\n         * Available when filtering by maker, otherwise only valid orders will be returned\n         */\n        status?: string;\n        /** Filter to a source by domain. Example: `opensea.io` */\n        source?: string;\n        /** If true, results will filter only Zoo orders. */\n        native?: boolean;\n        /** If true, metadata is included in the response. */\n        includeMetadata?: boolean;\n        /** If true, raw data is included in the response. */\n        includeRawData?: boolean;\n        /** Order the items are returned in the response, Sorting by price allowed only when filtering by token */\n        sortBy?: \"createdAt\" | \"price\";\n        /** Use continuation token to request next offset of items. */\n        continuation?: string;\n        /** Amount of items returned in response. */\n        limit?: number;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getOrdersBidsV3Response\"];\n      };\n    };\n  };\n  /** Get a list of bids (offers), filtered by token, collection or maker. This API is designed for efficiently ingesting large volumes of orders, for external processing */\n  getOrdersBidsV4: {\n    parameters: {\n      query: {\n        ids?: string;\n        /** Filter to a particular token. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123` */\n        token?: string;\n        /** Filter to a particular set. Example: `contract:0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` or `token:0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:1` */\n        tokenSetId?: string;\n        /** Filter to a particular user. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00` */\n        maker?: string;\n        /** Filter to a particular community. Example: `artblocks` */\n        community?: string;\n        /** Filter to a particular collection bids with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        collection?: string;\n        /** Filter to a particular attribute within a collection. Example: `attribute[Mouth]=Bored` (Collection must be passed as well when filtering by attribute) */\n        attribute?: string;\n        /** Filter to an array of contracts. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        contracts?: string[] | string;\n        /**\n         * active = currently valid\n         * inactive = temporarily invalid\n         * expired, cancelled, filled = permanently invalid\n         *\n         * Available when filtering by maker, otherwise only valid orders will be returned\n         */\n        status?: string;\n        /** Filter to a source by domain. Example: `opensea.io` */\n        source?: string;\n        /** If true, results will filter only Zoo orders. */\n        native?: boolean;\n        /** If true, metadata is included in the response. */\n        includeMetadata?: boolean;\n        /** If true, raw data is included in the response. */\n        includeRawData?: boolean;\n        /** If true, prices will include missing royalties to be added on-top. */\n        normalizeRoyalties?: boolean;\n        /** Order the items are returned in the response, Sorting by price allowed only when filtering by token */\n        sortBy?: \"createdAt\" | \"price\";\n        /** Use continuation token to request next offset of items. */\n        continuation?: string;\n        /** Amount of items returned in response. */\n        limit?: number;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getOrdersBidsV4Response\"];\n      };\n    };\n  };\n  /** Get a list of bids (offers), filtered by token, collection or maker. This API is designed for efficiently ingesting large volumes of orders, for external processing */\n  getOrdersBidsV5: {\n    parameters: {\n      query: {\n        ids?: string[] | string;\n        /** Filter to a particular token. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123` */\n        token?: string;\n        /** Filter to a particular set. Example: `contract:0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` or `token:0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:1` */\n        tokenSetId?: string;\n        /** Filter to a particular user. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00` */\n        maker?: string;\n        /** Filter to a particular community. Example: `artblocks` */\n        community?: string;\n        /** Filter to a particular collection set. */\n        collectionsSetId?: string;\n        /** Filter to a particular collection bids with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        collection?: string;\n        /** Filter to a particular attribute within a collection. Example: `attribute[Mouth]=Bored` (Collection must be passed as well when filtering by attribute) */\n        attribute?: string;\n        /** Filter to an array of contracts. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        contracts?: string[] | string;\n        /**\n         * active = currently valid\n         * inactive = temporarily invalid\n         * expired, cancelled, filled = permanently invalid\n         * any = any status\n         * Available when filtering by maker, otherwise only valid orders will be returned\n         */\n        status?: string;\n        /** Filter to a source by domain. Example: `opensea.io` */\n        source?: string;\n        /** If true, results will filter only Zoo orders. */\n        native?: boolean;\n        /** If true, criteria metadata is included in the response. */\n        includeCriteriaMetadata?: boolean;\n        /** If true, raw data is included in the response. */\n        includeRawData?: boolean;\n        /** Get events after a particular unix timestamp (inclusive) */\n        startTimestamp?: number;\n        /** Get events before a particular unix timestamp (inclusive) */\n        endTimestamp?: number;\n        /** If true, prices will include missing royalties to be added on-top. */\n        normalizeRoyalties?: boolean;\n        /** Order the items are returned in the response. */\n        sortBy?: \"createdAt\" | \"price\";\n        /** Use continuation token to request next offset of items. */\n        continuation?: string;\n        /** Amount of items returned in response. */\n        limit?: number;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getOrdersBidsV5Response\"];\n      };\n    };\n  };\n  getOrdersExecutedV1: {\n    parameters: {\n      query: {\n        ids: string[] | string;\n      };\n    };\n    responses: {\n      /** Successful */\n      default: {\n        schema: string;\n      };\n    };\n  };\n  /** This API can be used to find top common collections among the given owners */\n  getOwnersCommoncollectionsV1: {\n    parameters: {\n      query: {\n        /** Array of owner addresses. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        owners: string[] | string;\n        /** Amount of collections returned in response. */\n        limit?: number;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getCommonCollectionsOwnersV1Response\"];\n      };\n    };\n  };\n  /** Find which addresses own the most of a group of collections. */\n  getOwnersCrosscollectionsV1: {\n    parameters: {\n      query: {\n        /** Filter to one or more collections. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        collections: string[] | string;\n        /** Amount of owners returned in response. */\n        limit?: number;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getCrossCollectionsOwnersV1Response\"];\n      };\n    };\n  };\n  getRedirectLogoV1: {\n    parameters: {\n      query: {\n        source: string;\n      };\n    };\n    responses: {\n      /** Successful */\n      default: {\n        schema: string;\n      };\n    };\n  };\n  getRedirectTokenV1: {\n    parameters: {\n      query: {\n        source: string;\n        /** Redirect to the given token page, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123` */\n        token: string;\n      };\n    };\n    responses: {\n      /** Successful */\n      default: {\n        schema: string;\n      };\n    };\n  };\n  /** Note: this API is optimized for bulk access, and offers minimal filters/metadata. If you need more flexibility, try the `NFT API > Sales` endpoint */\n  getSalesBulkV1: {\n    parameters: {\n      query: {\n        /** Filter to a particular contract. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        contract?: string;\n        /** Filter to a particular token. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123` */\n        token?: string;\n        /** Get events after a particular unix timestamp (inclusive) */\n        startTimestamp?: number;\n        /** Get events before a particular unix timestamp (inclusive) */\n        endTimestamp?: number;\n        /** Amount of items returned in response. */\n        limit?: number;\n        /** Use continuation token to request next offset of items. */\n        continuation?: string;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getSalesBulkV1Response\"];\n      };\n    };\n  };\n  getSearchCollectionsV1: {\n    parameters: {\n      query: {\n        /** Lightweight search for collections that match a string. Example: `bored` */\n        name?: string;\n        /** Filter to a particular community. Example: `artblocks` */\n        community?: string;\n        /** Return result in given currency */\n        displayCurrency?: string;\n        /** Filter to a particular collection set */\n        collectionsSetId?: string;\n        /** Use offset to request the next batch of items. */\n        offset?: number;\n        /** Amount of items returned in response. */\n        limit?: number;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getSearchCollectionsV1Response\"];\n      };\n    };\n  };\n  /** Get the latest price event per token in a collection, so that you can listen to future events and keep track of prices */\n  getTokensBootstrapV1: {\n    parameters: {\n      query: {\n        /** Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        collection?: string;\n        /** Filter to a particular contract. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        contract?: string;\n        /** Use continuation token to request next offset of items. */\n        continuation?: string;\n        /** Amount of items returned in response. */\n        limit?: number;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getTokensBootstrapV1Response\"];\n      };\n    };\n  };\n  /** Get a list of tokens with full metadata. This is useful for showing a single token page, or scenarios that require more metadata. If you don't need this metadata, you should use the <a href='#/tokens/getTokensV1'>tokens</a> API, which is much faster. */\n  getTokensDetailsV2: {\n    parameters: {\n      query: {\n        /** Filter to a particular collection, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        collection?: string;\n        /** Filter to a particular contract, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        contract?: string;\n        /** Filter to a particular token, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123` */\n        token?: string;\n        /** Filter to a particular set, e.g. `contract:0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        tokenSetId?: string;\n        /** Filter to a particular attribute, e.g. `attributes[Type]=Original` */\n        attributes?: string;\n        /** Filter to a particular source, e.g. `0x5b3256965e7c3cf26e11fcaf296dfc8807c01073` */\n        source?: string;\n        sortBy?: \"floorAskPrice\" | \"topBidValue\";\n        limit?: number;\n        continuation?: string;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getTokensDetailsV2Response\"];\n      };\n    };\n  };\n  /** Get a list of tokens with full metadata. This is useful for showing a single token page, or scenarios that require more metadata. If you don't need this metadata, you should use the <a href='#/tokens/getTokensV1'>tokens</a> API, which is much faster. */\n  getTokensDetailsV3: {\n    parameters: {\n      query: {\n        /** Filter to a particular collection, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        collection?: string;\n        /** Filter to a particular contract, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        contract?: string;\n        /** Filter to one or more tokens, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123` */\n        tokens?: string[] | string;\n        /** Filter to a particular set, e.g. `contract:0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        tokenSetId?: string;\n        /** Filter to a particular attribute, e.g. `attributes[Type]=Original` */\n        attributes?: string;\n        /** Filter to a particular source, e.g. `0x5b3256965e7c3cf26e11fcaf296dfc8807c01073` */\n        source?: string;\n        sortBy?: \"floorAskPrice\" | \"topBidValue\";\n        limit?: number;\n        continuation?: string;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getTokensDetailsV3Response\"];\n      };\n    };\n  };\n  /** Get a list of tokens with full metadata. This is useful for showing a single token page, or scenarios that require more metadata. If you don't need this metadata, you should use the <a href='#/tokens/getTokensV1'>tokens</a> API, which is much faster. */\n  getTokensDetailsV4: {\n    parameters: {\n      query: {\n        /** Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        collection?: string;\n        /** Filter to a particular contract. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        contract?: string;\n        /** Array of tokens. Example: `tokens[0]: 0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:704 tokens[1]: 0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:979` */\n        tokens?: string[] | string;\n        /** Filter to a particular token set. `Example: token:0xa7d8d9ef8d8ce8992df33d8b8cf4aebabd5bd270:129000685` */\n        tokenSetId?: string;\n        /** Filter to a particular attribute. Example: `attributes[Type]=Original` */\n        attributes?: string;\n        /** Domain of the order source. Example `opensea.io` */\n        source?: string;\n        /** Order the items are returned in the response. */\n        sortBy?: \"floorAskPrice\" | \"tokenId\";\n        sortDirection?: \"asc\" | \"desc\";\n        /** Amount of items returned in response. */\n        limit?: number;\n        /** If true, top bid will be returned in the response. */\n        includeTopBid?: boolean;\n        /** Use continuation token to request next offset of items. */\n        continuation?: string;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getTokensDetailsV4Response\"];\n      };\n    };\n  };\n  /** This API will return the best price of every token in a collection that is currently on sale. Note: Prices are returned in the native currency of the network. */\n  getTokensFloorV1: {\n    parameters: {\n      query: {\n        /** Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        collection?: string;\n        /** Filter to a particular contract. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        contract?: string;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getTokensFloorV1Response\"];\n      };\n    };\n  };\n  /** This API is optimized for quickly fetching a list of tokens ids in by collection, contract, token set id. */\n  getTokensIdsV1: {\n    parameters: {\n      query: {\n        /** Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        collection?: string;\n        /** Filter to a particular contract. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        contract?: string;\n        /** Filter to a particular token set. Example: token:0xa7d8d9ef8d8ce8992df33d8b8cf4aebabd5bd270:129000685 */\n        tokenSetId?: string;\n        /**\n         * -1 = All tokens (default)\n         * 0 = Non flagged tokens\n         * 1 = Flagged tokens\n         */\n        flagStatus?: -1 | 0 | 1;\n        /** Amount of items returned in response. */\n        limit?: number;\n        /** Use continuation token to request next offset of items. */\n        continuation?: string;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getTokensIdsV1Response\"];\n      };\n    };\n  };\n  /** Note: this API is optimized for bulk access, and offers minimal filters/metadata. If you need more flexibility, try the `NFT API > Transfers` endpoint */\n  getTransfersBulkV1: {\n    parameters: {\n      query: {\n        /** Filter to a particular contract. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        contract?: string;\n        /** Filter to a particular token. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123` */\n        token?: string;\n        /** Get events after a particular unix timestamp (inclusive) */\n        startTimestamp?: number;\n        /** Get events before a particular unix timestamp (inclusive) */\n        endTimestamp?: number;\n        /** Amount of items returned in response. */\n        limit?: number;\n        /** Use continuation token to request next offset of items. */\n        continuation?: string;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getTransfersBulkV1Response\"];\n      };\n    };\n  };\n  /** This API can be used to build a feed for a user */\n  getUsersActivityV2: {\n    parameters: {\n      query: {\n        /** Array of users addresses. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        users: string[] | string;\n        /** Amount of items returned in response. */\n        limit?: number;\n        /** Use continuation token to request next offset of items. */\n        continuation?: number;\n        types?:\n          | (\n              | \"sale\"\n              | \"ask\"\n              | \"transfer\"\n              | \"mint\"\n              | \"bid\"\n              | \"bid_cancel\"\n              | \"ask_cancel\"\n            )[]\n          | string;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getUserActivityV2Response\"];\n      };\n    };\n  };\n  /** This API can be used to build a feed for a user */\n  getUsersActivityV3: {\n    parameters: {\n      query: {\n        /** Array of users addresses. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        users: string[] | string;\n        /** Amount of items returned in response. */\n        limit?: number;\n        /** Order the items are returned in the response, eventTimestamp = The blockchain event time, createdAt - The time in which event was recorded */\n        sortBy?: \"eventTimestamp\" | \"createdAt\";\n        /** Use continuation token to request next offset of items. */\n        continuation?: string;\n        types?:\n          | (\n              | \"sale\"\n              | \"ask\"\n              | \"transfer\"\n              | \"mint\"\n              | \"bid\"\n              | \"bid_cancel\"\n              | \"ask_cancel\"\n            )[]\n          | string;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getUserActivityV3Response\"];\n      };\n    };\n  };\n  /** This API can be used to build a feed for a user */\n  getUsersActivityV4: {\n    parameters: {\n      query: {\n        /** Array of users addresses. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        users: string[] | string;\n        collection?: string;\n        /** Filter to a particular collection set. */\n        collectionsSetId?: string;\n        /** Filter to a particular community. Example: `artblocks` */\n        community?: string;\n        /** Amount of items returned in response. If `includeMetadata=true` max limit is 20, otherwise max limit is 1,000. */\n        limit?: number;\n        /** Order the items are returned in the response, eventTimestamp = The blockchain event time, createdAt - The time in which event was recorded */\n        sortBy?: \"eventTimestamp\" | \"createdAt\";\n        /** If true, metadata is included in the response. */\n        includeMetadata?: boolean;\n        /** Use continuation token to request next offset of items. */\n        continuation?: string;\n        types?:\n          | (\n              | \"sale\"\n              | \"ask\"\n              | \"transfer\"\n              | \"mint\"\n              | \"bid\"\n              | \"bid_cancel\"\n              | \"ask_cancel\"\n            )[]\n          | string;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getUserActivityV4Response\"];\n      };\n    };\n  };\n  /** This API can be used to build a feed for a user */\n  getUsersActivityV5: {\n    parameters: {\n      query: {\n        /** Array of users addresses. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        users: string[] | string;\n        collection?: string[] | string;\n        /** Filter to a particular collection set. */\n        collectionsSetId?: string;\n        /** Filter to a particular contracts set. */\n        contractsSetId?: string;\n        /** Filter to a particular community. Example: `artblocks` */\n        community?: string;\n        /** Amount of items returned in response. If `includeMetadata=true` max limit is 20, otherwise max limit is 1,000. */\n        limit?: number;\n        /** Order the items are returned in the response, eventTimestamp = The blockchain event time, createdAt - The time in which event was recorded */\n        sortBy?: \"eventTimestamp\" | \"createdAt\";\n        /** If true, metadata is included in the response. */\n        includeMetadata?: boolean;\n        /** Use continuation token to request next offset of items. */\n        continuation?: string;\n        types?:\n          | (\n              | \"sale\"\n              | \"ask\"\n              | \"transfer\"\n              | \"mint\"\n              | \"bid\"\n              | \"bid_cancel\"\n              | \"ask_cancel\"\n            )[]\n          | string;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getUserActivityV5Response\"];\n      };\n    };\n  };\n  getCollectionsCollectionAttributesV1: {\n    parameters: {\n      path: {\n        /** Filter to a particular collection, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        collection: string;\n      };\n      query: {\n        attributeKey?: string;\n        sortBy?: \"floorAskPrice\" | \"topBidValue\";\n        offset?: number;\n        limit?: number;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getCollectionAttributesV1Response\"];\n      };\n    };\n  };\n  /** This API can be used to build a feed for a collection */\n  getCollectionsCollectionActivityV2: {\n    parameters: {\n      path: {\n        /** Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        collection: string;\n      };\n      query: {\n        /** Amount of items returned in response. If `includeMetadata=true` max limit is 20, otherwise max limit is 1,000. */\n        limit?: number;\n        /** Order the items are returned in the response, eventTimestamp = The blockchain event time, createdAt - The time in which event was recorded */\n        sortBy?: \"eventTimestamp\" | \"createdAt\";\n        /** Use continuation token to request next offset of items. */\n        continuation?: string;\n        /** If true, metadata is included in the response. */\n        includeMetadata?: boolean;\n        types?:\n          | (\n              | \"sale\"\n              | \"ask\"\n              | \"transfer\"\n              | \"mint\"\n              | \"bid\"\n              | \"bid_cancel\"\n              | \"ask_cancel\"\n            )[]\n          | string;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getCollectionActivityV2Response\"];\n      };\n    };\n  };\n  /** This API can be used to build a feed for a collection */\n  getCollectionsCollectionActivityV1: {\n    parameters: {\n      path: {\n        /** Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        collection: string;\n      };\n      query: {\n        /** Amount of items returned in response. */\n        limit?: number;\n        /** Use continuation token to request next offset of items. */\n        continuation?: number;\n        types?:\n          | (\n              | \"sale\"\n              | \"ask\"\n              | \"transfer\"\n              | \"mint\"\n              | \"bid\"\n              | \"bid_cancel\"\n              | \"ask_cancel\"\n            )[]\n          | string;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getUserActivityV2Response\"];\n      };\n    };\n  };\n  /** This API can be used to build a feed for a collection */\n  getCollectionsCollectionActivityV3: {\n    parameters: {\n      path: {\n        /** Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        collection: string;\n      };\n      query: {\n        /** Amount of items returned in response. If `includeMetadata=true` max limit is 20, otherwise max limit is 1,000. */\n        limit?: number;\n        /** Order the items are returned in the response, eventTimestamp = The blockchain event time, createdAt - The time in which event was recorded */\n        sortBy?: \"eventTimestamp\" | \"createdAt\";\n        /** Use continuation token to request next offset of items. */\n        continuation?: string;\n        /** If true, metadata is included in the response. */\n        includeMetadata?: boolean;\n        types?:\n          | (\n              | \"sale\"\n              | \"ask\"\n              | \"transfer\"\n              | \"mint\"\n              | \"bid\"\n              | \"bid_cancel\"\n              | \"ask_cancel\"\n            )[]\n          | string;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getCollectionActivityV3Response\"];\n      };\n    };\n  };\n  /** When users are placing collection or trait bids, this API can be used to show them where the bid is in the context of other bids, and how many tokens it will be the top bid for. */\n  getCollectionsCollectionTopbidsV1: {\n    parameters: {\n      path: {\n        /** Filter to a particular collection, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        collection: string;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getCollectionTopBidsV1Response\"];\n      };\n    };\n  };\n  /** This API can be used to show what the distribution of owners in a collection looks like. */\n  getCollectionsCollectionOwnersdistributionV1: {\n    parameters: {\n      path: {\n        /** Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        collection: string;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getCollectionOwnersDistributionV1Response\"];\n      };\n    };\n  };\n  /** This API can be used to show what the distribution of owners in a collections set looks like. */\n  getCollectionssetsCollectionssetidOwnersdistributionV1: {\n    parameters: {\n      path: {\n        /** Filter to a particular collections set. */\n        collectionsSetId: string;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getCollectionOwnersDistributionV1Response\"];\n      };\n    };\n  };\n  /**\n   * Every time the floor price of a collection changes (i.e. the 'floor ask'), an event is generated. This API is designed to be polled at high frequency, in order to keep an external system in sync with accurate prices for any token.\n   *\n   * There are multiple event types, which describe what caused the change in price:\n   *\n   * - `new-order` > new listing at a lower price\n   *\n   * - `expiry` > the previous best listing expired\n   *\n   * - `sale` > the previous best listing was filled\n   *\n   * - `cancel` > the previous best listing was cancelled\n   *\n   * - `balance-change` > the best listing was invalidated due to no longer owning the NFT\n   *\n   * - `approval-change` > the best listing was invalidated due to revoked approval\n   *\n   * - `revalidation` > manual revalidation of orders (e.g. after a bug fixed)\n   *\n   * - `reprice` > price update for dynamic orders (e.g. dutch auctions)\n   *\n   * - `bootstrap` > initial loading of data, so that all tokens have a price associated\n   *\n   * Some considerations to keep in mind\n   *\n   * - Due to the complex nature of monitoring off-chain liquidity across multiple marketplaces, including dealing with block re-orgs, events should be considered 'relative' to the perspective of the indexer, ie _when they were discovered_, rather than _when they happened_. A more deterministic historical record of price changes is in development, but in the meantime, this method is sufficent for keeping an external system in sync with the best available prices.\n   *\n   * - Events are only generated if the best price changes. So if a new order or sale happens without changing the best price, no event is generated. This is more common with 1155 tokens, which have multiple owners and more depth. For this reason, if you need sales data, use the Sales API.\n   */\n  getEventsCollectionsFlooraskV1: {\n    parameters: {\n      query: {\n        /** Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        collection?: string;\n        /** Get events after a particular unix timestamp (inclusive) */\n        startTimestamp?: number;\n        /** Get events before a particular unix timestamp (inclusive) */\n        endTimestamp?: number;\n        /** If true, prices will include missing royalties to be added on-top. */\n        normalizeRoyalties?: boolean;\n        /** If true, will exclude floor asks on flagged tokens. (only supported when `normalizeRoyalties` is false) */\n        excludeFlaggedTokens?: boolean;\n        /** Order the items are returned in the response. */\n        sortDirection?: \"asc\" | \"desc\";\n        /** Use continuation token to request next offset of items. */\n        continuation?: string;\n        /** Amount of items returned in response. */\n        limit?: number;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getCollectionsFloorAskV1Response\"];\n      };\n    };\n  };\n  /** Every time the top offer of a collection changes (i.e. the 'top bid'), an event is generated. This API is designed to be polled at high frequency. */\n  getEventsCollectionsTopbidV1: {\n    parameters: {\n      query: {\n        /** Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        collection?: string;\n        /** Get events after a particular unix timestamp (inclusive) */\n        startTimestamp?: number;\n        /** Get events before a particular unix timestamp (inclusive) */\n        endTimestamp?: number;\n        /** Order the items are returned in the response. */\n        sortDirection?: \"asc\" | \"desc\";\n        /** Use continuation token to request next offset of items. */\n        continuation?: string;\n        /** Amount of items returned in response. */\n        limit?: number;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getCollectionsTopbidV1Response\"];\n      };\n    };\n  };\n  /** Every time the top offer of a collection changes (i.e. the 'top bid'), an event is generated. This API is designed to be polled at high frequency. */\n  getEventsCollectionsTopbidV2: {\n    parameters: {\n      query: {\n        /** Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        collection?: string;\n        /** Get events after a particular unix timestamp (inclusive) */\n        startTimestamp?: number;\n        /** Get events before a particular unix timestamp (inclusive) */\n        endTimestamp?: number;\n        /** Order the items are returned in the response. */\n        sortDirection?: \"asc\" | \"desc\";\n        /** Use continuation token to request next offset of items. */\n        continuation?: string;\n        /** Amount of items returned in response. */\n        limit?: number;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getCollectionsTopbidV2Response\"];\n      };\n    };\n  };\n  /**\n   * Every time the best price of a token changes (i.e. the 'floor ask'), an event is generated. This API is designed to be polled at high frequency, in order to keep an external system in sync with accurate prices for any token.\n   *\n   * There are multiple event types, which describe what caused the change in price:\n   *\n   * - `new-order` > new listing at a lower price\n   *\n   * - `expiry` > the previous best listing expired\n   *\n   * - `sale` > the previous best listing was filled\n   *\n   * - `cancel` > the previous best listing was cancelled\n   *\n   * - `balance-change` > the best listing was invalidated due to no longer owning the NFT\n   *\n   * - `approval-change` > the best listing was invalidated due to revoked approval\n   *\n   * - `revalidation` > manual revalidation of orders (e.g. after a bug fixed)\n   *\n   * - `reprice` > price update for dynamic orders (e.g. dutch auctions)\n   *\n   * - `bootstrap` > initial loading of data, so that all tokens have a price associated\n   *\n   * Some considerations to keep in mind\n   *\n   * - Due to the complex nature of monitoring off-chain liquidity across multiple marketplaces, including dealing with block re-orgs, events should be considered 'relative' to the perspective of the indexer, ie _when they were discovered_, rather than _when they happened_. A more deterministic historical record of price changes is in development, but in the meantime, this method is sufficent for keeping an external system in sync with the best available prices.\n   *\n   * - Events are only generated if the best price changes. So if a new order or sale happens without changing the best price, no event is generated. This is more common with 1155 tokens, which have multiple owners and more depth. For this reason, if you need sales data, use the Sales API.\n   */\n  getEventsTokensFlooraskV2: {\n    parameters: {\n      query: {\n        contract?: string;\n        /** Filter to a particular token, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123` */\n        token?: string;\n        /** Get events after a particular unix timestamp (inclusive) */\n        startTimestamp?: number;\n        /** Get events before a particular unix timestamp (inclusive) */\n        endTimestamp?: number;\n        sortDirection?: \"asc\" | \"desc\";\n        continuation?: string;\n        limit?: number;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getTokensFloorAskV2Response\"];\n      };\n    };\n  };\n  /**\n   * Every time the best price of a token changes (i.e. the 'floor ask'), an event is generated. This API is designed to be polled at high frequency, in order to keep an external system in sync with accurate prices for any token.\n   *\n   * There are multiple event types, which describe what caused the change in price:\n   *\n   * - `new-order` > new listing at a lower price\n   *\n   * - `expiry` > the previous best listing expired\n   *\n   * - `sale` > the previous best listing was filled\n   *\n   * - `cancel` > the previous best listing was cancelled\n   *\n   * - `balance-change` > the best listing was invalidated due to no longer owning the NFT\n   *\n   * - `approval-change` > the best listing was invalidated due to revoked approval\n   *\n   * - `revalidation` > manual revalidation of orders (e.g. after a bug fixed)\n   *\n   * - `reprice` > price update for dynamic orders (e.g. dutch auctions)\n   *\n   * - `bootstrap` > initial loading of data, so that all tokens have a price associated\n   *\n   * Some considerations to keep in mind\n   *\n   * - Due to the complex nature of monitoring off-chain liquidity across multiple marketplaces, including dealing with block re-orgs, events should be considered 'relative' to the perspective of the indexer, ie _when they were discovered_, rather than _when they happened_. A more deterministic historical record of price changes is in development, but in the meantime, this method is sufficent for keeping an external system in sync with the best available prices.\n   *\n   * - Events are only generated if the best price changes. So if a new order or sale happens without changing the best price, no event is generated. This is more common with 1155 tokens, which have multiple owners and more depth. For this reason, if you need sales data, use the Sales API.\n   */\n  getEventsTokensFlooraskV3: {\n    parameters: {\n      query: {\n        contract?: string;\n        /** Filter to a particular token, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123` */\n        token?: string;\n        /** Get events after a particular unix timestamp (inclusive) */\n        startTimestamp?: number;\n        /** Get events before a particular unix timestamp (inclusive) */\n        endTimestamp?: number;\n        sortDirection?: \"asc\" | \"desc\";\n        /** If true, prices will include missing royalties to be added on-top. */\n        normalizeRoyalties?: boolean;\n        continuation?: string;\n        limit?: number;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getTokensFloorAskV3Response\"];\n      };\n    };\n  };\n  /** Get a signed message of any collection's floor price (spot or twap). The oracle's address is 0x32dA57E736E05f75aa4FaE2E9Be60FD904492726. */\n  getOracleCollectionsFlooraskV4: {\n    parameters: {\n      query: {\n        kind?: \"spot\" | \"twap\" | \"lower\" | \"upper\";\n        currency?: string;\n        twapSeconds?: number;\n        eip3668Calldata?: string;\n        collection?: string;\n        token?: string;\n        /** If true, will use the collection non flagged floor ask events. */\n        useNonFlaggedFloorAsk?: boolean;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getCollectionFloorAskOracleV4Response\"];\n      };\n    };\n  };\n  /** Get a signed message of any collection's floor price (spot or twap). The oracle's address is 0xAeB1D03929bF87F69888f381e73FBf75753d75AF. */\n  getOracleCollectionsFlooraskV5: {\n    parameters: {\n      query: {\n        kind?: \"spot\" | \"twap\" | \"lower\" | \"upper\";\n        currency?: string;\n        twapSeconds?: number;\n        eip3668Calldata?: string;\n        collection?: string;\n        token?: string;\n        /** If true, will use the collection non flagged floor ask events. */\n        useNonFlaggedFloorAsk?: boolean;\n        signer?:\n          | \"0x32da57e736e05f75aa4fae2e9be60fd904492726\"\n          | \"0xaeb1d03929bf87f69888f381e73fbf75753d75af\";\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getCollectionFloorAskOracleV4Response\"];\n      };\n    };\n  };\n  /** Get a signed message of any collection's top bid price (spot or twap). The oracle's address is 0x32dA57E736E05f75aa4FaE2E9Be60FD904492726. */\n  getOracleCollectionsTopbidV1: {\n    parameters: {\n      query: {\n        kind?: \"spot\" | \"twap\" | \"lower\" | \"upper\";\n        currency?: string;\n        twapSeconds?: number;\n        collection?: string;\n        token?: string;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getCollectionTopBidOracleV1Response\"];\n      };\n    };\n  };\n  /** Get a signed message of any collection's top bid price (spot or twap). The oracle's address is 0xAeB1D03929bF87F69888f381e73FBf75753d75AF. */\n  getOracleCollectionsTopbidV2: {\n    parameters: {\n      query: {\n        kind?: \"spot\" | \"twap\" | \"lower\" | \"upper\";\n        currency?: string;\n        twapSeconds?: number;\n        collection?: string;\n        token?: string;\n        signer?:\n          | \"0x32da57e736e05f75aa4fae2e9be60fd904492726\"\n          | \"0xaeb1d03929bf87f69888f381e73fbf75753d75af\";\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getCollectionTopBidOracleV1Response\"];\n      };\n    };\n  };\n  /** Get a signed message of a token's details (flagged status and last transfer time). The oracle's address is 0x32dA57E736E05f75aa4FaE2E9Be60FD904492726. */\n  getOracleTokensStatusV1: {\n    parameters: {\n      query: {\n        tokens: string[] | string;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getTokenStatusOracleV1Response\"];\n      };\n    };\n  };\n  /** Get a signed message of a token's details (flagged status and last transfer time). The oracle's address is 0xAeB1D03929bF87F69888f381e73FBf75753d75AF. */\n  getOracleTokensStatusV2: {\n    parameters: {\n      query: {\n        tokens: string[] | string;\n        signer?:\n          | \"0x32da57e736e05f75aa4fae2e9be60fd904492726\"\n          | \"0xaeb1d03929bf87f69888f381e73fbf75753d75af\";\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getTokenStatusOracleV1Response\"];\n      };\n    };\n  };\n  /** This API return the recent flagged/un-flagged tokens across all collections sorted by change time */\n  getTokensFlagChangesV1: {\n    parameters: {\n      query: {\n        /**\n         * -1 = All tokens (default)\n         * 0 = Non flagged tokens\n         * 1 = Flagged tokens\n         */\n        flagStatus?: -1 | 0 | 1;\n        /** Amount of items returned in response. */\n        limit?: number;\n        /** Use continuation token to request next offset of items. */\n        continuation?: string;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getFlaggedTokensV1Response\"];\n      };\n    };\n  };\n  /** This API can be used to build a feed for a token */\n  getTokensTokenActivityV3: {\n    parameters: {\n      path: {\n        /** Filter to a particular token. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123` */\n        token: string;\n      };\n      query: {\n        /** Amount of items returned in response. */\n        limit?: number;\n        /** Order the items are returned in the response, eventTimestamp = The blockchain event time, createdAt - The time in which event was recorded */\n        sortBy?: \"eventTimestamp\" | \"createdAt\";\n        /** If true, metadata is included in the response. */\n        includeMetadata?: boolean;\n        /** Use continuation token to request next offset of items. */\n        continuation?: string;\n        types?:\n          | (\n              | \"sale\"\n              | \"ask\"\n              | \"transfer\"\n              | \"mint\"\n              | \"bid\"\n              | \"bid_cancel\"\n              | \"ask_cancel\"\n            )[]\n          | string;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getCollectionActivityV4Response\"];\n      };\n    };\n  };\n  /** This API can be used to build a feed for a token */\n  getTokensTokenActivityV1: {\n    parameters: {\n      path: {\n        /** Filter to a particular token. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123` */\n        token: string;\n      };\n      query: {\n        /** Amount of items returned in response. */\n        limit?: number;\n        /** Use continuation token to request next offset of items. */\n        continuation?: number;\n        types?:\n          | (\n              | \"sale\"\n              | \"ask\"\n              | \"transfer\"\n              | \"mint\"\n              | \"bid\"\n              | \"bid_cancel\"\n              | \"ask_cancel\"\n            )[]\n          | string;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getUserActivityV2Response\"];\n      };\n    };\n  };\n  /** This API can be used to build a feed for a token */\n  getTokensTokenActivityV2: {\n    parameters: {\n      path: {\n        /** Filter to a particular token. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123` */\n        token: string;\n      };\n      query: {\n        /** Amount of items returned in response. */\n        limit?: number;\n        /** Order the items are returned in the response, eventTimestamp = The blockchain event time, createdAt - The time in which event was recorded */\n        sortBy?: \"eventTimestamp\" | \"createdAt\";\n        /** Use continuation token to request next offset of items. */\n        continuation?: string;\n        types?:\n          | (\n              | \"sale\"\n              | \"ask\"\n              | \"transfer\"\n              | \"mint\"\n              | \"bid\"\n              | \"bid_cancel\"\n              | \"ask_cancel\"\n            )[]\n          | string;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getCollectionActivityV2Response\"];\n      };\n    };\n  };\n  /** This API can be used to build a feed for a token */\n  getTokensTokenActivityV4: {\n    parameters: {\n      path: {\n        /** Filter to a particular token. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123` */\n        token: string;\n      };\n      query: {\n        /** Amount of items returned in response. */\n        limit?: number;\n        /** Order the items are returned in the response, eventTimestamp = The blockchain event time, createdAt - The time in which event was recorded */\n        sortBy?: \"eventTimestamp\" | \"createdAt\";\n        /** If true, metadata is included in the response. */\n        includeMetadata?: boolean;\n        /** Use continuation token to request next offset of items. */\n        continuation?: string;\n        types?:\n          | (\n              | \"sale\"\n              | \"ask\"\n              | \"transfer\"\n              | \"mint\"\n              | \"bid\"\n              | \"bid_cancel\"\n              | \"ask_cancel\"\n            )[]\n          | string;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getCollectionActivityV5Response\"];\n      };\n    };\n  };\n  /** Get a boolean response on whether a particular transaction was synced or not. */\n  getTransactionsTxhashSyncedV1: {\n    parameters: {\n      path: {\n        txHash: string;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getTransactionSyncedV1Response\"];\n      };\n    };\n  };\n  /** Get tokens held by a user, along with ownership information such as associated orders and date acquired. */\n  getUsersUserTokensV6: {\n    parameters: {\n      path: {\n        /** Filter to a particular user. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00` */\n        user: string;\n      };\n      query: {\n        /** Filter to a particular community, e.g. `artblocks` */\n        community?: string;\n        /** Filter to a particular collection set. */\n        collectionsSetId?: string;\n        /** Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        collection?: string;\n        /** Filter to a particular contract, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        contract?: string;\n        /** Array of tokens. Example: `tokens[0]: 0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:704 tokens[1]: 0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:979` */\n        tokens?: string[] | string;\n        /** If true, prices will include missing royalties to be added on-top. */\n        normalizeRoyalties?: boolean;\n        /** Order the items are returned in the response. */\n        sortDirection?: \"asc\" | \"desc\";\n        /** Use continuation token to request next offset of items. */\n        continuation?: string;\n        /** Amount of items returned in response. */\n        limit?: number;\n        /** If true, top bid will be returned in the response. */\n        includeTopBid?: boolean;\n        /** If true, will return the collection non flagged floor ask. */\n        useNonFlaggedFloorAsk?: boolean;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getUserTokensV6Response\"];\n      };\n    };\n  };\n  /** Get tokens held by a user, along with ownership information such as associated orders and date acquired. */\n  getUsersUserTokensV4: {\n    parameters: {\n      path: {\n        /** Filter to a particular user. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00` */\n        user: string;\n      };\n      query: {\n        /** Filter to a particular community, e.g. `artblocks` */\n        community?: string;\n        /** Filter to a particular collection set. */\n        collectionsSetId?: string;\n        /** Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        collection?: string;\n        /** Filter to a particular contract, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        contract?: string;\n        /** Order the items are returned in the response. */\n        sortBy?: \"acquiredAt\";\n        /** Order the items are returned in the response. */\n        sortDirection?: \"asc\" | \"desc\";\n        /** Use offset to request the next batch of items. */\n        offset?: number;\n        /** Amount of items returned in response. */\n        limit?: number;\n        /** If true, top bid will be returned in the response. */\n        includeTopBid?: boolean;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getUserTokensV4Response\"];\n      };\n    };\n  };\n  /** Get tokens held by a user, along with ownership information such as associated orders and date acquired. */\n  getUsersUserTokensV2: {\n    parameters: {\n      path: {\n        /** Filter to a particular user. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00` */\n        user: string;\n      };\n      query: {\n        /** Filter to a particular community, e.g. `artblocks` */\n        community?: string;\n        /** Filter to a particular collection set. */\n        collectionsSetId?: string;\n        /** Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        collection?: string;\n        /** Filter to a particular contract, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        contract?: string;\n        /** Order the items are returned in the response. */\n        sortBy?: \"acquiredAt\";\n        /** Order the items are returned in the response. */\n        sortDirection?: \"asc\" | \"desc\";\n        /** Use offset to request the next batch of items. */\n        offset?: number;\n        /** Amount of items returned in response. */\n        limit?: number;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getUserTokensV2Response\"];\n      };\n    };\n  };\n  /** Get aggregate user liquidity, grouped by collection. Useful for showing a summary of liquidity being provided (orders made). */\n  getUsersUserPositionsV1: {\n    parameters: {\n      path: {\n        /** Wallet to see results for e.g. `0xf296178d553c8ec21a2fbd2c5dda8ca9ac905a00` */\n        user: string;\n      };\n      query: {\n        side: \"buy\" | \"sell\";\n        status: \"valid\" | \"invalid\";\n        offset?: number;\n        limit?: number;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getUserPositionsV1Response\"];\n      };\n    };\n  };\n  /** Get aggregate stats for a user, grouped by collection. Useful for showing total portfolio information. */\n  getUsersUserCollectionsV1: {\n    parameters: {\n      path: {\n        /** Wallet to see results for e.g. `0xf296178d553c8ec21a2fbd2c5dda8ca9ac905a00` */\n        user: string;\n      };\n      query: {\n        /** Filter to a particular community, e.g. `artblocks` */\n        community?: string;\n        /** Filter to a particular collection, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        collection?: string;\n        offset?: number;\n        limit?: number;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getUserCollectionsV1Response\"];\n      };\n    };\n  };\n  /** This API can be used to build a feed for a user */\n  getUsersUserActivityV1: {\n    parameters: {\n      path: {\n        /** Filter to a particular user. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00` */\n        user: string;\n      };\n      query: {\n        /** Amount of items returned in response. */\n        limit?: number;\n        /** Use continuation token to request next offset of items. */\n        continuation?: number;\n        types?:\n          | (\n              | \"sale\"\n              | \"ask\"\n              | \"transfer\"\n              | \"mint\"\n              | \"bid\"\n              | \"bid_cancel\"\n              | \"ask_cancel\"\n            )[]\n          | string;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getUserActivityV1Response\"];\n      };\n    };\n  };\n  /** Get aggregate stats for a user, grouped by collection. Useful for showing total portfolio information. */\n  getUsersUserCollectionsV2: {\n    parameters: {\n      path: {\n        /** Filter to a particular user. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00` */\n        user: string;\n      };\n      query: {\n        /** Filter to a particular community. Example: `artblocks` */\n        community?: string;\n        /** Filter to a particular collection set. */\n        collectionsSetId?: string;\n        /** Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        collection?: string;\n        /** If true, top bid will be returned in the response. */\n        includeTopBid?: boolean;\n        /** If true, number of tokens with bids will be returned in the response. */\n        includeLiquidCount?: boolean;\n        /** Use offset to request the next batch of items. */\n        offset?: number;\n        /** Amount of items returned in response. */\n        limit?: number;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getUserCollectionsV2Response\"];\n      };\n    };\n  };\n  /** Get tokens held by a user, along with ownership information such as associated orders and date acquired. */\n  getUsersUserTokensV1: {\n    parameters: {\n      path: {\n        user: string;\n      };\n      query: {\n        /** Filter to a particular community, e.g. `artblocks` */\n        community?: string;\n        /** Filter to a particular collection, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        collection?: string;\n        /** Filter to a particular contract, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        contract?: string;\n        hasOffer?: boolean;\n        sortBy?: \"topBuyValue\";\n        sortDirection?: \"asc\" | \"desc\";\n        offset?: number;\n        limit?: number;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getUserTokensV1Response\"];\n      };\n    };\n  };\n  /** Get tokens held by a user, along with ownership information such as associated orders and date acquired. */\n  getUsersUserTokensV3: {\n    parameters: {\n      path: {\n        /** Filter to a particular user. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00` */\n        user: string;\n      };\n      query: {\n        /** Filter to a particular community, e.g. `artblocks` */\n        community?: string;\n        /** Filter to a particular collection set. */\n        collectionsSetId?: string;\n        /** Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        collection?: string;\n        /** Filter to a particular contract, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        contract?: string;\n        /** Order the items are returned in the response. */\n        sortBy?: \"acquiredAt\";\n        /** Order the items are returned in the response. */\n        sortDirection?: \"asc\" | \"desc\";\n        /** Use offset to request the next batch of items. */\n        offset?: number;\n        /** Amount of items returned in response. */\n        limit?: number;\n        /** If true, top bid will be returned in the response. */\n        includeTopBid?: boolean;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getUserTokensV3Response\"];\n      };\n    };\n  };\n  /** Get tokens held by a user, along with ownership information such as associated orders and date acquired. */\n  getUsersUserTokensV5: {\n    parameters: {\n      path: {\n        /** Filter to a particular user. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00` */\n        user: string;\n      };\n      query: {\n        /** Filter to a particular community, e.g. `artblocks` */\n        community?: string;\n        /** Filter to a particular collection set. */\n        collectionsSetId?: string;\n        /** Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        collection?: string;\n        /** Filter to a particular contract, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        contract?: string;\n        /** Array of tokens. Example: `tokens[0]: 0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:704 tokens[1]: 0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:979` */\n        tokens?: string[] | string;\n        /** If true, prices will include missing royalties to be added on-top. */\n        normalizeRoyalties?: boolean;\n        /** Order the items are returned in the response. */\n        sortBy?: \"acquiredAt\";\n        /** Order the items are returned in the response. */\n        sortDirection?: \"asc\" | \"desc\";\n        /** Use offset to request the next batch of items. */\n        offset?: number;\n        /** Amount of items returned in response. */\n        limit?: number;\n        /** If true, top bid will be returned in the response. */\n        includeTopBid?: boolean;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getUserTokensV5Response\"];\n      };\n    };\n  };\n  /** Get detailed aggregate about attributes in a collection, attribute floors */\n  getCollectionsCollectionAttributesExploreV4: {\n    parameters: {\n      path: {\n        /** Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        collection: string;\n      };\n      query: {\n        /** If true, top bid will be returned in the response. */\n        includeTopBid?: boolean;\n        /** If true, range traits will be excluded from the response. */\n        excludeRangeTraits?: boolean;\n        /** If true, number traits will be excluded from the response. */\n        excludeNumberTraits?: boolean;\n        /** Filter to a particular attribute key. Example: `Composition` */\n        attributeKey?: string;\n        /** Max number of items returned in the response. */\n        maxFloorAskPrices?: number;\n        /** Max number of items returned in the response. */\n        maxLastSells?: number;\n        /** Use continuation token to request next offset of items. */\n        continuation?: string;\n        /** Amount of items returned in response. */\n        limit?: number;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getAttributesExploreV4Response\"];\n      };\n    };\n  };\n  /** Get detailed aggregate about attributes in a collection, attribute floors */\n  getCollectionsCollectionAttributesExploreV2: {\n    parameters: {\n      path: {\n        /** Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        collection: string;\n      };\n      query: {\n        /** Filter to a particular attribute key. Example: `Composition` */\n        attributeKey?: string;\n        /** Max number of items returned in the response. */\n        maxFloorAskPrices?: number;\n        /** Max number of items returned in the response. */\n        maxLastSells?: number;\n        /** Order the items are returned in the response. */\n        sortBy?: \"floorAskPrice\" | \"topBidValue\";\n        /** Use offset to request the next batch of items. */\n        offset?: number;\n        /** Amount of items returned in response. */\n        limit?: number;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getAttributesExploreV2Response\"];\n      };\n    };\n  };\n  getCollectionsCollectionAttributesAllV2: {\n    parameters: {\n      path: {\n        /** Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        collection: string;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getAttributesAllV2Response\"];\n      };\n    };\n  };\n  getCollectionsCollectionAttributesAllV1: {\n    parameters: {\n      path: {\n        /** Filter to a particular collection, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        collection: string;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getAttributesV1Response\"];\n      };\n    };\n  };\n  getCollectionsCollectionAttributesStaticV1: {\n    parameters: {\n      path: {\n        /** Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        collection: string;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getAttributesStaticV1Response\"];\n      };\n    };\n  };\n  getCollectionsCollectionAttributesExploreV1: {\n    parameters: {\n      path: {\n        /** Filter to a particular collection, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        collection: string;\n      };\n      query: {\n        /** Filter to a particular attribute key, e.g. `Composition` */\n        attributeKey?: string;\n        sortBy?: \"floorAskPrice\" | \"topBidValue\";\n        offset?: number;\n        limit?: number;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getCollectionAttributesV1Response\"];\n      };\n    };\n  };\n  /** Get detailed aggregate about attributes in a collection, attribute floors */\n  getCollectionsCollectionAttributesExploreV3: {\n    parameters: {\n      path: {\n        /** Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        collection: string;\n      };\n      query: {\n        /** If true, top bid will be returned in the response. */\n        includeTopBid?: boolean;\n        /** Filter to a particular attribute key. Example: `Composition` */\n        attributeKey?: string;\n        /** Max number of items returned in the response. */\n        maxFloorAskPrices?: number;\n        /** Max number of items returned in the response. */\n        maxLastSells?: number;\n        /** Order the items are returned in the response. */\n        sortBy?: \"floorAskPrice\" | \"topBidValue\";\n        /** Use offset to request the next batch of items. */\n        offset?: number;\n        /** Amount of items returned in response. */\n        limit?: number;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getAttributesExploreV3Response\"];\n      };\n    };\n  };\n  /** Get a signed message of any collection's floor price (spot or twap). The oracle's address is 0x32dA57E736E05f75aa4FaE2E9Be60FD904492726. */\n  getOracleCollectionsCollectionFlooraskV2: {\n    parameters: {\n      path: {\n        collection: string;\n      };\n      query: {\n        kind?: \"spot\" | \"twap\" | \"lower\" | \"upper\";\n        currency?: string;\n        twapHours?: number;\n        eip3668Calldata?: string;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getCollectionFloorAskOracleV4Response\"];\n      };\n    };\n  };\n  /** Get a signed message of any collection's floor price (spot or twap). The oracle's address is 0x32dA57E736E05f75aa4FaE2E9Be60FD904492726. */\n  getOracleCollectionsCollectionFlooraskV1: {\n    parameters: {\n      path: {\n        collection: string;\n      };\n      query: {\n        kind?: \"spot\" | \"twap\" | \"lower\" | \"upper\";\n        currency?: string;\n        twapHours?: number;\n        eip3668Calldata?: string;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getCollectionFloorAskOracleV4Response\"];\n      };\n    };\n  };\n  /** Get a signed message of any collection's floor price (spot or twap). The oracle's address is 0x32dA57E736E05f75aa4FaE2E9Be60FD904492726. */\n  getOracleCollectionsCollectionFlooraskV3: {\n    parameters: {\n      path: {\n        collection: string;\n      };\n      query: {\n        kind?: \"spot\" | \"twap\" | \"lower\" | \"upper\";\n        currency?: string;\n        twapSeconds?: number;\n        eip3668Calldata?: string;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getCollectionFloorAskOracleV4Response\"];\n      };\n    };\n  };\n  /** Return the top bids for the given user tokens */\n  getOrdersUsersUserTopbidsV2: {\n    parameters: {\n      path: {\n        /** Filter to a particular user. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00` */\n        user: string;\n      };\n      query: {\n        collection?: string;\n        /** Filter to a particular community. Example: `artblocks` */\n        community?: string;\n        /** If true, urls will only be returned for optimized sources that support royalties. */\n        optimizeCheckoutURL?: boolean;\n        /** If true, criteria metadata is included in the response. */\n        includeCriteriaMetadata?: boolean;\n        /** If true, prices will include missing royalties to be added on-top. */\n        normalizeRoyalties?: boolean;\n        /** If true, will return the collection non flagged floor ask events. */\n        useNonFlaggedFloorAsk?: boolean;\n        /** Use continuation token to request next offset of items. */\n        continuation?: string;\n        /** Order of the items are returned in the response. */\n        sortBy?:\n          | \"topBidValue\"\n          | \"dateCreated\"\n          | \"orderExpiry\"\n          | \"floorDifferencePercentage\";\n        sortDirection?: \"asc\" | \"desc\";\n        /** Amount of items returned in response. */\n        limit?: number;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getUserTopBidsV2Response\"];\n      };\n    };\n  };\n  /** Return the top bids for the given user tokens */\n  getOrdersUsersUserTopbidsV1: {\n    parameters: {\n      path: {\n        /** Filter to a particular user. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00` */\n        user: string;\n      };\n      query: {\n        collection?: string;\n        /** Filter to a particular community. Example: `artblocks` */\n        community?: string;\n        /** If true, urls will only be returned for optimized sources that support royalties. */\n        optimizeCheckoutURL?: boolean;\n        /** If true, prices will include missing royalties to be added on-top. */\n        normalizeRoyalties?: boolean;\n        /** Use continuation token to request next offset of items. */\n        continuation?: string;\n        /** Order of the items are returned in the response. */\n        sortBy?:\n          | \"topBidValue\"\n          | \"dateCreated\"\n          | \"orderExpiry\"\n          | \"floorDifferencePercentage\";\n        sortDirection?: \"asc\" | \"desc\";\n        /** Amount of items returned in response. */\n        limit?: number;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getUserTopBidsV1Response\"];\n      };\n    };\n  };\n  /** Return the top bids for the given user tokens */\n  getOrdersUsersUserTopbidsV3: {\n    parameters: {\n      path: {\n        /** Filter to a particular user. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00` */\n        user: string;\n      };\n      query: {\n        collection?: string;\n        /** Filter to a particular contracts set. */\n        contractsSetId?: string;\n        /** Filter to a particular community. Example: `artblocks` */\n        community?: string;\n        /** Filter to a particular collection set. */\n        collectionsSetId?: string;\n        /** If true, urls will only be returned for optimized sources that support royalties. */\n        optimizeCheckoutURL?: boolean;\n        /** If true, criteria metadata is included in the response. */\n        includeCriteriaMetadata?: boolean;\n        /** If true, prices will include missing royalties to be added on-top. */\n        normalizeRoyalties?: boolean;\n        /** If true, will return the collection non flagged floor ask events. */\n        useNonFlaggedFloorAsk?: boolean;\n        /** Use continuation token to request next offset of items. */\n        continuation?: string;\n        /** Order of the items are returned in the response. */\n        sortBy?:\n          | \"topBidValue\"\n          | \"dateCreated\"\n          | \"orderExpiry\"\n          | \"floorDifferencePercentage\";\n        sortDirection?: \"asc\" | \"desc\";\n        /** Amount of items returned in response. */\n        limit?: number;\n        /** Amount of tokens considered. */\n        sampleSize?: number;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getUserTopBidsV3Response\"];\n      };\n    };\n  };\n  getRedirectCollectionsCollectionImageV1: {\n    parameters: {\n      path: {\n        /** Redirect to the given collection image. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        collection: string;\n      };\n    };\n    responses: {\n      /** Successful */\n      default: {\n        schema: string;\n      };\n    };\n  };\n  getRedirectCurrencyAddressIconV1: {\n    parameters: {\n      path: {\n        /** Redirect to the given currency address icon. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` */\n        address: string;\n      };\n    };\n    responses: {\n      /** Successful */\n      default: {\n        schema: string;\n      };\n    };\n  };\n  getRedirectSourcesSourceLogoV2: {\n    parameters: {\n      path: {\n        /** Domain of the source. Example `opensea.io` */\n        source: string;\n      };\n    };\n    responses: {\n      /** Successful */\n      default: {\n        schema: string;\n      };\n    };\n  };\n  getRedirectTokensTokenImageV1: {\n    parameters: {\n      path: {\n        /** Redirect to the given token image. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123` */\n        token: string;\n      };\n    };\n    responses: {\n      /** Successful */\n      default: {\n        schema: string;\n      };\n    };\n  };\n  getRedirectSourcesSourceTokensTokenLinkV2: {\n    parameters: {\n      path: {\n        /** Domain of the source. Example `opensea.io` */\n        source: string;\n        /** Redirect to the given token page. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123` */\n        token: string;\n      };\n    };\n    responses: {\n      /** Successful */\n      default: {\n        schema: string;\n      };\n    };\n  };\n  putCollectionsCollectionCommunityV1: {\n    parameters: {\n      header: {\n        \"x-api-key\": string;\n      };\n      path: {\n        /** Update community for a particular collection, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`. Requires an authorized api key to be passed. */\n        collection: string;\n      };\n      body: {\n        body?: definitions[\"Model265\"];\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"putSetCollectionCommunityV1Response\"];\n      };\n    };\n  };\n  /**\n   * The API key can be used in every route, by setting it as a request header **x-api-key**.\n   *\n   * <a href='https://docs.reservoir.tools/reference/getting-started'>Learn more</a> about API Keys and Rate Limiting\n   */\n  postApikeys: {\n    parameters: {\n      header: {\n        \"x-admin-api-key\": string;\n      };\n      formData: {\n        /** The name of your app */\n        appName: string;\n        /** An e-mail address where you can be reached, in case of issues, to avoid service disruption */\n        email: string;\n        /** The website of your project */\n        website: string;\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getNewApiKeyResponse\"];\n      };\n    };\n  };\n  postAdminCalcrarity: {\n    parameters: {\n      header: {\n        \"x-admin-api-key\": string;\n      };\n      body: {\n        body?: definitions[\"Model266\"];\n      };\n    };\n    responses: {\n      /** Successful */\n      default: {\n        schema: string;\n      };\n    };\n  };\n  postAdminCreateratelimitrule: {\n    parameters: {\n      header: {\n        \"x-admin-api-key\": string;\n      };\n      body: {\n        body?: definitions[\"Model267\"];\n      };\n    };\n    responses: {\n      /** Successful */\n      default: {\n        schema: string;\n      };\n    };\n  };\n  postAdminDeleteratelimitrule: {\n    parameters: {\n      header: {\n        \"x-admin-api-key\": string;\n      };\n      body: {\n        body?: definitions[\"Model268\"];\n      };\n    };\n    responses: {\n      /** Successful */\n      default: {\n        schema: string;\n      };\n    };\n  };\n  postAdminFixblocks: {\n    parameters: {\n      header: {\n        \"x-admin-api-key\": string;\n      };\n      body: {\n        body?: definitions[\"Model269\"];\n      };\n    };\n    responses: {\n      /** Successful */\n      default: {\n        schema: string;\n      };\n    };\n  };\n  postAdminFixcache: {\n    parameters: {\n      header: {\n        \"x-admin-api-key\": string;\n      };\n      body: {\n        body?: definitions[\"Model270\"];\n      };\n    };\n    responses: {\n      /** Successful */\n      default: {\n        schema: string;\n      };\n    };\n  };\n  postAdminFixorders: {\n    parameters: {\n      header: {\n        \"x-admin-api-key\": string;\n      };\n      body: {\n        body?: definitions[\"Model271\"];\n      };\n    };\n    responses: {\n      /** Successful */\n      default: {\n        schema: string;\n      };\n    };\n  };\n  postAdminFixtokencache: {\n    parameters: {\n      header: {\n        \"x-admin-api-key\": string;\n      };\n      body: {\n        body?: definitions[\"Model272\"];\n      };\n    };\n    responses: {\n      /** Successful */\n      default: {\n        schema: string;\n      };\n    };\n  };\n  postAdminFlagaddress: {\n    parameters: {\n      header: {\n        \"x-admin-api-key\": string;\n      };\n      body: {\n        body?: definitions[\"Model273\"];\n      };\n    };\n    responses: {\n      /** Successful */\n      default: {\n        schema: string;\n      };\n    };\n  };\n  postAdminIndexmetadata: {\n    parameters: {\n      header: {\n        \"x-admin-api-key\": string;\n      };\n      body: {\n        body?: definitions[\"Model274\"];\n      };\n    };\n    responses: {\n      /** Successful */\n      default: {\n        schema: string;\n      };\n    };\n  };\n  postAdminRefreshcollection: {\n    parameters: {\n      header: {\n        \"x-admin-api-key\": string;\n      };\n      body: {\n        body?: definitions[\"Model275\"];\n      };\n    };\n    responses: {\n      /** Successful */\n      default: {\n        schema: string;\n      };\n    };\n  };\n  postAdminRefreshcollectionflags: {\n    parameters: {\n      header: {\n        \"x-admin-api-key\": string;\n      };\n      body: {\n        body?: definitions[\"Model276\"];\n      };\n    };\n    responses: {\n      /** Successful */\n      default: {\n        schema: string;\n      };\n    };\n  };\n  postAdminRefreshtoken: {\n    parameters: {\n      header: {\n        \"x-admin-api-key\": string;\n      };\n      body: {\n        body?: definitions[\"Model277\"];\n      };\n    };\n    responses: {\n      /** Successful */\n      default: {\n        schema: string;\n      };\n    };\n  };\n  postAdminResyncfloorevents: {\n    parameters: {\n      header: {\n        \"x-admin-api-key\": string;\n      };\n      body: {\n        body?: definitions[\"Model278\"];\n      };\n    };\n    responses: {\n      /** Successful */\n      default: {\n        schema: string;\n      };\n    };\n  };\n  postAdminResyncsource: {\n    parameters: {\n      header: {\n        \"x-admin-api-key\": string;\n      };\n      body: {\n        body?: definitions[\"Model279\"];\n      };\n    };\n    responses: {\n      /** Successful */\n      default: {\n        schema: string;\n      };\n    };\n  };\n  postAdminRevalidateorder: {\n    parameters: {\n      header: {\n        \"x-admin-api-key\": string;\n      };\n      body: {\n        body?: definitions[\"Model280\"];\n      };\n    };\n    responses: {\n      /** Successful */\n      default: {\n        schema: string;\n      };\n    };\n  };\n  postAdminRouters: {\n    parameters: {\n      header: {\n        \"x-admin-api-key\": string;\n      };\n      body: {\n        body?: definitions[\"Model281\"];\n      };\n    };\n    responses: {\n      /** Successful */\n      default: {\n        schema: string;\n      };\n    };\n  };\n  postAdminSetcommunity: {\n    parameters: {\n      header: {\n        \"x-admin-api-key\": string;\n      };\n      body: {\n        body?: definitions[\"Model282\"];\n      };\n    };\n    responses: {\n      /** Successful */\n      default: {\n        schema: string;\n      };\n    };\n  };\n  postAdminSyncarweave: {\n    parameters: {\n      header: {\n        \"x-admin-api-key\": string;\n      };\n      body: {\n        body?: definitions[\"Model283\"];\n      };\n    };\n    responses: {\n      /** Successful */\n      default: {\n        schema: string;\n      };\n    };\n  };\n  postAdminSyncdailyvolumes: {\n    parameters: {\n      header: {\n        \"x-admin-api-key\": string;\n      };\n      body: {\n        body?: definitions[\"Model284\"];\n      };\n    };\n    responses: {\n      /** Successful */\n      default: {\n        schema: string;\n      };\n    };\n  };\n  postAdminSyncevents: {\n    parameters: {\n      header: {\n        \"x-admin-api-key\": string;\n      };\n      body: {\n        body?: definitions[\"Model286\"];\n      };\n    };\n    responses: {\n      /** Successful */\n      default: {\n        schema: string;\n      };\n    };\n  };\n  postAdminUpdateapikey: {\n    parameters: {\n      header: {\n        \"x-admin-api-key\": string;\n      };\n      body: {\n        body?: definitions[\"Model287\"];\n      };\n    };\n    responses: {\n      /** Successful */\n      default: {\n        schema: string;\n      };\n    };\n  };\n  postAdminUpdateratelimitrule: {\n    parameters: {\n      header: {\n        \"x-admin-api-key\": string;\n      };\n      body: {\n        body?: definitions[\"Model288\"];\n      };\n    };\n    responses: {\n      /** Successful */\n      default: {\n        schema: string;\n      };\n    };\n  };\n  postAdminUpdatesource: {\n    parameters: {\n      header: {\n        \"x-admin-api-key\": string;\n      };\n      body: {\n        body?: definitions[\"Model289\"];\n      };\n    };\n    responses: {\n      /** Successful */\n      default: {\n        schema: string;\n      };\n    };\n  };\n  postCollectionssetsV1: {\n    parameters: {\n      body: {\n        body?: definitions[\"Model291\"];\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"postCreateCollectionsSetV1Response\"];\n      };\n    };\n  };\n  postContractssetsV1: {\n    parameters: {\n      body: {\n        body?: definitions[\"Model293\"];\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"postCreateContractsSetV1Response\"];\n      };\n    };\n  };\n  postOrderV2: {\n    parameters: {\n      query: {\n        signature?: string;\n      };\n      body: {\n        body?: definitions[\"Model295\"];\n      };\n    };\n    responses: {\n      /** Successful */\n      default: {\n        schema: string;\n      };\n    };\n  };\n  postOrderV3: {\n    parameters: {\n      query: {\n        signature?: string;\n      };\n      body: {\n        body?: definitions[\"Model297\"];\n      };\n    };\n    responses: {\n      /** Successful */\n      default: {\n        schema: string;\n      };\n    };\n  };\n  postOrderV4: {\n    parameters: {\n      query: {\n        signature?: string;\n      };\n      body: {\n        body?: definitions[\"Model302\"];\n      };\n    };\n    responses: {\n      /** Successful */\n      default: {\n        schema: string;\n      };\n    };\n  };\n  postSeaportOffers: {\n    parameters: {\n      body: {\n        body?: definitions[\"Model307\"];\n      };\n    };\n    responses: {\n      /** Successful */\n      default: {\n        schema: string;\n      };\n    };\n  };\n  postTokensetsV1: {\n    parameters: {\n      body: {\n        body?: definitions[\"Model308\"];\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"Model188\"];\n      };\n    };\n  };\n  postTokensetsV2: {\n    parameters: {\n      body: {\n        body?: definitions[\"Model310\"];\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"Model188\"];\n      };\n    };\n  };\n  postWebsocketUserauth: {\n    responses: {\n      /** Successful */\n      default: {\n        schema: string;\n      };\n    };\n  };\n  postCollectionsRefreshV1: {\n    parameters: {\n      header: {\n        \"x-api-key\"?: string;\n      };\n      body: {\n        body?: definitions[\"Model311\"];\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"putSetCollectionCommunityV1Response\"];\n      };\n    };\n  };\n  /** Generate a bid and submit it to multiple marketplaces */\n  postExecuteBidV4: {\n    parameters: {\n      body: {\n        body?: definitions[\"Model313\"];\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getExecuteBidV4Response\"];\n      };\n    };\n  };\n  /** Generate bids and submit them to multiple marketplaces */\n  postExecuteBidV5: {\n    parameters: {\n      body: {\n        body?: definitions[\"Model318\"];\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getExecuteBidV5Response\"];\n      };\n    };\n  };\n  postExecuteBuyV4: {\n    parameters: {\n      body: {\n        body?: definitions[\"Model326\"];\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getExecuteBuyV3Response\"];\n      };\n    };\n  };\n  postExecuteBuyV5: {\n    parameters: {\n      body: {\n        body?: definitions[\"Model328\"];\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getExecuteBuyV3Response\"];\n      };\n    };\n  };\n  postExecuteBuyV6: {\n    parameters: {\n      body: {\n        body?: definitions[\"Model332\"];\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getExecuteBuyV6Response\"];\n      };\n    };\n  };\n  postExecuteBuyV7: {\n    parameters: {\n      body: {\n        body?: definitions[\"Model337\"];\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getExecuteBuyV7Response\"];\n      };\n    };\n  };\n  /** Generate a listing and submit it to multiple marketplaces */\n  postExecuteListV3: {\n    parameters: {\n      body: {\n        body?: definitions[\"Model342\"];\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getExecuteListV3Response\"];\n      };\n    };\n  };\n  /** Generate a listing and submit it to multiple marketplaces */\n  postExecuteListV4: {\n    parameters: {\n      body: {\n        body?: definitions[\"Model347\"];\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getExecuteListV4Response\"];\n      };\n    };\n  };\n  /** Generate listings and submit them to multiple marketplaces */\n  postExecuteListV5: {\n    parameters: {\n      body: {\n        body?: definitions[\"Model350\"];\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getExecuteBidV5Response\"];\n      };\n    };\n  };\n  postExecutePermitsignatureV1: {\n    parameters: {\n      query: {\n        /** Signature to attach to the permit */\n        signature: string;\n      };\n      body: {\n        body?: definitions[\"Model351\"];\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"putSetCollectionCommunityV1Response\"];\n      };\n    };\n  };\n  postExecuteSellV4: {\n    parameters: {\n      body: {\n        body?: definitions[\"Model352\"];\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getExecuteBuyV3Response\"];\n      };\n    };\n  };\n  postExecuteSellV5: {\n    parameters: {\n      body: {\n        body?: definitions[\"Model353\"];\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getExecuteBuyV3Response\"];\n      };\n    };\n  };\n  postExecuteSellV6: {\n    parameters: {\n      body: {\n        body?: definitions[\"Model356\"];\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getExecuteBuyV6Response\"];\n      };\n    };\n  };\n  postExecuteSellV7: {\n    parameters: {\n      body: {\n        body?: definitions[\"Model360\"];\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"getExecuteBuyV7Response\"];\n      };\n    };\n  };\n  postTokensFlagV1: {\n    parameters: {\n      body: {\n        body?: definitions[\"Model361\"];\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"putSetCollectionCommunityV1Response\"];\n      };\n    };\n  };\n  postTokensRefreshV1: {\n    parameters: {\n      body: {\n        body?: definitions[\"Model362\"];\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"putSetCollectionCommunityV1Response\"];\n      };\n    };\n  };\n  postTokensSimulatefloorV1: {\n    parameters: {\n      body: {\n        body?: definitions[\"Model363\"];\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"putSetCollectionCommunityV1Response\"];\n      };\n    };\n  };\n  postTokensSimulatetopbidV1: {\n    parameters: {\n      body: {\n        body?: definitions[\"Model364\"];\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"putSetCollectionCommunityV1Response\"];\n      };\n    };\n  };\n  postManagementOrdersSimulateV1: {\n    parameters: {\n      body: {\n        body?: definitions[\"Model365\"];\n      };\n    };\n    responses: {\n      /** Successful */\n      200: {\n        schema: definitions[\"putSetCollectionCommunityV1Response\"];\n      };\n    };\n  };\n}\n\nexport interface external {}\n"],"names":[],"version":3,"file":"index.mjs.map"}