{
  "address": "0xC2b11836723C621a22A43ace8616Cb21c4c9ddd5",
  "abi": [
    {
      "inputs": [],
      "name": "NotCurrentWearer",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "initializeParams",
          "type": "bytes"
        }
      ],
      "name": "setUp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "currentWearer",
              "type": "address"
            },
            {
              "internalType": "contract IHats",
              "name": "hatsProtocol",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "hatId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "nominatedWearer",
              "type": "address"
            }
          ],
          "internalType": "struct IDAOAutonomousAdminV1.TriggerStartArgs",
          "name": "args",
          "type": "tuple"
        }
      ],
      "name": "triggerStartNextTerm",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x213f19d6203ff3e4704589042cc97fc2e50cce28d980f97951272d9152502837",
  "receipt": {
    "to": null,
    "from": "0xb5Ca125166C1987A35EDD550E16846Fa1e1D9bB3",
    "contractAddress": "0xC2b11836723C621a22A43ace8616Cb21c4c9ddd5",
    "transactionIndex": 159,
    "gasUsed": "468920",
    "logsBloom": "0x
    "blockHash": "0x72af8acf246acb20f6934c3768dbd7043e999a322fdd88a6cd6db33254f65fe5",
    "transactionHash": "0x213f19d6203ff3e4704589042cc97fc2e50cce28d980f97951272d9152502837",
    "logs": [],
    "blockNumber": 21194924,
    "cumulativeGasUsed": "15322606",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "66a499447138fb18e27539a94476e96d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"NotCurrentWearer\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"initializeParams\",\"type\":\"bytes\"}],\"name\":\"setUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"currentWearer\",\"type\":\"address\"},{\"internalType\":\"contract IHats\",\"name\":\"hatsProtocol\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"hatId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nominatedWearer\",\"type\":\"address\"}],\"internalType\":\"struct IDAOAutonomousAdminV1.TriggerStartArgs\",\"name\":\"args\",\"type\":\"tuple\"}],\"name\":\"triggerStartNextTerm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/autonomous-admin/DAOAutonomousAdminV1.sol\":\"DAOAutonomousAdminV1\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@gnosis.pm/zodiac/contracts/factory/FactoryFriendly.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\n\\n/// @title Zodiac FactoryFriendly - A contract that allows other contracts to be initializable and pass bytes as arguments to define contract state\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nabstract contract FactoryFriendly is OwnableUpgradeable {\\n    function setUp(bytes memory initializeParams) public virtual;\\n}\\n\",\"keccak256\":\"0x96e61585b7340a901a54eb4c157ce28b630bff3d9d4597dfaac692128ea458c4\",\"license\":\"LGPL-3.0-only\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/autonomous-admin/DAOAutonomousAdminV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.28;\\n\\nimport {IHats} from \\\"../interfaces/hats/IHats.sol\\\";\\nimport {IHatsElectionsEligibility} from \\\"../interfaces/hats/modules/IHatsElectionsEligibility.sol\\\";\\nimport {FactoryFriendly} from \\\"@gnosis.pm/zodiac/contracts/factory/FactoryFriendly.sol\\\";\\nimport {ERC165} from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport {IDAOAutonomousAdminV1} from \\\"../interfaces/autonomous-admin/IDAOAutonomousAdminV1.sol\\\";\\n\\ncontract DAOAutonomousAdminV1 is\\n    IDAOAutonomousAdminV1,\\n    ERC165,\\n    FactoryFriendly\\n{\\n    // //////////////////////////////////////////////////////////////\\n    //                         initializer\\n    // //////////////////////////////////////////////////////////////\\n    function setUp(bytes memory initializeParams) public override initializer {}\\n\\n    // //////////////////////////////////////////////////////////////\\n    //                         Public Functions\\n    // //////////////////////////////////////////////////////////////\\n    function triggerStartNextTerm(TriggerStartArgs calldata args) public {\\n        IHatsElectionsEligibility hatsElectionModule = IHatsElectionsEligibility(\\n                args.hatsProtocol.getHatEligibilityModule(args.hatId)\\n            );\\n\\n        hatsElectionModule.startNextTerm();\\n\\n        // This will burn the hat if wearer is no longer eligible\\n        args.hatsProtocol.checkHatWearerStatus(args.hatId, args.currentWearer);\\n\\n        // This will mint the hat to the nominated wearer, if necessary\\n        if (args.nominatedWearer != args.currentWearer) {\\n            args.hatsProtocol.mintHat(args.hatId, args.nominatedWearer);\\n        }\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view override returns (bool) {\\n        return\\n            interfaceId == type(IDAOAutonomousAdminV1).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xe2ba5636773ead93aa41a40e0129fca1968d948320846a7b1545b1d0743cdb8e\",\"license\":\"MIT\"},\"contracts/interfaces/autonomous-admin/IDAOAutonomousAdminV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.28;\\n\\nimport {IHats} from \\\"../hats/IHats.sol\\\";\\n\\ninterface IDAOAutonomousAdminV1 {\\n    error NotCurrentWearer();\\n\\n    struct TriggerStartArgs {\\n        address currentWearer;\\n        IHats hatsProtocol;\\n        uint256 hatId;\\n        address nominatedWearer;\\n    }\\n\\n    function triggerStartNextTerm(TriggerStartArgs calldata args) external;\\n}\\n\",\"keccak256\":\"0x73aba69596bb74f0d8891ea315b47075063f9601d1d50eb52967c43315488627\",\"license\":\"MIT\"},\"contracts/interfaces/hats/HatsErrors.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n// Copyright (C) 2023 Haberdasher Labs\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU Affero General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU Affero General Public License for more details.\\n//\\n// You should have received a copy of the GNU Affero General Public License\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.13;\\n\\ninterface HatsErrors {\\n    /// @notice Emitted when `user` is attempting to perform an action on `hatId` but is not wearing one of `hatId`'s admin hats\\n    /// @dev Can be equivalent to `NotHatWearer(buildHatId(hatId))`, such as when emitted by `approveLinkTopHatToTree` or `relinkTopHatToTree`\\n    error NotAdmin(address user, uint256 hatId);\\n\\n    /// @notice Emitted when attempting to perform an action as or for an account that is not a wearer of a given hat\\n    error NotHatWearer();\\n\\n    /// @notice Emitted when attempting to perform an action that requires being either an admin or wearer of a given hat\\n    error NotAdminOrWearer();\\n\\n    /// @notice Emitted when attempting to mint `hatId` but `hatId`'s maxSupply has been reached\\n    error AllHatsWorn(uint256 hatId);\\n\\n    /// @notice Emitted when attempting to create a hat with a level 14 hat as its admin\\n    error MaxLevelsReached();\\n\\n    /// @notice Emitted when an attempted hat id has empty intermediate level(s)\\n    error InvalidHatId();\\n\\n    /// @notice Emitted when attempting to mint `hatId` to a `wearer` who is already wearing the hat\\n    error AlreadyWearingHat(address wearer, uint256 hatId);\\n\\n    /// @notice Emitted when attempting to mint a non-existant hat\\n    error HatDoesNotExist(uint256 hatId);\\n\\n    /// @notice Emmitted when attempting to mint or transfer a hat that is not active\\n    error HatNotActive();\\n\\n    /// @notice Emitted when attempting to mint or transfer a hat to an ineligible wearer\\n    error NotEligible();\\n\\n    /// @notice Emitted when attempting to check or set a hat's status from an account that is not that hat's toggle module\\n    error NotHatsToggle();\\n\\n    /// @notice Emitted when attempting to check or set a hat wearer's status from an account that is not that hat's eligibility module\\n    error NotHatsEligibility();\\n\\n    /// @notice Emitted when array arguments to a batch function have mismatching lengths\\n    error BatchArrayLengthMismatch();\\n\\n    /// @notice Emitted when attempting to mutate or transfer an immutable hat\\n    error Immutable();\\n\\n    /// @notice Emitted when attempting to change a hat's maxSupply to a value lower than its current supply\\n    error NewMaxSupplyTooLow();\\n\\n    /// @notice Emitted when attempting to link a tophat to a new admin for which the tophat serves as an admin\\n    error CircularLinkage();\\n\\n    /// @notice Emitted when attempting to link or relink a tophat to a separate tree\\n    error CrossTreeLinkage();\\n\\n    /// @notice Emitted when attempting to link a tophat without a request\\n    error LinkageNotRequested();\\n\\n    /// @notice Emitted when attempting to unlink a tophat that does not have a wearer\\n    /// @dev This ensures that unlinking never results in a bricked tophat\\n    error InvalidUnlink();\\n\\n    /// @notice Emmited when attempting to change a hat's eligibility or toggle module to the zero address\\n    error ZeroAddress();\\n\\n    /// @notice Emmitted when attempting to change a hat's details or imageURI to a string with over 7000 bytes (~characters)\\n    /// @dev This protects against a DOS attack where an admin iteratively extend's a hat's details or imageURI\\n    ///      to be so long that reading it exceeds the block gas limit, breaking `uri()` and `viewHat()`\\n    error StringTooLong();\\n}\\n\",\"keccak256\":\"0x81b0056b7bed86eabc07c0e4a9655c586ddb8e6c128320593669b76efd5a08de\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/hats/HatsEvents.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n// Copyright (C) 2023 Haberdasher Labs\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU Affero General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU Affero General Public License for more details.\\n//\\n// You should have received a copy of the GNU Affero General Public License\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.13;\\n\\ninterface HatsEvents {\\n    /// @notice Emitted when a new hat is created\\n    /// @param id The id for the new hat\\n    /// @param details A description of the Hat\\n    /// @param maxSupply The total instances of the Hat that can be worn at once\\n    /// @param eligibility The address that can report on the Hat wearer's status\\n    /// @param toggle The address that can deactivate the Hat\\n    /// @param mutable_ Whether the hat's properties are changeable after creation\\n    /// @param imageURI The image uri for this hat and the fallback for its\\n    event HatCreated(\\n        uint256 id,\\n        string details,\\n        uint32 maxSupply,\\n        address eligibility,\\n        address toggle,\\n        bool mutable_,\\n        string imageURI\\n    );\\n\\n    /// @notice Emitted when a hat wearer's standing is updated\\n    /// @dev Eligibility is excluded since the source of truth for eligibility is the eligibility module and may change without a transaction\\n    /// @param hatId The id of the wearer's hat\\n    /// @param wearer The wearer's address\\n    /// @param wearerStanding Whether the wearer is in good standing for the hat\\n    event WearerStandingChanged(\\n        uint256 hatId,\\n        address wearer,\\n        bool wearerStanding\\n    );\\n\\n    /// @notice Emitted when a hat's status is updated\\n    /// @param hatId The id of the hat\\n    /// @param newStatus Whether the hat is active\\n    event HatStatusChanged(uint256 hatId, bool newStatus);\\n\\n    /// @notice Emitted when a hat's details are updated\\n    /// @param hatId The id of the hat\\n    /// @param newDetails The updated details\\n    event HatDetailsChanged(uint256 hatId, string newDetails);\\n\\n    /// @notice Emitted when a hat's eligibility module is updated\\n    /// @param hatId The id of the hat\\n    /// @param newEligibility The updated eligibiliy module\\n    event HatEligibilityChanged(uint256 hatId, address newEligibility);\\n\\n    /// @notice Emitted when a hat's toggle module is updated\\n    /// @param hatId The id of the hat\\n    /// @param newToggle The updated toggle module\\n    event HatToggleChanged(uint256 hatId, address newToggle);\\n\\n    /// @notice Emitted when a hat's mutability is updated\\n    /// @param hatId The id of the hat\\n    event HatMutabilityChanged(uint256 hatId);\\n\\n    /// @notice Emitted when a hat's maximum supply is updated\\n    /// @param hatId The id of the hat\\n    /// @param newMaxSupply The updated max supply\\n    event HatMaxSupplyChanged(uint256 hatId, uint32 newMaxSupply);\\n\\n    /// @notice Emitted when a hat's image URI is updated\\n    /// @param hatId The id of the hat\\n    /// @param newImageURI The updated image URI\\n    event HatImageURIChanged(uint256 hatId, string newImageURI);\\n\\n    /// @notice Emitted when a tophat linkage is requested by its admin\\n    /// @param domain The domain of the tree tophat to link\\n    /// @param newAdmin The tophat's would-be admin in the parent tree\\n    event TopHatLinkRequested(uint32 domain, uint256 newAdmin);\\n\\n    /// @notice Emitted when a tophat is linked to a another tree\\n    /// @param domain The domain of the newly-linked tophat\\n    /// @param newAdmin The tophat's new admin in the parent tree\\n    event TopHatLinked(uint32 domain, uint256 newAdmin);\\n}\\n\",\"keccak256\":\"0x53413397d15e1636c3cd7bd667656b79bc2886785403b824bcd4ed122667f2c6\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/hats/IHats.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n// Copyright (C) 2023 Haberdasher Labs\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU Affero General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU Affero General Public License for more details.\\n//\\n// You should have received a copy of the GNU Affero General Public License\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.13;\\n\\nimport \\\"./IHatsIdUtilities.sol\\\";\\nimport \\\"./HatsErrors.sol\\\";\\nimport \\\"./HatsEvents.sol\\\";\\n\\ninterface IHats is IHatsIdUtilities, HatsErrors, HatsEvents {\\n    function mintTopHat(\\n        address _target,\\n        string memory _details,\\n        string memory _imageURI\\n    ) external returns (uint256 topHatId);\\n\\n    function createHat(\\n        uint256 _admin,\\n        string calldata _details,\\n        uint32 _maxSupply,\\n        address _eligibility,\\n        address _toggle,\\n        bool _mutable,\\n        string calldata _imageURI\\n    ) external returns (uint256 newHatId);\\n\\n    function batchCreateHats(\\n        uint256[] calldata _admins,\\n        string[] calldata _details,\\n        uint32[] calldata _maxSupplies,\\n        address[] memory _eligibilityModules,\\n        address[] memory _toggleModules,\\n        bool[] calldata _mutables,\\n        string[] calldata _imageURIs\\n    ) external returns (bool success);\\n\\n    function getNextId(uint256 _admin) external view returns (uint256 nextId);\\n\\n    function mintHat(\\n        uint256 _hatId,\\n        address _wearer\\n    ) external returns (bool success);\\n\\n    function batchMintHats(\\n        uint256[] calldata _hatIds,\\n        address[] calldata _wearers\\n    ) external returns (bool success);\\n\\n    function setHatStatus(\\n        uint256 _hatId,\\n        bool _newStatus\\n    ) external returns (bool toggled);\\n\\n    function checkHatStatus(uint256 _hatId) external returns (bool toggled);\\n\\n    function setHatWearerStatus(\\n        uint256 _hatId,\\n        address _wearer,\\n        bool _eligible,\\n        bool _standing\\n    ) external returns (bool updated);\\n\\n    function checkHatWearerStatus(\\n        uint256 _hatId,\\n        address _wearer\\n    ) external returns (bool updated);\\n\\n    function renounceHat(uint256 _hatId) external;\\n\\n    function transferHat(uint256 _hatId, address _from, address _to) external;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              HATS ADMIN FUNCTIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function makeHatImmutable(uint256 _hatId) external;\\n\\n    function changeHatDetails(\\n        uint256 _hatId,\\n        string memory _newDetails\\n    ) external;\\n\\n    function changeHatEligibility(\\n        uint256 _hatId,\\n        address _newEligibility\\n    ) external;\\n\\n    function changeHatToggle(uint256 _hatId, address _newToggle) external;\\n\\n    function changeHatImageURI(\\n        uint256 _hatId,\\n        string memory _newImageURI\\n    ) external;\\n\\n    function changeHatMaxSupply(uint256 _hatId, uint32 _newMaxSupply) external;\\n\\n    function requestLinkTopHatToTree(\\n        uint32 _topHatId,\\n        uint256 _newAdminHat\\n    ) external;\\n\\n    function approveLinkTopHatToTree(\\n        uint32 _topHatId,\\n        uint256 _newAdminHat,\\n        address _eligibility,\\n        address _toggle,\\n        string calldata _details,\\n        string calldata _imageURI\\n    ) external;\\n\\n    function unlinkTopHatFromTree(uint32 _topHatId, address _wearer) external;\\n\\n    function relinkTopHatWithinTree(\\n        uint32 _topHatDomain,\\n        uint256 _newAdminHat,\\n        address _eligibility,\\n        address _toggle,\\n        string calldata _details,\\n        string calldata _imageURI\\n    ) external;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              VIEW FUNCTIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function viewHat(\\n        uint256 _hatId\\n    )\\n        external\\n        view\\n        returns (\\n            string memory details,\\n            uint32 maxSupply,\\n            uint32 supply,\\n            address eligibility,\\n            address toggle,\\n            string memory imageURI,\\n            uint16 lastHatId,\\n            bool mutable_,\\n            bool active\\n        );\\n\\n    function isWearerOfHat(\\n        address _user,\\n        uint256 _hatId\\n    ) external view returns (bool isWearer);\\n\\n    function isAdminOfHat(\\n        address _user,\\n        uint256 _hatId\\n    ) external view returns (bool isAdmin);\\n\\n    function isInGoodStanding(\\n        address _wearer,\\n        uint256 _hatId\\n    ) external view returns (bool standing);\\n\\n    function isEligible(\\n        address _wearer,\\n        uint256 _hatId\\n    ) external view returns (bool eligible);\\n\\n    function getHatEligibilityModule(\\n        uint256 _hatId\\n    ) external view returns (address eligibility);\\n\\n    function getHatToggleModule(\\n        uint256 _hatId\\n    ) external view returns (address toggle);\\n\\n    function getHatMaxSupply(\\n        uint256 _hatId\\n    ) external view returns (uint32 maxSupply);\\n\\n    function hatSupply(uint256 _hatId) external view returns (uint32 supply);\\n\\n    function getImageURIForHat(\\n        uint256 _hatId\\n    ) external view returns (string memory _uri);\\n\\n    function balanceOf(\\n        address wearer,\\n        uint256 hatId\\n    ) external view returns (uint256 balance);\\n\\n    function balanceOfBatch(\\n        address[] calldata _wearers,\\n        uint256[] calldata _hatIds\\n    ) external view returns (uint256[] memory);\\n\\n    function uri(uint256 id) external view returns (string memory _uri);\\n}\\n\",\"keccak256\":\"0x2867004bddc5148fa1937f25c0403e5d9977583aaf50fdbdb74bd463f64f21c8\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/hats/IHatsIdUtilities.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n// Copyright (C) 2023 Haberdasher Labs\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU Affero General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU Affero General Public License for more details.\\n//\\n// You should have received a copy of the GNU Affero General Public License\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.13;\\n\\ninterface IHatsIdUtilities {\\n    function buildHatId(\\n        uint256 _admin,\\n        uint16 _newHat\\n    ) external pure returns (uint256 id);\\n\\n    function getHatLevel(uint256 _hatId) external view returns (uint32 level);\\n\\n    function getLocalHatLevel(\\n        uint256 _hatId\\n    ) external pure returns (uint32 level);\\n\\n    function isTopHat(uint256 _hatId) external view returns (bool _topHat);\\n\\n    function isLocalTopHat(\\n        uint256 _hatId\\n    ) external pure returns (bool _localTopHat);\\n\\n    function isValidHatId(\\n        uint256 _hatId\\n    ) external view returns (bool validHatId);\\n\\n    function getAdminAtLevel(\\n        uint256 _hatId,\\n        uint32 _level\\n    ) external view returns (uint256 admin);\\n\\n    function getAdminAtLocalLevel(\\n        uint256 _hatId,\\n        uint32 _level\\n    ) external pure returns (uint256 admin);\\n\\n    function getTopHatDomain(\\n        uint256 _hatId\\n    ) external view returns (uint32 domain);\\n\\n    function getTippyTopHatDomain(\\n        uint32 _topHatDomain\\n    ) external view returns (uint32 domain);\\n\\n    function noCircularLinkage(\\n        uint32 _topHatDomain,\\n        uint256 _linkedAdmin\\n    ) external view returns (bool notCircular);\\n\\n    function sameTippyTopHatDomain(\\n        uint32 _topHatDomain,\\n        uint256 _newAdminHat\\n    ) external view returns (bool sameDomain);\\n}\\n\",\"keccak256\":\"0x007fcc07b20bf84bacad1f9a2ddf4e30e1a8be961e144b7bef8e98a51781aee9\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/hats/modules/IHatsElectionsEligibility.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.13;\\n\\ninterface IHatsElectionsEligibility {\\n    event ElectionOpened(uint128 nextTermEnd);\\n    event ElectionCompleted(uint128 termEnd, address[] winners);\\n    event NewTermStarted(uint128 termEnd);\\n    event Recalled(uint128 termEnd, address[] accounts);\\n\\n    /// @notice Returns the first second after the current term ends.\\n    /// @dev Also serves as the id for the current term.\\n    function currentTermEnd() external view returns (uint128);\\n\\n    /// @notice Returns the first second after the next term ends.\\n    /// @dev Also serves as the id for the next term.\\n    function nextTermEnd() external view returns (uint128);\\n\\n    /// @notice Returns the election status (open or closed) for a given term end.\\n    /// @param termEnd The term end timestamp to query.\\n    function electionStatus(\\n        uint128 termEnd\\n    ) external view returns (bool isElectionOpen);\\n\\n    /// @notice Returns whether a candidate was elected in a given term.\\n    /// @param termEnd The term end timestamp to query.\\n    /// @param candidate The address of the candidate.\\n    function electionResults(\\n        uint128 termEnd,\\n        address candidate\\n    ) external view returns (bool elected);\\n\\n    /// @notice Returns the BALLOT_BOX_HAT constant.\\n    function BALLOT_BOX_HAT() external pure returns (uint256);\\n\\n    /// @notice Returns the ADMIN_HAT constant.\\n    function ADMIN_HAT() external pure returns (uint256);\\n\\n    /**\\n     * @notice Submit the results of an election for a specified term.\\n     * @dev Only callable by the wearer(s) of the BALLOT_BOX_HAT.\\n     * @param _termEnd The id of the term for which the election results are being submitted.\\n     * @param _winners The addresses of the winners of the election.\\n     */\\n    function elect(uint128 _termEnd, address[] calldata _winners) external;\\n\\n    /**\\n     * @notice Submit the results of a recall election for a specified term.\\n     * @dev Only callable by the wearer(s) of the BALLOT_BOX_HAT.\\n     * @param _termEnd The id of the term for which the recall results are being submitted.\\n     * @param _recallees The addresses to be recalled.\\n     */\\n    function recall(uint128 _termEnd, address[] calldata _recallees) external;\\n\\n    /**\\n     * @notice Set the next term and open the election for it.\\n     * @dev Only callable by the wearer(s) of the ADMIN_HAT.\\n     * @param _newTermEnd The id of the term that will be opened.\\n     */\\n    function setNextTerm(uint128 _newTermEnd) external;\\n\\n    /**\\n     * @notice Start the next term, updating the current term.\\n     * @dev Can be called by anyone, but will revert if conditions are not met.\\n     */\\n    function startNextTerm() external;\\n\\n    /**\\n     * @notice Determine the eligibility and standing of a wearer for a hat.\\n     * @param _wearer The address of the hat wearer.\\n     * @param _hatId The ID of the hat.\\n     * @return eligible True if the wearer is eligible for the hat.\\n     * @return standing True if the wearer is in good standing.\\n     */\\n    function getWearerStatus(\\n        address _wearer,\\n        uint256 _hatId\\n    ) external view returns (bool eligible, bool standing);\\n}\\n\",\"keccak256\":\"0x74dfc5d538d866ddb8ee2ca1b569abf62e02d848c59f308adf6075ecff175c7d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052348015600f57600080fd5b506107858061001f6000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806301ffc9a7146100675780630ac4a8e81461008f578063715018a6146100a45780638da5cb5b146100ac578063a4f9edbf146100c7578063f2fde38b146100da575b600080fd5b61007a6100753660046105c3565b6100ed565b60405190151581526020015b60405180910390f35b6100a261009d3660046105f4565b610124565b005b6100a261037c565b6033546040516001600160a01b039091168152602001610086565b6100a26100d5366004610625565b610390565b6100a26100e83660046106f3565b61049e565b60006001600160e01b03198216630158951d60e31b148061011e57506301ffc9a760e01b6001600160e01b03198316145b92915050565b600061013660408301602084016106f3565b6001600160a01b0316638c07607783604001356040518263ffffffff1660e01b815260040161016791815260200190565b602060405180830381865afa158015610184573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101a89190610710565b9050806001600160a01b0316637dcc80546040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156101e557600080fd5b505af11580156101f9573d6000803e3d6000fd5b5061020e9250505060408301602084016106f3565b6001600160a01b0316633fa9d544604084013561022e60208601866106f3565b6040516001600160e01b031960e085901b16815260048101929092526001600160a01b031660248201526044016020604051808303816000875af115801561027a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061029e919061072d565b506102ac60208301836106f3565b6001600160a01b03166102c560808401606085016106f3565b6001600160a01b031614610378576102e360408301602084016106f3565b6001600160a01b031663641f776e604084013561030660808601606087016106f3565b6040516001600160e01b031960e085901b16815260048101929092526001600160a01b031660248201526044016020604051808303816000875af1158015610352573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610376919061072d565b505b5050565b610384610517565b61038e6000610571565b565b600054610100900460ff16158080156103b05750600054600160ff909116105b806103ca5750303b1580156103ca575060005460ff166001145b6104325760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff191660011790558015610455576000805461ff0019166101001790555b8015610378576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b6104a6610517565b6001600160a01b03811661050b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610429565b61051481610571565b50565b6033546001600160a01b0316331461038e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610429565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000602082840312156105d557600080fd5b81356001600160e01b0319811681146105ed57600080fd5b9392505050565b6000608082840312801561060757600080fd5b509092915050565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561063757600080fd5b813567ffffffffffffffff81111561064e57600080fd5b8201601f8101841361065f57600080fd5b803567ffffffffffffffff8111156106795761067961060f565b604051601f8201601f19908116603f0116810167ffffffffffffffff811182821017156106a8576106a861060f565b6040528181528282016020018610156106c057600080fd5b81602084016020830137600091810160200191909152949350505050565b6001600160a01b038116811461051457600080fd5b60006020828403121561070557600080fd5b81356105ed816106de565b60006020828403121561072257600080fd5b81516105ed816106de565b60006020828403121561073f57600080fd5b815180151581146105ed57600080fdfea2646970667358221220c1d33e6037328de94526cd6179ba6a274454f0df8794ef4f1bc4dbcdfee5806464736f6c634300081c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c806301ffc9a7146100675780630ac4a8e81461008f578063715018a6146100a45780638da5cb5b146100ac578063a4f9edbf146100c7578063f2fde38b146100da575b600080fd5b61007a6100753660046105c3565b6100ed565b60405190151581526020015b60405180910390f35b6100a261009d3660046105f4565b610124565b005b6100a261037c565b6033546040516001600160a01b039091168152602001610086565b6100a26100d5366004610625565b610390565b6100a26100e83660046106f3565b61049e565b60006001600160e01b03198216630158951d60e31b148061011e57506301ffc9a760e01b6001600160e01b03198316145b92915050565b600061013660408301602084016106f3565b6001600160a01b0316638c07607783604001356040518263ffffffff1660e01b815260040161016791815260200190565b602060405180830381865afa158015610184573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101a89190610710565b9050806001600160a01b0316637dcc80546040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156101e557600080fd5b505af11580156101f9573d6000803e3d6000fd5b5061020e9250505060408301602084016106f3565b6001600160a01b0316633fa9d544604084013561022e60208601866106f3565b6040516001600160e01b031960e085901b16815260048101929092526001600160a01b031660248201526044016020604051808303816000875af115801561027a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061029e919061072d565b506102ac60208301836106f3565b6001600160a01b03166102c560808401606085016106f3565b6001600160a01b031614610378576102e360408301602084016106f3565b6001600160a01b031663641f776e604084013561030660808601606087016106f3565b6040516001600160e01b031960e085901b16815260048101929092526001600160a01b031660248201526044016020604051808303816000875af1158015610352573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610376919061072d565b505b5050565b610384610517565b61038e6000610571565b565b600054610100900460ff16158080156103b05750600054600160ff909116105b806103ca5750303b1580156103ca575060005460ff166001145b6104325760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff191660011790558015610455576000805461ff0019166101001790555b8015610378576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b6104a6610517565b6001600160a01b03811661050b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610429565b61051481610571565b50565b6033546001600160a01b0316331461038e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610429565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000602082840312156105d557600080fd5b81356001600160e01b0319811681146105ed57600080fd5b9392505050565b6000608082840312801561060757600080fd5b509092915050565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561063757600080fd5b813567ffffffffffffffff81111561064e57600080fd5b8201601f8101841361065f57600080fd5b803567ffffffffffffffff8111156106795761067961060f565b604051601f8201601f19908116603f0116810167ffffffffffffffff811182821017156106a8576106a861060f565b6040528181528282016020018610156106c057600080fd5b81602084016020830137600091810160200191909152949350505050565b6001600160a01b038116811461051457600080fd5b60006020828403121561070557600080fd5b81356105ed816106de565b60006020828403121561072257600080fd5b81516105ed816106de565b60006020828403121561073f57600080fd5b815180151581146105ed57600080fdfea2646970667358221220c1d33e6037328de94526cd6179ba6a274454f0df8794ef4f1bc4dbcdfee5806464736f6c634300081c0033",
  "devdoc": {
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 149,
        "contract": "contracts/autonomous-admin/DAOAutonomousAdminV1.sol:DAOAutonomousAdminV1",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 152,
        "contract": "contracts/autonomous-admin/DAOAutonomousAdminV1.sol:DAOAutonomousAdminV1",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 577,
        "contract": "contracts/autonomous-admin/DAOAutonomousAdminV1.sol:DAOAutonomousAdminV1",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 21,
        "contract": "contracts/autonomous-admin/DAOAutonomousAdminV1.sol:DAOAutonomousAdminV1",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 141,
        "contract": "contracts/autonomous-admin/DAOAutonomousAdminV1.sol:DAOAutonomousAdminV1",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}