{
  "address": "0xA5B3Bb30C80BFa32E2e28f3BfE1de0730fD506A4",
  "abi": [
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVersion",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "lightAccountOwner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "votingContract",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "callData",
          "type": "bytes"
        }
      ],
      "name": "validateOperation",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xfe6c113ab5541b86533bc75eef30f7d4d8022365ca95b3ca3dbec1a5944b49a4",
  "receipt": {
    "to": null,
    "from": "0xb5Ca125166C1987A35EDD550E16846Fa1e1D9bB3",
    "contractAddress": "0xA5B3Bb30C80BFa32E2e28f3BfE1de0730fD506A4",
    "transactionIndex": 12,
    "gasUsed": "542586",
    "logsBloom": "0x
    "blockHash": "0x45aabd156decbcb15e201028fe1125bd58097d81ae9516745efd46e45d06b0c1",
    "transactionHash": "0xfe6c113ab5541b86533bc75eef30f7d4d8022365ca95b3ca3dbec1a5944b49a4",
    "logs": [],
    "blockNumber": 22296446,
    "cumulativeGasUsed": "2988985",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "402a67e06595e77085b5b2729c7fa191",
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lightAccountOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"votingContract\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"name\":\"validateOperation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Validates vote operations for LinearERC721VotingV1 to ensure they will succeed\",\"kind\":\"dev\",\"methods\":{\"getVersion()\":{\"details\":\"Returns the version number of this contract implementation Inheriting contracts MUST override this function.\"},\"supportsInterface(bytes4)\":{\"details\":\"ERC165 interface support\"},\"validateOperation(address,address,address,bytes)\":{\"details\":\"Validates if a vote operation will succeed\",\"params\":{\"callData\":\"The encoded vote function call\",\"lightAccountOwner\":\"The account attempting to vote\",\"votingContract\":\"The address of the voting contract\"},\"returns\":{\"_0\":\"isValid True if the vote operation will succeed\"}}},\"title\":\"LinearERC721VotingV1ValidatorV1\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/account-abstraction/validators/LinearERC721VotingV1ValidatorV1.sol\":\"LinearERC721VotingV1ValidatorV1\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Version.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.19;\\n\\nimport {IVersion} from \\\"./interfaces/IVersion.sol\\\";\\nimport {ERC165} from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @title Version\\n * @dev Abstract contract providing standardized contract identification\\n *\\n * Inheriting contracts MUST implement:\\n * - getVersion()\\n */\\nabstract contract Version is IVersion, ERC165 {\\n    /**\\n     * @dev Returns the version number of this contract implementation\\n     * Inheriting contracts MUST override this function.\\n     */\\n    function getVersion() public view virtual returns (uint16);\\n\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override returns (bool) {\\n        return\\n            interfaceId == type(IVersion).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x55640a0bdf0e6bf70198ae10a91a148a53fe138d98ba8d80124dfeab2011bbcc\",\"license\":\"AGPL-3.0\"},\"contracts/account-abstraction/validators/LinearERC721VotingV1ValidatorV1.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.28;\\n\\nimport {IFunctionValidator} from \\\"../../interfaces/account-abstraction/IFunctionValidator.sol\\\";\\nimport {Version} from \\\"../../Version.sol\\\";\\nimport {ERC165} from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface ILinearERC721VotingV1 {\\n    function vote(\\n        uint32 proposalId,\\n        uint8 voteType,\\n        address[] memory tokenAddresses,\\n        uint256[] memory tokenIds\\n    ) external;\\n\\n    function hasVoted(\\n        uint32 proposalId,\\n        address tokenAddress,\\n        uint256 tokenId\\n    ) external view returns (bool);\\n\\n    function votingEndBlock(uint32 proposalId) external view returns (uint32);\\n\\n    function getTokenWeight(\\n        address tokenAddress\\n    ) external view returns (uint256);\\n\\n    function votingPeriodEnded(uint32 proposalId) external view returns (bool);\\n}\\n\\n/**\\n * @title LinearERC721VotingV1ValidatorV1\\n * @dev Validates vote operations for LinearERC721VotingV1 to ensure they will succeed\\n */\\ncontract LinearERC721VotingV1ValidatorV1 is\\n    IFunctionValidator,\\n    ERC165,\\n    Version\\n{\\n    uint16 public constant VERSION = 1;\\n\\n    /**\\n     * @dev Validates if a vote operation will succeed\\n     * @param lightAccountOwner The account attempting to vote\\n     * @param votingContract The address of the voting contract\\n     * @param callData The encoded vote function call\\n     * @return isValid True if the vote operation will succeed\\n     */\\n    function validateOperation(\\n        address,\\n        address lightAccountOwner,\\n        address votingContract,\\n        bytes calldata callData\\n    ) external view returns (bool) {\\n        // Verify function selector matches vote(uint32,uint8,address[],uint256[])\\n        if (bytes4(callData) != ILinearERC721VotingV1.vote.selector) {\\n            return false;\\n        }\\n\\n        // Decode vote parameters from callData\\n        (\\n            uint32 proposalId,\\n            uint8 voteType,\\n            address[] memory tokenAddresses,\\n            uint256[] memory tokenIds\\n        ) = abi.decode(\\n                callData[4:], // skip selector\\n                (uint32, uint8, address[], uint256[])\\n            );\\n\\n        // Check if arrays have matching lengths\\n        if (tokenAddresses.length != tokenIds.length) {\\n            return false;\\n        }\\n\\n        // Check if vote type is valid (NO=0, YES=1, ABSTAIN=2)\\n        if (voteType > 2) {\\n            return false;\\n        }\\n\\n        // Get voting end block to determine if the proposal exists\\n        uint256 endBlock = ILinearERC721VotingV1(votingContract).votingEndBlock(\\n            proposalId\\n        );\\n\\n        // Check if proposal exists (will have non-zero endBlock if it exists)\\n        if (endBlock == 0) {\\n            return false;\\n        }\\n\\n        // Check if voting period has ended\\n        if (\\n            ILinearERC721VotingV1(votingContract).votingPeriodEnded(proposalId)\\n        ) {\\n            return false;\\n        }\\n\\n        // Validate each token in the arrays\\n        uint256 totalWeight = 0;\\n        for (uint256 i = 0; i < tokenAddresses.length; i++) {\\n            address tokenAddress = tokenAddresses[i];\\n            uint256 tokenId = tokenIds[i];\\n\\n            // Accumulate weight (allowing zero weights)\\n            totalWeight += ILinearERC721VotingV1(votingContract).getTokenWeight(\\n                    tokenAddress\\n                );\\n\\n            // Check if token has already voted\\n            if (\\n                ILinearERC721VotingV1(votingContract).hasVoted(\\n                    proposalId,\\n                    tokenAddress,\\n                    tokenId\\n                )\\n            ) {\\n                return false;\\n            }\\n\\n            // Check if voter owns the token\\n            if (IERC721(tokenAddress).ownerOf(tokenId) != lightAccountOwner) {\\n                return false;\\n            }\\n        }\\n\\n        // Check total weight matches contract behavior\\n        if (totalWeight == 0) {\\n            return false;\\n        }\\n\\n        // All checks passed\\n        return true;\\n    }\\n\\n    function getVersion() public pure override returns (uint16) {\\n        return VERSION;\\n    }\\n\\n    /**\\n     * @dev ERC165 interface support\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view override(ERC165, Version, IFunctionValidator) returns (bool) {\\n        return\\n            interfaceId == type(IFunctionValidator).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x5f99e7cf42da6885c413111c50e8ce2ff58073c78245ef5e7daa406fc1d37ca9\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IVersion.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.19;\\n\\ninterface IVersion {\\n    function getVersion() external view returns (uint16);\\n}\\n\",\"keccak256\":\"0x03f8d9e49e53c7219f8cff3ee347989573db69ba10d7cbf2ac8d7de426d8ee9e\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/account-abstraction/IFunctionValidator.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.28;\\n\\ninterface IFunctionValidator {\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n\\n    function validateOperation(\\n        address userOpSender,\\n        address lightAccountOwner,\\n        address target,\\n        bytes calldata callData\\n    ) external view returns (bool isValid);\\n}\\n\",\"keccak256\":\"0x54957abf5793487399f6b1d94aca433257fe44320e9a4e35491f49ea4eaeb728\",\"license\":\"AGPL-3.0\"}},\"version\":1}",
  "bytecode": "0x6080604052348015600f57600080fd5b506108db8061001f6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806301ffc9a7146100515780630d8e6e2c14610079578063d7c7141c1461008f578063ffa1ad74146100a2575b600080fd5b61006461005f3660046104c4565b6100aa565b60405190151581526020015b60405180910390f35b60015b60405161ffff9091168152602001610070565b61006461009d36600461050d565b6100d5565b61007c600181565b60006001600160e01b0319821663d638ddbb60e01b14806100cf57506100cf8261048f565b92915050565b6000634e2addad60e01b6100e983856105b7565b6001600160e01b0319161461010057506000610486565b6000808080610112866004818a6105ef565b81019061011f9190610703565b9350935093509350805182511461013d576000945050505050610486565b60028360ff161115610156576000945050505050610486565b6040516355a9dbd960e01b815263ffffffff851660048201526000906001600160a01b038a16906355a9dbd990602401602060405180830381865afa1580156101a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101c791906107f9565b63ffffffff169050806000036101e557600095505050505050610486565b60405163b2958b3160e01b815263ffffffff861660048201526001600160a01b038a169063b2958b3190602401602060405180830381865afa15801561022f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102539190610816565b1561026657600095505050505050610486565b6000805b845181101561046357600085828151811061028757610287610838565b6020026020010151905060008583815181106102a5576102a5610838565b602090810291909101015160405163250aa68360e01b81526001600160a01b038481166004830152919250908e169063250aa68390602401602060405180830381865afa1580156102fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061031e919061084e565b6103289085610867565b60405163c909c3b160e01b815263ffffffff8b1660048201526001600160a01b03848116602483015260448201849052919550908e169063c909c3b190606401602060405180830381865afa158015610385573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103a99190610816565b156103c05760009950505050505050505050610486565b8d6001600160a01b0316826001600160a01b0316636352211e836040518263ffffffff1660e01b81526004016103f891815260200190565b602060405180830381865afa158015610415573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104399190610888565b6001600160a01b0316146104595760009950505050505050505050610486565b505060010161026a565b508060000361047b5760009650505050505050610486565b600196505050505050505b95945050505050565b60006001600160e01b031982166303639b8b60e21b14806100cf57506301ffc9a760e01b6001600160e01b03198316146100cf565b6000602082840312156104d657600080fd5b81356001600160e01b0319811681146104ee57600080fd5b9392505050565b6001600160a01b038116811461050a57600080fd5b50565b60008060008060006080868803121561052557600080fd5b8535610530816104f5565b94506020860135610540816104f5565b93506040860135610550816104f5565b9250606086013567ffffffffffffffff81111561056c57600080fd5b8601601f8101881361057d57600080fd5b803567ffffffffffffffff81111561059457600080fd5b8860208284010111156105a657600080fd5b959894975092955050506020019190565b80356001600160e01b031981169060048410156105e8576001600160e01b0319600485900360031b81901b82161691505b5092915050565b600080858511156105ff57600080fd5b8386111561060c57600080fd5b5050820193919092039150565b63ffffffff8116811461050a57600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561066a5761066a61062b565b604052919050565b600067ffffffffffffffff82111561068c5761068c61062b565b5060051b60200190565b600082601f8301126106a757600080fd5b81356106ba6106b582610672565b610641565b8082825260208201915060208360051b8601019250858311156106dc57600080fd5b602085015b838110156106f95780358352602092830192016106e1565b5095945050505050565b6000806000806080858703121561071957600080fd5b843561072481610619565b9350602085013560ff8116811461073a57600080fd5b9250604085013567ffffffffffffffff81111561075657600080fd5b8501601f8101871361076757600080fd5b80356107756106b582610672565b8082825260208201915060208360051b85010192508983111561079757600080fd5b6020840193505b828410156107c25783356107b1816104f5565b82526020938401939091019061079e565b9450505050606085013567ffffffffffffffff8111156107e157600080fd5b6107ed87828801610696565b91505092959194509250565b60006020828403121561080b57600080fd5b81516104ee81610619565b60006020828403121561082857600080fd5b815180151581146104ee57600080fd5b634e487b7160e01b600052603260045260246000fd5b60006020828403121561086057600080fd5b5051919050565b808201808211156100cf57634e487b7160e01b600052601160045260246000fd5b60006020828403121561089a57600080fd5b81516104ee816104f556fea26469706673582212203572af0523139f1c8a94a5bce4a611307b6d830dfcd6478471273d3cf888eea264736f6c634300081c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c806301ffc9a7146100515780630d8e6e2c14610079578063d7c7141c1461008f578063ffa1ad74146100a2575b600080fd5b61006461005f3660046104c4565b6100aa565b60405190151581526020015b60405180910390f35b60015b60405161ffff9091168152602001610070565b61006461009d36600461050d565b6100d5565b61007c600181565b60006001600160e01b0319821663d638ddbb60e01b14806100cf57506100cf8261048f565b92915050565b6000634e2addad60e01b6100e983856105b7565b6001600160e01b0319161461010057506000610486565b6000808080610112866004818a6105ef565b81019061011f9190610703565b9350935093509350805182511461013d576000945050505050610486565b60028360ff161115610156576000945050505050610486565b6040516355a9dbd960e01b815263ffffffff851660048201526000906001600160a01b038a16906355a9dbd990602401602060405180830381865afa1580156101a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101c791906107f9565b63ffffffff169050806000036101e557600095505050505050610486565b60405163b2958b3160e01b815263ffffffff861660048201526001600160a01b038a169063b2958b3190602401602060405180830381865afa15801561022f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102539190610816565b1561026657600095505050505050610486565b6000805b845181101561046357600085828151811061028757610287610838565b6020026020010151905060008583815181106102a5576102a5610838565b602090810291909101015160405163250aa68360e01b81526001600160a01b038481166004830152919250908e169063250aa68390602401602060405180830381865afa1580156102fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061031e919061084e565b6103289085610867565b60405163c909c3b160e01b815263ffffffff8b1660048201526001600160a01b03848116602483015260448201849052919550908e169063c909c3b190606401602060405180830381865afa158015610385573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103a99190610816565b156103c05760009950505050505050505050610486565b8d6001600160a01b0316826001600160a01b0316636352211e836040518263ffffffff1660e01b81526004016103f891815260200190565b602060405180830381865afa158015610415573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104399190610888565b6001600160a01b0316146104595760009950505050505050505050610486565b505060010161026a565b508060000361047b5760009650505050505050610486565b600196505050505050505b95945050505050565b60006001600160e01b031982166303639b8b60e21b14806100cf57506301ffc9a760e01b6001600160e01b03198316146100cf565b6000602082840312156104d657600080fd5b81356001600160e01b0319811681146104ee57600080fd5b9392505050565b6001600160a01b038116811461050a57600080fd5b50565b60008060008060006080868803121561052557600080fd5b8535610530816104f5565b94506020860135610540816104f5565b93506040860135610550816104f5565b9250606086013567ffffffffffffffff81111561056c57600080fd5b8601601f8101881361057d57600080fd5b803567ffffffffffffffff81111561059457600080fd5b8860208284010111156105a657600080fd5b959894975092955050506020019190565b80356001600160e01b031981169060048410156105e8576001600160e01b0319600485900360031b81901b82161691505b5092915050565b600080858511156105ff57600080fd5b8386111561060c57600080fd5b5050820193919092039150565b63ffffffff8116811461050a57600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561066a5761066a61062b565b604052919050565b600067ffffffffffffffff82111561068c5761068c61062b565b5060051b60200190565b600082601f8301126106a757600080fd5b81356106ba6106b582610672565b610641565b8082825260208201915060208360051b8601019250858311156106dc57600080fd5b602085015b838110156106f95780358352602092830192016106e1565b5095945050505050565b6000806000806080858703121561071957600080fd5b843561072481610619565b9350602085013560ff8116811461073a57600080fd5b9250604085013567ffffffffffffffff81111561075657600080fd5b8501601f8101871361076757600080fd5b80356107756106b582610672565b8082825260208201915060208360051b85010192508983111561079757600080fd5b6020840193505b828410156107c25783356107b1816104f5565b82526020938401939091019061079e565b9450505050606085013567ffffffffffffffff8111156107e157600080fd5b6107ed87828801610696565b91505092959194509250565b60006020828403121561080b57600080fd5b81516104ee81610619565b60006020828403121561082857600080fd5b815180151581146104ee57600080fd5b634e487b7160e01b600052603260045260246000fd5b60006020828403121561086057600080fd5b5051919050565b808201808211156100cf57634e487b7160e01b600052601160045260246000fd5b60006020828403121561089a57600080fd5b81516104ee816104f556fea26469706673582212203572af0523139f1c8a94a5bce4a611307b6d830dfcd6478471273d3cf888eea264736f6c634300081c0033",
  "devdoc": {
    "details": "Validates vote operations for LinearERC721VotingV1 to ensure they will succeed",
    "kind": "dev",
    "methods": {
      "getVersion()": {
        "details": "Returns the version number of this contract implementation Inheriting contracts MUST override this function."
      },
      "supportsInterface(bytes4)": {
        "details": "ERC165 interface support"
      },
      "validateOperation(address,address,address,bytes)": {
        "details": "Validates if a vote operation will succeed",
        "params": {
          "callData": "The encoded vote function call",
          "lightAccountOwner": "The account attempting to vote",
          "votingContract": "The address of the voting contract"
        },
        "returns": {
          "_0": "isValid True if the vote operation will succeed"
        }
      }
    },
    "title": "LinearERC721VotingV1ValidatorV1",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}